/**
 * Loader generated by glad 2.0.4 on Tue Jul 18 13:17:14 2023
 *
 * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
 *
 * Generator: C/C++
 * Specification: gl
 * Extensions: 86
 *
 * APIs:
 *  - gl:core=4.1
 *  - gles2=2.0
 *
 * Options:
 *  - ALIAS = True
 *  - DEBUG = False
 *  - HEADER_ONLY = True
 *  - LOADER = True
 *  - MX = False
 *  - ON_DEMAND = False
 *
 * Commandline:
 *    --merge --api='gl:core=4.1,gles2=2.0' --extensions='GL_AMD_draw_buffers_blend,GL_APPLE_flush_buffer_range,GL_APPLE_vertex_array_object,GL_ARB_ES2_compatibility,GL_ARB_blend_func_extended,GL_ARB_color_buffer_float,GL_ARB_copy_buffer,GL_ARB_draw_buffers,GL_ARB_draw_buffers_blend,GL_ARB_draw_elements_base_vertex,GL_ARB_draw_indirect,GL_ARB_draw_instanced,GL_ARB_framebuffer_object,GL_ARB_geometry_shader4,GL_ARB_get_program_binary,GL_ARB_gpu_shader_fp64,GL_ARB_imaging,GL_ARB_instanced_arrays,GL_ARB_map_buffer_range,GL_ARB_multisample,GL_ARB_multitexture,GL_ARB_occlusion_query,GL_ARB_point_parameters,GL_ARB_provoking_vertex,GL_ARB_sample_shading,GL_ARB_sampler_objects,GL_ARB_separate_shader_objects,GL_ARB_shader_objects,GL_ARB_shader_subroutine,GL_ARB_sync,GL_ARB_tessellation_shader,GL_ARB_texture_buffer_object,GL_ARB_texture_compression,GL_ARB_texture_multisample,GL_ARB_timer_query,GL_ARB_transform_feedback2,GL_ARB_transform_feedback3,GL_ARB_uniform_buffer_object,GL_ARB_vertex_array_object,GL_ARB_vertex_attrib_64bit,GL_ARB_vertex_buffer_object,GL_ARB_vertex_program,GL_ARB_vertex_shader,GL_ARB_vertex_type_2_10_10_10_rev,GL_ARB_viewport_array,GL_ATI_draw_buffers,GL_ATI_separate_stencil,GL_EXT_blend_color,GL_EXT_blend_equation_separate,GL_EXT_blend_func_separate,GL_EXT_blend_minmax,GL_EXT_copy_texture,GL_EXT_direct_state_access,GL_EXT_draw_buffers2,GL_EXT_draw_instanced,GL_EXT_draw_range_elements,GL_EXT_framebuffer_blit,GL_EXT_framebuffer_multisample,GL_EXT_framebuffer_object,GL_EXT_geometry_shader4,GL_EXT_gpu_shader4,GL_EXT_multi_draw_arrays,GL_EXT_point_parameters,GL_EXT_provoking_vertex,GL_EXT_subtexture,GL_EXT_texture3D,GL_EXT_texture_array,GL_EXT_texture_buffer_object,GL_EXT_texture_integer,GL_EXT_texture_object,GL_EXT_timer_query,GL_EXT_transform_feedback,GL_EXT_vertex_array,GL_EXT_vertex_attrib_64bit,GL_INGR_blend_func_separate,GL_NVX_conditional_render,GL_NV_conditional_render,GL_NV_explicit_multisample,GL_NV_geometry_program4,GL_NV_point_sprite,GL_NV_transform_feedback,GL_NV_transform_feedback2,GL_NV_vertex_program,GL_NV_vertex_program4,GL_OES_single_precision,GL_SGIS_point_parameters' c --alias --header-only --loader
 *
 * Online:
 *    http://glad.sh/#api=gl%3Acore%3D4.1%2Cgles2%3D2.0&generator=c&options=MERGE%2CALIAS%2CHEADER_ONLY%2CLOADER
 *
 */

#ifndef SF_GLAD_GL_H_
#define SF_GLAD_GL_H_

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifdef __gl_h_
  #error OpenGL (gl.h) header already included (API: gl), remove previous include!
#endif
#define __gl_h_ 1
#ifdef __gl3_h_
  #error OpenGL (gl3.h) header already included (API: gl), remove previous include!
#endif
#define __gl3_h_ 1
#ifdef __glext_h_
  #error OpenGL (glext.h) header already included (API: gl), remove previous include!
#endif
#define __glext_h_ 1
#ifdef __gl3ext_h_
  #error OpenGL (gl3ext.h) header already included (API: gl), remove previous include!
#endif
#define __gl3ext_h_ 1
#ifdef __gl2_h_
  #error OpenGL ES 2 header already included (API: gles2), remove previous include!
#endif
#define __gl2_h_ 1
#ifdef __gles2_gl2_h_
  #error OpenGL ES 2 header already included (API: gles2), remove previous include!
#endif
#define __gles2_gl2_h_ 1
#ifdef __gles2_gl3_h_
  #error OpenGL ES 3 header already included (API: gles2), remove previous include!
#endif
#define __gles2_gl3_h_ 1
#ifdef __clang__
#pragma clang diagnostic pop
#endif

#define SF_GLAD_GL
#define GLAD_OPTION_GL_ALIAS
#define GLAD_OPTION_GL_HEADER_ONLY
#define GLAD_OPTION_GL_LOADER

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAD_PLATFORM_H_
#define GLAD_PLATFORM_H_

#ifndef GLAD_PLATFORM_WIN32
  #if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
    #define GLAD_PLATFORM_WIN32 1
  #else
    #define GLAD_PLATFORM_WIN32 0
  #endif
#endif

#ifndef GLAD_PLATFORM_APPLE
  #ifdef __APPLE__
    #define GLAD_PLATFORM_APPLE 1
  #else
    #define GLAD_PLATFORM_APPLE 0
  #endif
#endif

#ifndef GLAD_PLATFORM_EMSCRIPTEN
  #ifdef __EMSCRIPTEN__
    #define GLAD_PLATFORM_EMSCRIPTEN 1
  #else
    #define GLAD_PLATFORM_EMSCRIPTEN 0
  #endif
#endif

#ifndef GLAD_PLATFORM_UWP
  #if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
    #ifdef __has_include
      #if __has_include(<winapifamily.h>)
        #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
      #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
      #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
    #endif
  #endif

  #ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      #define GLAD_PLATFORM_UWP 1
    #endif
  #endif

  #ifndef GLAD_PLATFORM_UWP
    #define GLAD_PLATFORM_UWP 0
  #endif
#endif

#ifdef __GNUC__
  #define GLAD_GNUC_EXTENSION __extension__
#else
  #define GLAD_GNUC_EXTENSION
#endif

#define SF_GLAD_UNUSED(x) (void)(x)

#ifndef GLAD_API_CALL
  #if defined(GLAD_API_CALL_EXPORT)
    #if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
      #if defined(GLAD_API_CALL_EXPORT_BUILD)
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllexport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllexport) extern
        #endif
      #else
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllimport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllimport) extern
        #endif
      #endif
    #elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
      #define GLAD_API_CALL __attribute__ ((visibility ("default"))) extern
    #else
      #define GLAD_API_CALL extern
    #endif
  #else
    #define GLAD_API_CALL extern
  #endif
#endif

#ifdef APIENTRY
  #define GLAD_API_PTR APIENTRY
#elif GLAD_PLATFORM_WIN32
  #define GLAD_API_PTR __stdcall
#else
  #define GLAD_API_PTR
#endif

#ifndef GLAPI
#define GLAPI GLAD_API_CALL
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY GLAD_API_PTR
#endif

#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define GLAD_VERSION_MAJOR(version) (version / 10000)
#define GLAD_VERSION_MINOR(version) (version % 10000)

#define GLAD_GENERATOR_VERSION "2.0.4"

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ACTIVE_TEXTURE_ARB 0x84E0
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_ACTIVE_VARYINGS_NV 0x8C81
#define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_ALPHA 0x1906
#define GL_ALPHA16I_EXT 0x8D8A
#define GL_ALPHA16UI_EXT 0x8D78
#define GL_ALPHA32I_EXT 0x8D84
#define GL_ALPHA32UI_EXT 0x8D72
#define GL_ALPHA8I_EXT 0x8D90
#define GL_ALPHA8UI_EXT 0x8D7E
#define GL_ALPHA_INTEGER_EXT 0x8D97
#define GL_ALREADY_SIGNALED 0x911A
#define GL_ALWAYS 0x0207
#define GL_AND 0x1501
#define GL_AND_INVERTED 0x1504
#define GL_AND_REVERSE 0x1502
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_ARB 0x8892
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
#define GL_BACK 0x0405
#define GL_BACK_LEFT 0x0402
#define GL_BACK_PRIMARY_COLOR_NV 0x8C77
#define GL_BACK_RIGHT 0x0403
#define GL_BACK_SECONDARY_COLOR_NV 0x8C78
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_BGRA_INTEGER 0x8D9B
#define GL_BGRA_INTEGER_EXT 0x8D9B
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGR_INTEGER_EXT 0x8D9A
#define GL_BLEND 0x0BE2
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_COLOR_EXT 0x8005
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_DST_ALPHA_EXT 0x80CA
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_DST_RGB_EXT 0x80C8
#define GL_BLEND_EQUATION 0x8009
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
#define GL_BLEND_EQUATION_EXT 0x8009
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_BLEND_EQUATION_RGB_EXT 0x8009
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_BLEND_SRC_ALPHA_EXT 0x80CB
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_SRC_RGB_EXT 0x80C9
#define GL_BLUE 0x1905
#define GL_BLUE_INTEGER 0x8D96
#define GL_BLUE_INTEGER_EXT 0x8D96
#define GL_BOOL 0x8B56
#define GL_BOOL_ARB 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC2_ARB 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC3_ARB 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_BOOL_VEC4_ARB 0x8B59
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_ACCESS_ARB 0x88BB
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAPPED_ARB 0x88BC
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_SIZE_ARB 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_BUFFER_USAGE_ARB 0x8765
#define GL_BYTE 0x1400
#define GL_CCW 0x0901
#define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_CLAMP_READ_COLOR_ARB 0x891C
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_CLAMP_VERTEX_COLOR_ARB 0x891A
#define GL_CLEAR 0x1500
#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_CLIP_DISTANCE_NV 0x8C7A
#define GL_COLOR 0x1800
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#define GL_COLOR_ARRAY_COUNT_EXT 0x8084
#define GL_COLOR_ARRAY_EXT 0x8076
#define GL_COLOR_ARRAY_POINTER_EXT 0x8090
#define GL_COLOR_ARRAY_SIZE_EXT 0x8081
#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
#define GL_COLOR_ARRAY_TYPE_EXT 0x8082
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_COLOR_SUM_ARB 0x8458
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_COMPILE_STATUS 0x8B81
#define GL_COMPRESSED_ALPHA_ARB 0x84E9
#define GL_COMPRESSED_INTENSITY_ARB 0x84EC
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
#define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_RG 0x8226
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_COMPRESSED_RGBA_ARB 0x84EE
#define GL_COMPRESSED_RGB_ARB 0x84ED
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
#define GL_CONDITION_SATISFIED 0x911C
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_ALPHA_EXT 0x8003
#define GL_CONSTANT_COLOR 0x8001
#define GL_CONSTANT_COLOR_EXT 0x8001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_FLAGS 0x821E
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_COORD_REPLACE_NV 0x8862
#define GL_COPY 0x1503
#define GL_COPY_INVERTED 0x150C
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_CURRENT_ATTRIB_NV 0x8626
#define GL_CURRENT_MATRIX_ARB 0x8641
#define GL_CURRENT_MATRIX_NV 0x8641
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_CURRENT_QUERY 0x8865
#define GL_CURRENT_QUERY_ARB 0x8865
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
#define GL_CW 0x0900
#define GL_DECR 0x1E03
#define GL_DECR_WRAP 0x8508
#define GL_DELETE_STATUS 0x8B80
#define GL_DEPTH 0x1801
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_CLAMP 0x864F
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_COMPONENT 0x1902
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH_FUNC 0x0B74
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_STENCIL 0x84F9
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DISTANCE_ATTENUATION_EXT 0x8129
#define GL_DISTANCE_ATTENUATION_SGIS 0x8129
#define GL_DITHER 0x0BD0
#define GL_DONT_CARE 0x1100
#define GL_DOUBLE 0x140A
#define GL_DOUBLEBUFFER 0x0C32
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT2_EXT 0x8F46
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x3_EXT 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT2x4_EXT 0x8F4A
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT3_EXT 0x8F47
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x2_EXT 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT3x4_EXT 0x8F4C
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT4_EXT 0x8F48
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x2_EXT 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_DOUBLE_MAT4x3_EXT 0x8F4E
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC2_EXT 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC3_EXT 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_VEC4_EXT 0x8FFE
#define GL_DRAW_BUFFER 0x0C01
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER0_ARB 0x8825
#define GL_DRAW_BUFFER0_ATI 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER10_ARB 0x882F
#define GL_DRAW_BUFFER10_ATI 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER11_ARB 0x8830
#define GL_DRAW_BUFFER11_ATI 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER12_ARB 0x8831
#define GL_DRAW_BUFFER12_ATI 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER13_ARB 0x8832
#define GL_DRAW_BUFFER13_ATI 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER14_ARB 0x8833
#define GL_DRAW_BUFFER14_ATI 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_DRAW_BUFFER15_ARB 0x8834
#define GL_DRAW_BUFFER15_ATI 0x8834
#define GL_DRAW_BUFFER1_ARB 0x8826
#define GL_DRAW_BUFFER1_ATI 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER2_ARB 0x8827
#define GL_DRAW_BUFFER2_ATI 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER3_ARB 0x8828
#define GL_DRAW_BUFFER3_ATI 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER4_ARB 0x8829
#define GL_DRAW_BUFFER4_ATI 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER5_ARB 0x882A
#define GL_DRAW_BUFFER5_ATI 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER6_ARB 0x882B
#define GL_DRAW_BUFFER6_ATI 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER7_ARB 0x882C
#define GL_DRAW_BUFFER7_ATI 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER8_ARB 0x882D
#define GL_DRAW_BUFFER8_ATI 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER9_ARB 0x882E
#define GL_DRAW_BUFFER9_ATI 0x882E
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_DST_ALPHA 0x0304
#define GL_DST_COLOR 0x0306
#define GL_DYNAMIC_COPY 0x88EA
#define GL_DYNAMIC_COPY_ARB 0x88EA
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_DRAW_ARB 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_READ_ARB 0x88E9
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
#define GL_EDGE_FLAG_ARRAY_EXT 0x8079
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#define GL_EQUAL 0x0202
#define GL_EQUIV 0x1509
#define GL_EXTENSIONS 0x1F03
#define GL_FALSE 0
#define GL_FASTEST 0x1101
#define GL_FILL 0x1B02
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_FIRST_VERTEX_CONVENTION_EXT 0x8E4D
#define GL_FIXED 0x140C
#define GL_FIXED_ONLY 0x891D
#define GL_FIXED_ONLY_ARB 0x891D
#define GL_FLOAT 0x1406
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT2_ARB 0x8B5A
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT3_ARB 0x8B5B
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4 0x8B5C
#define GL_FLOAT_MAT4_ARB 0x8B5C
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC2_ARB 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC3_ARB 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_FLOAT_VEC4_ARB 0x8B52
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_FRAMEBUFFER 0x8D40
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_EXT 0x8D40
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
#define GL_FRONT 0x0404
#define GL_FRONT_AND_BACK 0x0408
#define GL_FRONT_FACE 0x0B46
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_ADD_EXT 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_GENERIC_ATTRIB_NV 0x8C7D
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_INPUT_TYPE_ARB 0x8DDB
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_GEOMETRY_OUTPUT_TYPE_ARB 0x8DDC
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
#define GL_GEOMETRY_PROGRAM_NV 0x8C26
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_SHADER_ARB 0x8DD9
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_GEOMETRY_SHADER_EXT 0x8DD9
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_VERTICES_OUT_ARB 0x8DDA
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
#define GL_GEQUAL 0x0206
#define GL_GREATER 0x0204
#define GL_GREEN 0x1904
#define GL_GREEN_INTEGER 0x8D95
#define GL_GREEN_INTEGER_EXT 0x8D95
#define GL_HALF_FLOAT 0x140B
#define GL_HIGH_FLOAT 0x8DF2
#define GL_HIGH_INT 0x8DF5
#define GL_IDENTITY_NV 0x862A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_INCR 0x1E02
#define GL_INCR_WRAP 0x8507
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#define GL_INDEX_ARRAY_COUNT_EXT 0x8087
#define GL_INDEX_ARRAY_EXT 0x8077
#define GL_INDEX_ARRAY_POINTER_EXT 0x8091
#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
#define GL_INDEX_ARRAY_TYPE_EXT 0x8085
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_INT 0x1404
#define GL_INTENSITY16I_EXT 0x8D8B
#define GL_INTENSITY16UI_EXT 0x8D79
#define GL_INTENSITY32I_EXT 0x8D85
#define GL_INTENSITY32UI_EXT 0x8D73
#define GL_INTENSITY8I_EXT 0x8D91
#define GL_INTENSITY8UI_EXT 0x8D7F
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_EXT 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE
#define GL_INT_SAMPLER_1D_EXT 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF
#define GL_INT_SAMPLER_2D_EXT 0x8DCA
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_3D_EXT 0x8DCB
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_CUBE_EXT 0x8DCC
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_INT_SAMPLER_RENDERBUFFER_NV 0x8E57
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC2_ARB 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC3_ARB 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_INT_VEC4_ARB 0x8B55
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_INVALID_OPERATION 0x0502
#define GL_INVALID_VALUE 0x0501
#define GL_INVERSE_NV 0x862B
#define GL_INVERSE_TRANSPOSE_NV 0x862D
#define GL_INVERT 0x150A
#define GL_ISOLINES 0x8E7A
#define GL_KEEP 0x1E00
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_LAST_VERTEX_CONVENTION_EXT 0x8E4E
#define GL_LAYER_NV 0x8DAA
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_LEFT 0x0406
#define GL_LEQUAL 0x0203
#define GL_LESS 0x0201
#define GL_LINE 0x1B01
#define GL_LINEAR 0x2601
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_LINES 0x0001
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINES_ADJACENCY_ARB 0x000A
#define GL_LINES_ADJACENCY_EXT 0x000A
#define GL_LINE_LOOP 0x0002
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_LINE_STRIP 0x0003
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_LINE_STRIP_ADJACENCY_ARB 0x000B
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINK_STATUS 0x8B82
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_LOWER_LEFT 0x8CA1
#define GL_LOW_FLOAT 0x8DF0
#define GL_LOW_INT 0x8DF3
#define GL_LUMINANCE16I_EXT 0x8D8C
#define GL_LUMINANCE16UI_EXT 0x8D7A
#define GL_LUMINANCE32I_EXT 0x8D86
#define GL_LUMINANCE32UI_EXT 0x8D74
#define GL_LUMINANCE8I_EXT 0x8D92
#define GL_LUMINANCE8UI_EXT 0x8D80
#define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D
#define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B
#define GL_LUMINANCE_ALPHA32I_EXT 0x8D87
#define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75
#define GL_LUMINANCE_ALPHA8I_EXT 0x8D93
#define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81
#define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D
#define GL_LUMINANCE_INTEGER_EXT 0x8D9C
#define GL_MAJOR_VERSION 0x821B
#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MATRIX0_ARB 0x88C0
#define GL_MATRIX0_NV 0x8630
#define GL_MATRIX10_ARB 0x88CA
#define GL_MATRIX11_ARB 0x88CB
#define GL_MATRIX12_ARB 0x88CC
#define GL_MATRIX13_ARB 0x88CD
#define GL_MATRIX14_ARB 0x88CE
#define GL_MATRIX15_ARB 0x88CF
#define GL_MATRIX16_ARB 0x88D0
#define GL_MATRIX17_ARB 0x88D1
#define GL_MATRIX18_ARB 0x88D2
#define GL_MATRIX19_ARB 0x88D3
#define GL_MATRIX1_ARB 0x88C1
#define GL_MATRIX1_NV 0x8631
#define GL_MATRIX20_ARB 0x88D4
#define GL_MATRIX21_ARB 0x88D5
#define GL_MATRIX22_ARB 0x88D6
#define GL_MATRIX23_ARB 0x88D7
#define GL_MATRIX24_ARB 0x88D8
#define GL_MATRIX25_ARB 0x88D9
#define GL_MATRIX26_ARB 0x88DA
#define GL_MATRIX27_ARB 0x88DB
#define GL_MATRIX28_ARB 0x88DC
#define GL_MATRIX29_ARB 0x88DD
#define GL_MATRIX2_ARB 0x88C2
#define GL_MATRIX2_NV 0x8632
#define GL_MATRIX30_ARB 0x88DE
#define GL_MATRIX31_ARB 0x88DF
#define GL_MATRIX3_ARB 0x88C3
#define GL_MATRIX3_NV 0x8633
#define GL_MATRIX4_ARB 0x88C4
#define GL_MATRIX4_NV 0x8634
#define GL_MATRIX5_ARB 0x88C5
#define GL_MATRIX5_NV 0x8635
#define GL_MATRIX6_ARB 0x88C6
#define GL_MATRIX6_NV 0x8636
#define GL_MATRIX7_ARB 0x88C7
#define GL_MATRIX7_NV 0x8637
#define GL_MATRIX8_ARB 0x88C8
#define GL_MATRIX9_ARB 0x88C9
#define GL_MAX 0x8008
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_MAX_DRAW_BUFFERS_ARB 0x8824
#define GL_MAX_DRAW_BUFFERS_ATI 0x8824
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_MAX_ELEMENTS_INDICES_EXT 0x80E9
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_VERTICES_EXT 0x80E8
#define GL_MAX_EXT 0x8008
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 0x8905
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
#define GL_MAX_SAMPLES 0x8D57
#define GL_MAX_SAMPLES_EXT 0x8D57
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_MAX_SAMPLE_MASK_WORDS_NV 0x8E59
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
#define GL_MAX_TRACK_MATRICES_NV 0x862F
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
#define GL_MAX_VIEWPORTS 0x825B
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_MEDIUM_INT 0x8DF4
#define GL_MIN 0x8007
#define GL_MINOR_VERSION 0x821C
#define GL_MIN_EXT 0x8007
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 0x8904
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB 0x8C37
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MODELVIEW_PROJECTION_NV 0x8629
#define GL_MULTISAMPLE 0x809D
#define GL_MULTISAMPLE_ARB 0x809D
#define GL_MULTISAMPLE_BIT_ARB 0x20000000
#define GL_NAND 0x150E
#define GL_NEAREST 0x2600
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_NEVER 0x0200
#define GL_NEXT_BUFFER_NV -2
#define GL_NICEST 0x1102
#define GL_NONE 0
#define GL_NOOP 0x1505
#define GL_NOR 0x1508
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
#define GL_NORMAL_ARRAY_EXT 0x8075
#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
#define GL_NOTEQUAL 0x0205
#define GL_NO_ERROR 0
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
#define GL_NUM_EXTENSIONS 0x821D
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
#define GL_OBJECT_LINK_STATUS_ARB 0x8B82
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
#define GL_OBJECT_SUBTYPE_ARB 0x8B4F
#define GL_OBJECT_TYPE 0x9112
#define GL_OBJECT_TYPE_ARB 0x8B4E
#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
#define GL_ONE 1
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_OR 0x1507
#define GL_OR_INVERTED 0x150D
#define GL_OR_REVERSE 0x150B
#define GL_OUT_OF_MEMORY 0x0505
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_SKIP_IMAGES_EXT 0x806B
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PATCHES 0x000E
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_PATCH_VERTICES 0x8E72
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_POINT 0x1B00
#define GL_POINTS 0x0000
#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_POINT_SIZE_MAX_ARB 0x8127
#define GL_POINT_SIZE_MAX_EXT 0x8127
#define GL_POINT_SIZE_MAX_SGIS 0x8127
#define GL_POINT_SIZE_MIN_ARB 0x8126
#define GL_POINT_SIZE_MIN_EXT 0x8126
#define GL_POINT_SIZE_MIN_SGIS 0x8126
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_POINT_SPRITE_NV 0x8861
#define GL_POINT_SPRITE_R_MODE_NV 0x8863
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_PRIMITIVES_GENERATED_EXT 0x8C87
#define GL_PRIMITIVES_GENERATED_NV 0x8C87
#define GL_PRIMITIVE_ID_NV 0x8C7C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINDING_ARB 0x8677
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
#define GL_PROGRAM_ERROR_POSITION_NV 0x864B
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
#define GL_PROGRAM_FORMAT_ARB 0x8876
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
#define GL_PROGRAM_LENGTH_ARB 0x8627
#define GL_PROGRAM_LENGTH_NV 0x8627
#define GL_PROGRAM_MATRIX_EXT 0x8E2D
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#define GL_PROGRAM_OBJECT_ARB 0x8B40
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
#define GL_PROGRAM_PARAMETER_NV 0x8644
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
#define GL_PROGRAM_RESIDENT_NV 0x8647
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_PROGRAM_STRING_ARB 0x8628
#define GL_PROGRAM_STRING_NV 0x8628
#define GL_PROGRAM_TARGET_NV 0x8646
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_PROVOKING_VERTEX_EXT 0x8E4F
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_PROXY_TEXTURE_3D_EXT 0x8070
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_QUADS 0x0007
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_QUERY_BY_REGION_NO_WAIT_NV 0x8E16
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_WAIT_NV 0x8E15
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_QUERY_COUNTER_BITS_ARB 0x8864
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_NO_WAIT_NV 0x8E14
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_ARB 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_WAIT_NV 0x8E13
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_R16 0x822A
#define GL_R16F 0x822D
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R16_SNORM 0x8F98
#define GL_R32F 0x822E
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_R3_G3_B2 0x2A10
#define GL_R8 0x8229
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R8_SNORM 0x8F94
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_RASTERIZER_DISCARD_EXT 0x8C89
#define GL_RASTERIZER_DISCARD_NV 0x8C89
#define GL_READ_BUFFER 0x0C02
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
#define GL_READ_FRAMEBUFFER_EXT 0x8CA8
#define GL_READ_ONLY 0x88B8
#define GL_READ_ONLY_ARB 0x88B8
#define GL_READ_WRITE 0x88BA
#define GL_READ_WRITE_ARB 0x88BA
#define GL_RED 0x1903
#define GL_RED_INTEGER 0x8D94
#define GL_RED_INTEGER_EXT 0x8D94
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
#define GL_RENDERBUFFER_EXT 0x8D41
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
#define GL_RENDERER 0x1F01
#define GL_REPEAT 0x2901
#define GL_REPLACE 0x1E01
#define GL_RG 0x8227
#define GL_RG16 0x822C
#define GL_RG16F 0x822F
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG16_SNORM 0x8F99
#define GL_RG32F 0x8230
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_RG8 0x822B
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG8_SNORM 0x8F95
#define GL_RGB 0x1907
#define GL_RGB10 0x8052
#define GL_RGB10_A2 0x8059
#define GL_RGB10_A2UI 0x906F
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGB16F 0x881B
#define GL_RGB16I 0x8D89
#define GL_RGB16I_EXT 0x8D89
#define GL_RGB16UI 0x8D77
#define GL_RGB16UI_EXT 0x8D77
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGB32F 0x8815
#define GL_RGB32I 0x8D83
#define GL_RGB32I_EXT 0x8D83
#define GL_RGB32UI 0x8D71
#define GL_RGB32UI_EXT 0x8D71
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB565 0x8D62
#define GL_RGB5_A1 0x8057
#define GL_RGB8 0x8051
#define GL_RGB8I 0x8D8F
#define GL_RGB8I_EXT 0x8D8F
#define GL_RGB8UI 0x8D7D
#define GL_RGB8UI_EXT 0x8D7D
#define GL_RGB8_SNORM 0x8F96
#define GL_RGB9_E5 0x8C3D
#define GL_RGBA 0x1908
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_RGBA16F 0x881A
#define GL_RGBA16I 0x8D88
#define GL_RGBA16I_EXT 0x8D88
#define GL_RGBA16UI 0x8D76
#define GL_RGBA16UI_EXT 0x8D76
#define GL_RGBA16_SNORM 0x8F9B
#define GL_RGBA2 0x8055
#define GL_RGBA32F 0x8814
#define GL_RGBA32I 0x8D82
#define GL_RGBA32I_EXT 0x8D82
#define GL_RGBA32UI 0x8D70
#define GL_RGBA32UI_EXT 0x8D70
#define GL_RGBA4 0x8056
#define GL_RGBA8 0x8058
#define GL_RGBA8I 0x8D8E
#define GL_RGBA8I_EXT 0x8D8E
#define GL_RGBA8UI 0x8D7C
#define GL_RGBA8UI_EXT 0x8D7C
#define GL_RGBA8_SNORM 0x8F97
#define GL_RGBA_FLOAT_MODE_ARB 0x8820
#define GL_RGBA_INTEGER 0x8D99
#define GL_RGBA_INTEGER_EXT 0x8D99
#define GL_RGBA_INTEGER_MODE_EXT 0x8D9E
#define GL_RGB_INTEGER 0x8D98
#define GL_RGB_INTEGER_EXT 0x8D98
#define GL_RG_INTEGER 0x8228
#define GL_RIGHT 0x0407
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_1D_ARB 0x8B5D
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_2D_ARB 0x8B5E
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_ARB 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_3D_ARB 0x8B5F
#define GL_SAMPLER_BINDING 0x8919
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_SAMPLER_BUFFER_EXT 0x8DC2
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_CUBE_ARB 0x8B60
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5
#define GL_SAMPLER_RENDERBUFFER_NV 0x8E56
#define GL_SAMPLES 0x80A9
#define GL_SAMPLES_ARB 0x80A9
#define GL_SAMPLES_PASSED 0x8914
#define GL_SAMPLES_PASSED_ARB 0x8914
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_BUFFERS_ARB 0x80A8
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_ARB 0x80A0
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_NV 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_SAMPLE_MASK_VALUE_NV 0x8E52
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_POSITION_NV 0x8E50
#define GL_SAMPLE_SHADING 0x8C36
#define GL_SAMPLE_SHADING_ARB 0x8C36
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_SEPARATE_ATTRIBS_EXT 0x8C8D
#define GL_SEPARATE_ATTRIBS_NV 0x8C8D
#define GL_SET 0x150F
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_OBJECT_ARB 0x8B48
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_SHADER_TYPE 0x8B4F
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_SHORT 0x1402
#define GL_SIGNALED 0x9119
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_SKIP_COMPONENTS1_NV -6
#define GL_SKIP_COMPONENTS2_NV -5
#define GL_SKIP_COMPONENTS3_NV -4
#define GL_SKIP_COMPONENTS4_NV -3
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SRC1_ALPHA 0x8589
#define GL_SRC1_COLOR 0x88F9
#define GL_SRC_ALPHA 0x0302
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_COLOR 0x0300
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_SRGB_ALPHA 0x8C42
#define GL_STATIC_COPY 0x88E6
#define GL_STATIC_COPY_ARB 0x88E6
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_DRAW_ARB 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_READ_ARB 0x88E5
#define GL_STENCIL 0x1802
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_FAIL_ATI 0x8801
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FUNC_ATI 0x8800
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX16 0x8D49
#define GL_STENCIL_INDEX16_EXT 0x8D49
#define GL_STENCIL_INDEX1_EXT 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX4_EXT 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX8_EXT 0x8D48
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_STEREO 0x0C33
#define GL_STREAM_COPY 0x88E2
#define GL_STREAM_COPY_ARB 0x88E2
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_DRAW_ARB 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_READ_ARB 0x88E1
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_SYNC_STATUS 0x9114
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TEXTURE 0x1702
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE0_ARB 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE10_ARB 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE11_ARB 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE12_ARB 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE13_ARB 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE14_ARB 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE15_ARB 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE16_ARB 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE17_ARB 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE18_ARB 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE19_ARB 0x84D3
#define GL_TEXTURE1_ARB 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE20_ARB 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE21_ARB 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE22_ARB 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE23_ARB 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE24_ARB 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE25_ARB 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE26_ARB 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE27_ARB 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE28_ARB 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE29_ARB 0x84DD
#define GL_TEXTURE2_ARB 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE30_ARB 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE31_ARB 0x84DF
#define GL_TEXTURE3_ARB 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE4_ARB 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE5_ARB 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE6_ARB 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE7_ARB 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE8_ARB 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE9_ARB 0x84C9
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
#define GL_TEXTURE_1D_BINDING_EXT 0x8068
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
#define GL_TEXTURE_2D_BINDING_EXT 0x8069
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_TEXTURE_3D 0x806F
#define GL_TEXTURE_3D_BINDING_EXT 0x806A
#define GL_TEXTURE_3D_EXT 0x806F
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_ARB 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_TEXTURE_BUFFER_ARB 0x8C2A
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
#define GL_TEXTURE_BUFFER_EXT 0x8C2A
#define GL_TEXTURE_BUFFER_FORMAT_ARB 0x8C2E
#define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_TEXTURE_COMPRESSED_ARB 0x86A1
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
#define GL_TEXTURE_COORD_NV 0x8C79
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_DEPTH_EXT 0x8071
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_PRIORITY_EXT 0x8066
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
#define GL_TEXTURE_RENDERBUFFER_NV 0x8E55
#define GL_TEXTURE_RESIDENT_EXT 0x8067
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_TEXTURE_WRAP_R_EXT 0x8072
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_TIMESTAMP 0x8E28
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIME_ELAPSED_EXT 0x88BF
#define GL_TRACK_MATRIX_NV 0x8648
#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_TRANSFORM_FEEDBACK_BINDING_NV 0x8E25
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
#define GL_TRANSFORM_FEEDBACK_NV 0x8E22
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
#define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
#define GL_TRANSPOSE_NV 0x862C
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT 0x8E2E
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLES_ADJACENCY_ARB 0x000C
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C
#define GL_TRIANGLE_FAN 0x0006
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
#define GL_TRUE 1
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNSIGNALED 0x9118
#define GL_UNSIGNED_BYTE 0x1401
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_INT 0x1405
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_UNSIGNED_SHORT 0x1403
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UPPER_LEFT 0x8CA2
#define GL_VALIDATE_STATUS 0x8B83
#define GL_VENDOR 0x1F00
#define GL_VERSION 0x1F02
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
#define GL_VERTEX_ARRAY_EXT 0x8074
#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
#define GL_VERTEX_ID_NV 0x8C7B
#define GL_VERTEX_PROGRAM_ARB 0x8620
#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
#define GL_VERTEX_PROGRAM_NV 0x8620
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
#define GL_VERTEX_SHADER 0x8B31
#define GL_VERTEX_SHADER_ARB 0x8B31
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_VERTEX_STATE_PROGRAM_NV 0x8621
#define GL_VIEWPORT 0x0BA2
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_WAIT_FAILED 0x911D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#define GL_WRITE_ONLY 0x88B9
#define GL_WRITE_ONLY_ARB 0x88B9
#define GL_XOR 0x1506
#define GL_ZERO 0
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_ALPHA_BITS 0x0D55
#define GL_BLUE_BITS 0x0D54
#define GL_DEPTH_BITS 0x0D56
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS 0x8CD9
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_GREEN_BITS 0x0D53
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_RED_BITS 0x0D52
#define GL_STENCIL_BITS 0x0D57


#ifndef __khrplatform_h_
#define __khrplatform_h_

/*
** Copyright (c) 2008-2018 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

/* Khronos platform-specific types and definitions.
 *
 * The master copy of khrplatform.h is maintained in the Khronos EGL
 * Registry repository at https://github.com/KhronosGroup/EGL-Registry
 * The last semantic modification to khrplatform.h was at commit ID:
 *      67a3e0864c2d75ea5287b9f3d2eb74a745936692
 *
 * Adopters may modify this file to suit their platform. Adopters are
 * encouraged to submit platform specific modifications to the Khronos
 * group so that they can be included in future versions of this file.
 * Please submit changes by filing pull requests or issues on
 * the EGL Registry repository linked above.
 *
 *
 * See the Implementer's Guidelines for information about where this file
 * should be located on your system and for more details of its use:
 *    http://www.khronos.org/registry/implementers_guide.pdf
 *
 * This file should be included as
 *        #include <KHR/khrplatform.h>
 * by Khronos client API header files that use its types and defines.
 *
 * The types in khrplatform.h should only be used to define API-specific types.
 *
 * Types defined in khrplatform.h:
 *    khronos_int8_t              signed   8  bit
 *    khronos_uint8_t             unsigned 8  bit
 *    khronos_int16_t             signed   16 bit
 *    khronos_uint16_t            unsigned 16 bit
 *    khronos_int32_t             signed   32 bit
 *    khronos_uint32_t            unsigned 32 bit
 *    khronos_int64_t             signed   64 bit
 *    khronos_uint64_t            unsigned 64 bit
 *    khronos_intptr_t            signed   same number of bits as a pointer
 *    khronos_uintptr_t           unsigned same number of bits as a pointer
 *    khronos_ssize_t             signed   size
 *    khronos_usize_t             unsigned size
 *    khronos_float_t             signed   32 bit floating point
 *    khronos_time_ns_t           unsigned 64 bit time in nanoseconds
 *    khronos_utime_nanoseconds_t unsigned time interval or absolute time in
 *                                         nanoseconds
 *    khronos_stime_nanoseconds_t signed time interval in nanoseconds
 *    khronos_boolean_enum_t      enumerated boolean type. This should
 *      only be used as a base type when a client API's boolean type is
 *      an enum. Client APIs which use an integer or other type for
 *      booleans cannot use this as the base type for their boolean.
 *
 * Tokens defined in khrplatform.h:
 *
 *    KHRONOS_FALSE, KHRONOS_TRUE Enumerated boolean false/true values.
 *
 *    KHRONOS_SUPPORT_INT64 is 1 if 64 bit integers are supported; otherwise 0.
 *    KHRONOS_SUPPORT_FLOAT is 1 if floats are supported; otherwise 0.
 *
 * Calling convention macros defined in this file:
 *    KHRONOS_APICALL
 *    KHRONOS_GLAD_API_PTR
 *    KHRONOS_APIATTRIBUTES
 *
 * These may be used in function prototypes as:
 *
 *      KHRONOS_APICALL void KHRONOS_GLAD_API_PTR funcname(
 *                                  int arg1,
 *                                  int arg2) KHRONOS_APIATTRIBUTES;
 */

#if defined(__SCITECH_SNAP__) && !defined(KHRONOS_STATIC)
#   define KHRONOS_STATIC 1
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APICALL
 *-------------------------------------------------------------------------
 * This precedes the return type of the function in the function prototype.
 */
#if defined(KHRONOS_STATIC)
    /* If the preprocessor constant KHRONOS_STATIC is defined, make the
     * header compatible with static linking. */
#   define KHRONOS_APICALL
#elif defined(_WIN32)
#   define KHRONOS_APICALL __declspec(dllimport)
#elif defined (__SYMBIAN32__)
#   define KHRONOS_APICALL IMPORT_C
#elif defined(__ANDROID__)
#   define KHRONOS_APICALL __attribute__((visibility("default")))
#else
#   define KHRONOS_APICALL
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_GLAD_API_PTR
 *-------------------------------------------------------------------------
 * This follows the return type of the function  and precedes the function
 * name in the function prototype.
 */
#if defined(_WIN32) && !defined(_WIN32_WCE) && !defined(__SCITECH_SNAP__)
    /* Win32 but not WinCE */
#   define KHRONOS_GLAD_API_PTR __stdcall
#else
#   define KHRONOS_GLAD_API_PTR
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APIATTRIBUTES
 *-------------------------------------------------------------------------
 * This follows the closing parenthesis of the function prototype arguments.
 */
#if defined (__ARMCC_2__)
#define KHRONOS_APIATTRIBUTES __softfp
#else
#define KHRONOS_APIATTRIBUTES
#endif

/*-------------------------------------------------------------------------
 * basic type definitions
 *-----------------------------------------------------------------------*/
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__GNUC__) || defined(__SCO__) || defined(__USLC__)


/*
 * Using <stdint.h>
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1
/*
 * To support platform where unsigned long cannot be used interchangeably with
 * inptr_t (e.g. CHERI-extended ISAs), we can use the stdint.h intptr_t.
 * Ideally, we could just use (u)intptr_t everywhere, but this could result in
 * ABI breakage if khronos_uintptr_t is changed from unsigned long to
 * unsigned long long or similar (this results in different C++ name mangling).
 * To avoid changes for existing platforms, we restrict usage of intptr_t to
 * platforms where the size of a pointer is larger than the size of long.
 */
#if defined(__SIZEOF_LONG__) && defined(__SIZEOF_POINTER__)
#if __SIZEOF_POINTER__ > __SIZEOF_LONG__
#define KHRONOS_USE_INTPTR_T
#endif
#endif

#elif defined(__VMS ) || defined(__sgi)

/*
 * Using <inttypes.h>
 */
#include <inttypes.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(_WIN32) && !defined(__SCITECH_SNAP__)

/*
 * Win32
 */
typedef __int32                 khronos_int32_t;
typedef unsigned __int32        khronos_uint32_t;
typedef __int64                 khronos_int64_t;
typedef unsigned __int64        khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__sun__) || defined(__digital__)

/*
 * Sun or Digital
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#if defined(__arch64__) || defined(_LP64)
typedef long int                khronos_int64_t;
typedef unsigned long int       khronos_uint64_t;
#else
typedef long long int           khronos_int64_t;
typedef unsigned long long int  khronos_uint64_t;
#endif /* __arch64__ */
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif 0

/*
 * Hypothetical platform with no float or int64 support
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#define KHRONOS_SUPPORT_INT64   0
#define KHRONOS_SUPPORT_FLOAT   0

#else

/*
 * Generic fallback
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#endif


/*
 * Types that are (so far) the same on all platforms
 */
typedef signed   char          khronos_int8_t;
typedef unsigned char          khronos_uint8_t;
typedef signed   short int     khronos_int16_t;
typedef unsigned short int     khronos_uint16_t;

/*
 * Types that differ between LLP64 and LP64 architectures - in LLP64,
 * pointers are 64 bits, but 'long' is still 32 bits. Win64 appears
 * to be the only LLP64 architecture in current use.
 */
#ifdef KHRONOS_USE_INTPTR_T
typedef intptr_t               khronos_intptr_t;
typedef uintptr_t              khronos_uintptr_t;
#elif defined(_WIN64)
typedef signed   long long int khronos_intptr_t;
typedef unsigned long long int khronos_uintptr_t;
#else
typedef signed   long  int     khronos_intptr_t;
typedef unsigned long  int     khronos_uintptr_t;
#endif

#if defined(_WIN64)
typedef signed   long long int khronos_ssize_t;
typedef unsigned long long int khronos_usize_t;
#else
typedef signed   long  int     khronos_ssize_t;
typedef unsigned long  int     khronos_usize_t;
#endif

#if KHRONOS_SUPPORT_FLOAT
/*
 * Float type
 */
typedef          float         khronos_float_t;
#endif

#if KHRONOS_SUPPORT_INT64
/* Time types
 *
 * These types can be used to represent a time interval in nanoseconds or
 * an absolute Unadjusted System Time.  Unadjusted System Time is the number
 * of nanoseconds since some arbitrary system event (e.g. since the last
 * time the system booted).  The Unadjusted System Time is an unsigned
 * 64 bit value that wraps back to 0 every 584 years.  Time intervals
 * may be either signed or unsigned.
 */
typedef khronos_uint64_t       khronos_utime_nanoseconds_t;
typedef khronos_int64_t        khronos_stime_nanoseconds_t;
#endif

/*
 * Dummy value used to pad enum types to 32 bits.
 */
#ifndef KHRONOS_MAX_ENUM
#define KHRONOS_MAX_ENUM 0x7FFFFFFF
#endif

/*
 * Enumerated boolean type
 *
 * Values other than zero should be considered to be true.  Therefore
 * comparisons should not be made against KHRONOS_TRUE.
 */
typedef enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE  = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM
} khronos_boolean_enum_t;

#endif /* __khrplatform_h_ */
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef khronos_int8_t GLbyte;
typedef khronos_uint8_t GLubyte;
typedef khronos_int16_t GLshort;
typedef khronos_uint16_t GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef khronos_int32_t GLclampx;
typedef int GLsizei;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef khronos_uint16_t GLhalf;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_int32_t GLfixed;
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptr;
#else
typedef khronos_intptr_t GLintptr;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptrARB;
#else
typedef khronos_intptr_t GLintptrARB;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptr;
#else
typedef khronos_ssize_t GLsizeiptr;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptrARB;
#else
typedef khronos_ssize_t GLsizeiptrARB;
#endif
typedef khronos_int64_t GLint64;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64;
typedef khronos_uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (GLAD_API_PTR *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (GLAD_API_PTR *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (GLAD_API_PTR *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (GLAD_API_PTR *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void (GLAD_API_PTR *GLVULKANPROCNV)(void);


#define GL_VERSION_1_0 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_1_0;
#define GL_VERSION_1_1 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_1_1;
#define GL_VERSION_1_2 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_1_2;
#define GL_VERSION_1_3 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_1_3;
#define GL_VERSION_1_4 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_1_4;
#define GL_VERSION_1_5 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_1_5;
#define GL_VERSION_2_0 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_2_0;
#define GL_VERSION_2_1 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_2_1;
#define GL_VERSION_3_0 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_3_0;
#define GL_VERSION_3_1 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_3_1;
#define GL_VERSION_3_2 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_3_2;
#define GL_VERSION_3_3 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_3_3;
#define GL_VERSION_4_0 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_4_0;
#define GL_VERSION_4_1 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_4_1;
#define GL_ES_VERSION_2_0 1
GLAD_API_CALL int SF_GLAD_GL_ES_VERSION_2_0;
#define GL_AMD_draw_buffers_blend 1
GLAD_API_CALL int SF_GLAD_GL_AMD_draw_buffers_blend;
#define GL_APPLE_flush_buffer_range 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_flush_buffer_range;
#define GL_APPLE_vertex_array_object 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_vertex_array_object;
#define GL_ARB_ES2_compatibility 1
GLAD_API_CALL int SF_GLAD_GL_ARB_ES2_compatibility;
#define GL_ARB_blend_func_extended 1
GLAD_API_CALL int SF_GLAD_GL_ARB_blend_func_extended;
#define GL_ARB_color_buffer_float 1
GLAD_API_CALL int SF_GLAD_GL_ARB_color_buffer_float;
#define GL_ARB_copy_buffer 1
GLAD_API_CALL int SF_GLAD_GL_ARB_copy_buffer;
#define GL_ARB_draw_buffers 1
GLAD_API_CALL int SF_GLAD_GL_ARB_draw_buffers;
#define GL_ARB_draw_buffers_blend 1
GLAD_API_CALL int SF_GLAD_GL_ARB_draw_buffers_blend;
#define GL_ARB_draw_elements_base_vertex 1
GLAD_API_CALL int SF_GLAD_GL_ARB_draw_elements_base_vertex;
#define GL_ARB_draw_indirect 1
GLAD_API_CALL int SF_GLAD_GL_ARB_draw_indirect;
#define GL_ARB_draw_instanced 1
GLAD_API_CALL int SF_GLAD_GL_ARB_draw_instanced;
#define GL_ARB_framebuffer_object 1
GLAD_API_CALL int SF_GLAD_GL_ARB_framebuffer_object;
#define GL_ARB_geometry_shader4 1
GLAD_API_CALL int SF_GLAD_GL_ARB_geometry_shader4;
#define GL_ARB_get_program_binary 1
GLAD_API_CALL int SF_GLAD_GL_ARB_get_program_binary;
#define GL_ARB_gpu_shader_fp64 1
GLAD_API_CALL int SF_GLAD_GL_ARB_gpu_shader_fp64;
#define GL_ARB_imaging 1
GLAD_API_CALL int SF_GLAD_GL_ARB_imaging;
#define GL_ARB_instanced_arrays 1
GLAD_API_CALL int SF_GLAD_GL_ARB_instanced_arrays;
#define GL_ARB_map_buffer_range 1
GLAD_API_CALL int SF_GLAD_GL_ARB_map_buffer_range;
#define GL_ARB_multisample 1
GLAD_API_CALL int SF_GLAD_GL_ARB_multisample;
#define GL_ARB_multitexture 1
GLAD_API_CALL int SF_GLAD_GL_ARB_multitexture;
#define GL_ARB_occlusion_query 1
GLAD_API_CALL int SF_GLAD_GL_ARB_occlusion_query;
#define GL_ARB_point_parameters 1
GLAD_API_CALL int SF_GLAD_GL_ARB_point_parameters;
#define GL_ARB_provoking_vertex 1
GLAD_API_CALL int SF_GLAD_GL_ARB_provoking_vertex;
#define GL_ARB_sample_shading 1
GLAD_API_CALL int SF_GLAD_GL_ARB_sample_shading;
#define GL_ARB_sampler_objects 1
GLAD_API_CALL int SF_GLAD_GL_ARB_sampler_objects;
#define GL_ARB_separate_shader_objects 1
GLAD_API_CALL int SF_GLAD_GL_ARB_separate_shader_objects;
#define GL_ARB_shader_objects 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_objects;
#define GL_ARB_shader_subroutine 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_subroutine;
#define GL_ARB_sync 1
GLAD_API_CALL int SF_GLAD_GL_ARB_sync;
#define GL_ARB_tessellation_shader 1
GLAD_API_CALL int SF_GLAD_GL_ARB_tessellation_shader;
#define GL_ARB_texture_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_buffer_object;
#define GL_ARB_texture_compression 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_compression;
#define GL_ARB_texture_multisample 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_multisample;
#define GL_ARB_timer_query 1
GLAD_API_CALL int SF_GLAD_GL_ARB_timer_query;
#define GL_ARB_transform_feedback2 1
GLAD_API_CALL int SF_GLAD_GL_ARB_transform_feedback2;
#define GL_ARB_transform_feedback3 1
GLAD_API_CALL int SF_GLAD_GL_ARB_transform_feedback3;
#define GL_ARB_uniform_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_ARB_uniform_buffer_object;
#define GL_ARB_vertex_array_object 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_array_object;
#define GL_ARB_vertex_attrib_64bit 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_attrib_64bit;
#define GL_ARB_vertex_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_buffer_object;
#define GL_ARB_vertex_program 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_program;
#define GL_ARB_vertex_shader 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_shader;
#define GL_ARB_vertex_type_2_10_10_10_rev 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_type_2_10_10_10_rev;
#define GL_ARB_viewport_array 1
GLAD_API_CALL int SF_GLAD_GL_ARB_viewport_array;
#define GL_ATI_draw_buffers 1
GLAD_API_CALL int SF_GLAD_GL_ATI_draw_buffers;
#define GL_ATI_separate_stencil 1
GLAD_API_CALL int SF_GLAD_GL_ATI_separate_stencil;
#define GL_EXT_blend_color 1
GLAD_API_CALL int SF_GLAD_GL_EXT_blend_color;
#define GL_EXT_blend_equation_separate 1
GLAD_API_CALL int SF_GLAD_GL_EXT_blend_equation_separate;
#define GL_EXT_blend_func_separate 1
GLAD_API_CALL int SF_GLAD_GL_EXT_blend_func_separate;
#define GL_EXT_blend_minmax 1
GLAD_API_CALL int SF_GLAD_GL_EXT_blend_minmax;
#define GL_EXT_copy_texture 1
GLAD_API_CALL int SF_GLAD_GL_EXT_copy_texture;
#define GL_EXT_direct_state_access 1
GLAD_API_CALL int SF_GLAD_GL_EXT_direct_state_access;
#define GL_EXT_draw_buffers2 1
GLAD_API_CALL int SF_GLAD_GL_EXT_draw_buffers2;
#define GL_EXT_draw_instanced 1
GLAD_API_CALL int SF_GLAD_GL_EXT_draw_instanced;
#define GL_EXT_draw_range_elements 1
GLAD_API_CALL int SF_GLAD_GL_EXT_draw_range_elements;
#define GL_EXT_framebuffer_blit 1
GLAD_API_CALL int SF_GLAD_GL_EXT_framebuffer_blit;
#define GL_EXT_framebuffer_multisample 1
GLAD_API_CALL int SF_GLAD_GL_EXT_framebuffer_multisample;
#define GL_EXT_framebuffer_object 1
GLAD_API_CALL int SF_GLAD_GL_EXT_framebuffer_object;
#define GL_EXT_geometry_shader4 1
GLAD_API_CALL int SF_GLAD_GL_EXT_geometry_shader4;
#define GL_EXT_gpu_shader4 1
GLAD_API_CALL int SF_GLAD_GL_EXT_gpu_shader4;
#define GL_EXT_multi_draw_arrays 1
GLAD_API_CALL int SF_GLAD_GL_EXT_multi_draw_arrays;
#define GL_EXT_point_parameters 1
GLAD_API_CALL int SF_GLAD_GL_EXT_point_parameters;
#define GL_EXT_provoking_vertex 1
GLAD_API_CALL int SF_GLAD_GL_EXT_provoking_vertex;
#define GL_EXT_subtexture 1
GLAD_API_CALL int SF_GLAD_GL_EXT_subtexture;
#define GL_EXT_texture3D 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture3D;
#define GL_EXT_texture_array 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_array;
#define GL_EXT_texture_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_buffer_object;
#define GL_EXT_texture_integer 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_integer;
#define GL_EXT_texture_object 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_object;
#define GL_EXT_timer_query 1
GLAD_API_CALL int SF_GLAD_GL_EXT_timer_query;
#define GL_EXT_transform_feedback 1
GLAD_API_CALL int SF_GLAD_GL_EXT_transform_feedback;
#define GL_EXT_vertex_array 1
GLAD_API_CALL int SF_GLAD_GL_EXT_vertex_array;
#define GL_EXT_vertex_attrib_64bit 1
GLAD_API_CALL int SF_GLAD_GL_EXT_vertex_attrib_64bit;
#define GL_INGR_blend_func_separate 1
GLAD_API_CALL int SF_GLAD_GL_INGR_blend_func_separate;
#define GL_NVX_conditional_render 1
GLAD_API_CALL int SF_GLAD_GL_NVX_conditional_render;
#define GL_NV_conditional_render 1
GLAD_API_CALL int SF_GLAD_GL_NV_conditional_render;
#define GL_NV_explicit_multisample 1
GLAD_API_CALL int SF_GLAD_GL_NV_explicit_multisample;
#define GL_NV_geometry_program4 1
GLAD_API_CALL int SF_GLAD_GL_NV_geometry_program4;
#define GL_NV_point_sprite 1
GLAD_API_CALL int SF_GLAD_GL_NV_point_sprite;
#define GL_NV_transform_feedback 1
GLAD_API_CALL int SF_GLAD_GL_NV_transform_feedback;
#define GL_NV_transform_feedback2 1
GLAD_API_CALL int SF_GLAD_GL_NV_transform_feedback2;
#define GL_NV_vertex_program 1
GLAD_API_CALL int SF_GLAD_GL_NV_vertex_program;
#define GL_NV_vertex_program4 1
GLAD_API_CALL int SF_GLAD_GL_NV_vertex_program4;
#define GL_OES_single_precision 1
GLAD_API_CALL int SF_GLAD_GL_OES_single_precision;
#define GL_SGIS_point_parameters 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_point_parameters;


typedef void (GLAD_API_PTR *PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
typedef void (GLAD_API_PTR *PFNGLACTIVETEXTUREPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLACTIVETEXTUREARBPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLACTIVEVARYINGNVPROC)(GLuint program, const GLchar * name);
typedef GLboolean (GLAD_API_PTR *PFNGLAREPROGRAMSRESIDENTNVPROC)(GLsizei n, const GLuint * programs, GLboolean * residences);
typedef GLboolean (GLAD_API_PTR *PFNGLARETEXTURESRESIDENTEXTPROC)(GLsizei n, const GLuint * textures, GLboolean * residences);
typedef void (GLAD_API_PTR *PFNGLARRAYELEMENTEXTPROC)(GLint i);
typedef void (GLAD_API_PTR *PFNGLATTACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB obj);
typedef void (GLAD_API_PTR *PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (GLAD_API_PTR *PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBEGINCONDITIONALRENDERNVPROC)(GLuint id, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBEGINCONDITIONALRENDERNVXPROC)(GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYARBPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
typedef void (GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)(GLenum primitiveMode);
typedef void (GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKNVPROC)(GLenum primitiveMode);
typedef void (GLAD_API_PTR *PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDATTRIBLOCATIONARBPROC)(GLhandleARB programObj, GLuint index, const GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERARBPROC)(GLenum target, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERBASEEXTPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERBASENVPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFEROFFSETEXTPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFEROFFSETNVPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERRANGEEXTPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERRANGENVPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONEXTPROC)(GLuint program, GLuint color, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
typedef void (GLAD_API_PTR *PFNGLBINDFRAMEBUFFEREXTPROC)(GLenum target, GLuint framebuffer);
typedef void (GLAD_API_PTR *PFNGLBINDMULTITEXTUREEXTPROC)(GLenum texunit, GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMARBPROC)(GLenum target, GLuint program);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMNVPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (GLAD_API_PTR *PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLBINDRENDERBUFFEREXTPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREEXTPROC)(GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBINDTRANSFORMFEEDBACKNVPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXARRAYPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXARRAYAPPLEPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLBLENDCOLOREXTPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONINDEXEDAMDPROC)(GLuint buf, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEEXTPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEIARBPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONIARBPROC)(GLuint buf, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCINDEXEDAMDPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEEXTPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEINGRPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEIARBPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCIARBPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFEREXTPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLBUFFERDATAARBPROC)(GLenum target, GLsizeiptrARB size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLBUFFERPARAMETERIAPPLEPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (GLAD_API_PTR *PFNGLBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)(GLenum target);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC)(GLuint framebuffer, GLenum target);
typedef void (GLAD_API_PTR *PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
typedef void (GLAD_API_PTR *PFNGLCLAMPCOLORARBPROC)(GLenum target, GLenum clamp);
typedef void (GLAD_API_PTR *PFNGLCLEARPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORIIEXTPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORIUIEXTPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHPROC)(GLdouble depth);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHFPROC)(GLfloat d);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHFOESPROC)(GLclampf depth);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDBUFFERDATAEXTPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARSTENCILPROC)(GLint s);
typedef void (GLAD_API_PTR *PFNGLCLIENTACTIVETEXTUREARBPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
typedef GLenum (GLAD_API_PTR *PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEFOESPROC)(GLenum plane, const GLfloat * equation);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKINDEXEDEXTPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (GLAD_API_PTR *PFNGLCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLCOMPILESHADERPROC)(GLuint shader);
typedef void (GLAD_API_PTR *PFNGLCOMPILESHADERARBPROC)(GLhandleARB shaderObj);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE1DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef GLuint (GLAD_API_PTR *PFNGLCREATEPROGRAMPROC)(void);
typedef GLhandleARB (GLAD_API_PTR *PFNGLCREATEPROGRAMOBJECTARBPROC)(void);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROC)(GLenum type);
typedef GLhandleARB (GLAD_API_PTR *PFNGLCREATESHADEROBJECTARBPROC)(GLenum shaderType);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const* strings);
typedef void (GLAD_API_PTR *PFNGLCULLFACEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLDELETEBUFFERSARBPROC)(GLsizei n, const GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSEXTPROC)(GLsizei n, const GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLDELETEOBJECTARBPROC)(GLhandleARB obj);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint * pipelines);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMSARBPROC)(GLsizei n, const GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMSNVPROC)(GLsizei n, const GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETEQUERIESARBPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLDELETERENDERBUFFERSEXTPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint * samplers);
typedef void (GLAD_API_PTR *PFNGLDELETESHADERPROC)(GLuint shader);
typedef void (GLAD_API_PTR *PFNGLDELETESYNCPROC)(GLsync sync);
typedef void (GLAD_API_PTR *PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLDELETETEXTURESEXTPROC)(GLsizei n, const GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETETRANSFORMFEEDBACKSNVPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLDELETEVERTEXARRAYSAPPLEPROC)(GLsizei n, const GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLDEPTHFUNCPROC)(GLenum func);
typedef void (GLAD_API_PTR *PFNGLDEPTHMASKPROC)(GLboolean flag);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEARRAYDVNVPROC)(GLuint first, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEINDEXEDDNVPROC)(GLuint index, GLdouble n, GLdouble f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEFOESPROC)(GLclampf n, GLclampf f);
typedef void (GLAD_API_PTR *PFNGLDETACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB attachedObj);
typedef void (GLAD_API_PTR *PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (GLAD_API_PTR *PFNGLDISABLEPROC)(GLenum cap);
typedef void (GLAD_API_PTR *PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLECLIENTSTATEIEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEINDEXEDEXTPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC)(GLuint vaobj, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXARRAYEXTPROC)(GLuint vaobj, GLenum array);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEIPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSEXTPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void * indirect);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDARBPROC)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDEXTPROC)(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERPROC)(GLenum buf);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSARBPROC)(GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSATIPROC)(GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void * indirect);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDARBPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDEXTPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSEXTPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKNVPROC)(GLenum mode, GLuint id);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPOINTEREXTPROC)(GLsizei stride, GLsizei count, const GLboolean * pointer);
typedef void (GLAD_API_PTR *PFNGLENABLEPROC)(GLenum cap);
typedef void (GLAD_API_PTR *PFNGLENABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLECLIENTSTATEIEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEINDEXEDEXTPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXARRAYATTRIBEXTPROC)(GLuint vaobj, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXARRAYEXTPROC)(GLuint vaobj, GLenum array);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEIPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENDCONDITIONALRENDERPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDCONDITIONALRENDERNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDCONDITIONALRENDERNVXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDQUERYPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLENDQUERYARBPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKEXTPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLEXECUTEPROGRAMNVPROC)(GLenum target, GLuint id, const GLfloat * params);
typedef GLsync (GLAD_API_PTR *PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLFINISHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFLUSHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)(GLenum target, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC)(GLuint framebuffer, GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERREADBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRONTFACEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLFRUSTUMFOESPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLGENBUFFERSPROC)(GLsizei n, GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLGENBUFFERSARBPROC)(GLsizei n, GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLGENFRAMEBUFFERSEXTPROC)(GLsizei n, GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint * pipelines);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMSARBPROC)(GLsizei n, GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMSNVPROC)(GLsizei n, GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLGENQUERIESPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENQUERIESARBPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLGENRENDERBUFFERSEXTPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint * samplers);
typedef void (GLAD_API_PTR *PFNGLGENTEXTURESPROC)(GLsizei n, GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLGENTEXTURESEXTPROC)(GLsizei n, GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENTRANSFORMFEEDBACKSNVPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLGENVERTEXARRAYSAPPLEPROC)(GLsizei n, GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLGENERATEMIPMAPPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLGENERATEMIPMAPEXTPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLGENERATEMULTITEXMIPMAPEXTPROC)(GLenum texunit, GLenum target);
typedef void (GLAD_API_PTR *PFNGLGENERATETEXTUREMIPMAPEXTPROC)(GLuint texture, GLenum target);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATTRIBARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEVARYINGNVPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETATTACHEDOBJECTSARBPROC)(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj);
typedef void (GLAD_API_PTR *PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
typedef GLint (GLAD_API_PTR *PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETATTRIBLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANINDEXEDVEXTPROC)(GLenum target, GLuint index, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPOINTERVARBPROC)(GLenum target, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETCLIPPLANEFOESPROC)(GLenum plane, GLfloat * equation);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint lod, void * img);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void * img);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint level, void * img);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint lod, void * img);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEINDEXEDVEXTPROC)(GLenum target, GLuint index, GLdouble * data);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble * data);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEI_VEXTPROC)(GLenum pname, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble * data);
typedef GLenum (GLAD_API_PTR *PFNGLGETERRORPROC)(void);
typedef void (GLAD_API_PTR *PFNGLGETFLOATINDEXEDVEXTPROC)(GLenum target, GLuint index, GLfloat * data);
typedef void (GLAD_API_PTR *PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat * data);
typedef void (GLAD_API_PTR *PFNGLGETFLOATI_VEXTPROC)(GLenum pname, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETFLOATVPROC)(GLenum pname, GLfloat * data);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATALOCATIONEXTPROC)(GLuint program, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum pname, GLint * params);
typedef GLhandleARB (GLAD_API_PTR *PFNGLGETHANDLEARBPROC)(GLenum pname);
typedef void (GLAD_API_PTR *PFNGLGETINFOLOGARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERINDEXEDVEXTPROC)(GLenum target, GLuint index, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERVPROC)(GLenum pname, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat * val);
typedef void (GLAD_API_PTR *PFNGLGETMULTISAMPLEFVNVPROC)(GLenum pname, GLuint index, GLfloat * val);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC)(GLuint buffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPOINTERVEXTPROC)(GLuint buffer, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum pname, void * string);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMIVEXTPROC)(GLuint program, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC)(GLuint renderbuffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPARAMETERFVARBPROC)(GLhandleARB obj, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPARAMETERIVARBPROC)(GLhandleARB obj, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERINDEXEDVEXTPROC)(GLenum target, GLuint index, void ** data);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERI_VEXTPROC)(GLenum pname, GLuint index, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERVEXTPROC)(GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMENVPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMENVPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPARAMETERDVNVPROC)(GLenum target, GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPARAMETERFVNVPROC)(GLenum target, GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint * values);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSTRINGARBPROC)(GLenum target, GLenum pname, void * string);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSTRINGNVPROC)(GLuint id, GLenum pname, GLubyte * program);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVNVPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTI64VEXTPROC)(GLuint id, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTIVARBPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUI64VEXTPROC)(GLuint id, GLenum pname, GLuint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUIVARBPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
typedef void (GLAD_API_PTR *PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
typedef void (GLAD_API_PTR *PFNGLGETSHADERSOURCEARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source);
typedef void (GLAD_API_PTR *PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint * params);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGPROC)(GLenum name);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
typedef GLuint (GLAD_API_PTR *PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
typedef void (GLAD_API_PTR *PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIIVEXTPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIUIVEXTPROC)(GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTRACKMATRIXIVNVPROC)(GLenum target, GLuint address, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)(GLuint program, GLuint index, GLint * location);
typedef GLuint (GLAD_API_PTR *PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar * uniformBlockName);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
typedef GLint (GLAD_API_PTR *PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETUNIFORMLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMFVARBPROC)(GLhandleARB programObj, GLint location, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMIVARBPROC)(GLhandleARB programObj, GLint location, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMUIVEXTPROC)(GLuint program, GLint location, GLuint * params);
typedef GLint (GLAD_API_PTR *PFNGLGETVARYINGLOCATIONNVPROC)(GLuint program, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYINTEGERVEXTPROC)(GLuint vaobj, GLenum pname, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC)(GLuint vaobj, GLuint index, GLenum pname, void ** param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYPOINTERVEXTPROC)(GLuint vaobj, GLenum pname, void ** param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIIVEXTPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIUIVEXTPROC)(GLuint index, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBLDVEXTPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVARBPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVNVPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVARBPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVNVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVARBPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVNVPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVARBPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVNVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLHINTPROC)(GLenum target, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLINDEXPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef GLboolean (GLAD_API_PTR *PFNGLISBUFFERPROC)(GLuint buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISBUFFERARBPROC)(GLuint buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDPROC)(GLenum cap);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDINDEXEDEXTPROC)(GLenum target, GLuint index);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
typedef GLboolean (GLAD_API_PTR *PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISFRAMEBUFFEREXTPROC)(GLuint framebuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMPROC)(GLuint program);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMARBPROC)(GLuint program);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMNVPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef GLboolean (GLAD_API_PTR *PFNGLISQUERYPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISQUERYARBPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISRENDERBUFFEREXTPROC)(GLuint renderbuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISSAMPLERPROC)(GLuint sampler);
typedef GLboolean (GLAD_API_PTR *PFNGLISSHADERPROC)(GLuint shader);
typedef GLboolean (GLAD_API_PTR *PFNGLISSYNCPROC)(GLsync sync);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREPROC)(GLuint texture);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREEXTPROC)(GLuint texture);
typedef GLboolean (GLAD_API_PTR *PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISTRANSFORMFEEDBACKNVPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISVERTEXARRAYPROC)(GLuint array);
typedef GLboolean (GLAD_API_PTR *PFNGLISVERTEXARRAYAPPLEPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLLINEWIDTHPROC)(GLfloat width);
typedef void (GLAD_API_PTR *PFNGLLINKPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLLINKPROGRAMARBPROC)(GLhandleARB programObj);
typedef void (GLAD_API_PTR *PFNGLLOADPROGRAMNVPROC)(GLenum target, GLuint id, GLsizei len, const GLubyte * program);
typedef void (GLAD_API_PTR *PFNGLLOGICOPPROC)(GLenum opcode);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERARBPROC)(GLenum target, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void * (GLAD_API_PTR *PFNGLMAPNAMEDBUFFEREXTPROC)(GLuint buffer, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (GLAD_API_PTR *PFNGLMATRIXFRUSTUMEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADIDENTITYEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXORTHOEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLMATRIXPOPEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMATRIXPUSHEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMATRIXROTATEDEXTPROC)(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLMATRIXROTATEFEXTPROC)(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLMATRIXSCALEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLMATRIXSCALEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLMATRIXTRANSLATEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLMATRIXTRANSLATEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
typedef void (GLAD_API_PTR *PFNGLMINSAMPLESHADINGARBPROC)(GLfloat value);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSEXTPROC)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSEXTPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLMULTITEXBUFFEREXTPROC)(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DARBPROC)(GLenum target, GLdouble s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FARBPROC)(GLenum target, GLfloat s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IARBPROC)(GLenum target, GLint s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SARBPROC)(GLenum target, GLshort s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DARBPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FARBPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IARBPROC)(GLenum target, GLint s, GLint t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SARBPROC)(GLenum target, GLshort s, GLshort t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IARBPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IARBPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDPOINTEREXTPROC)(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENDEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENFEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENIEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXRENDERBUFFEREXTPROC)(GLenum texunit, GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERDATAEXTPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSTORAGEEXTPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (GLAD_API_PTR *PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC)(GLuint framebuffer, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC)(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum format, GLsizei len, const void * string);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC)(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNORMALPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLORTHOFOESPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPAUSETRANSFORMFEEDBACKNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFARBPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFEXTPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFSGISPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVARBPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVEXTPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVSGISPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERINVPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIVNVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPOINTSIZEPROC)(GLfloat size);
typedef void (GLAD_API_PTR *PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
typedef void (GLAD_API_PTR *PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLPRIORITIZETEXTURESEXTPROC)(GLsizei n, const GLuint * textures, const GLclampf * priorities);
typedef void (GLAD_API_PTR *PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4DNVPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4DVNVPROC)(GLenum target, GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4FNVPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4FVNVPROC)(GLenum target, GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIARBPROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIEXTPROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERS4DVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERS4FVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMSTRINGARBPROC)(GLenum target, GLenum format, GLsizei len, const void * string);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DEXTPROC)(GLuint program, GLint location, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FEXTPROC)(GLuint program, GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IEXTPROC)(GLuint program, GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIEXTPROC)(GLuint program, GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMVERTEXLIMITNVPROC)(GLenum target, GLint limit);
typedef void (GLAD_API_PTR *PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPROVOKINGVERTEXEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
typedef void (GLAD_API_PTR *PFNGLREADBUFFERPROC)(GLenum src);
typedef void (GLAD_API_PTR *PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLRELEASESHADERCOMPILERPROC)(void);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLREQUESTRESIDENTPROGRAMSNVPROC)(GLsizei n, const GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLRESUMETRANSFORMFEEDBACKNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
typedef void (GLAD_API_PTR *PFNGLSAMPLECOVERAGEARBPROC)(GLfloat value, GLboolean invert);
typedef void (GLAD_API_PTR *PFNGLSAMPLEMASKINDEXEDNVPROC)(GLuint index, GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (GLAD_API_PTR *PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint * shaders, GLenum binaryFormat, const void * binary, GLsizei length);
typedef void (GLAD_API_PTR *PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
typedef void (GLAD_API_PTR *PFNGLSHADERSOURCEARBPROC)(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCSEPARATEATIPROC)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKPROC)(GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPSEPARATEATIPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERARBPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFEREXTPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIIVEXTPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIUIVEXTPROC)(GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXRENDERBUFFERNVPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBUFFEREXTPROC)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBUFFERRANGEEXTPROC)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPAGECOMMITMENTEXTPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERFEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTURERENDERBUFFEREXTPROC)(GLuint texture, GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE1DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE2DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE3DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTRACKMATRIXNVPROC)(GLenum target, GLuint address, GLenum matrix, GLenum transform);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)(GLsizei count, const GLint * attribs, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC)(GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)(GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FARBPROC)(GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IARBPROC)(GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIEXTPROC)(GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FARBPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IARBPROC)(GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIEXTPROC)(GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIEXTPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIEXTPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint * indices);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPBUFFERPROC)(GLenum target);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPBUFFERARBPROC)(GLenum target);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPNAMEDBUFFEREXTPROC)(GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMOBJECTARBPROC)(GLhandleARB programObj);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMARBPROC)(GLhandleARB programObj);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYCOLOROFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYINDEXOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYNORMALOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC)(GLuint vaobj, GLuint index, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DARBPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DNVPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FARBPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FNVPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SARBPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SNVPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DARBPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DNVPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FARBPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FNVPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SARBPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SNVPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NBVARBPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NIVARBPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NSVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBARBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBVARBPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUIVARBPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUSVARBPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4BVARBPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4IVARBPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBNVPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVARBPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVNVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UIVARBPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4USVARBPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBDIVISORARBPROC)(GLuint index, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IEXTPROC)(GLuint index, GLint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIEXTPROC)(GLuint index, GLuint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IEXTPROC)(GLuint index, GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIEXTPROC)(GLuint index, GLuint x, GLuint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IEXTPROC)(GLuint index, GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIEXTPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4BVEXTPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IEXTPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4SVEXTPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UBVEXTPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIEXTPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4USVEXTPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIPOINTEREXTPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DEXTPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DVEXTPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DEXTPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DVEXTPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DEXTPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DVEXTPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DEXTPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DVEXTPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBLPOINTEREXTPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERARBPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERNVPROC)(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4UBVNVPROC)(GLuint index, GLsizei count, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);

GLAD_API_CALL PFNGLACTIVESHADERPROGRAMPROC sf_glad_glActiveShaderProgram;
#define glActiveShaderProgram sf_glad_glActiveShaderProgram
GLAD_API_CALL PFNGLACTIVETEXTUREPROC sf_glad_glActiveTexture;
#define glActiveTexture sf_glad_glActiveTexture
GLAD_API_CALL PFNGLACTIVETEXTUREARBPROC sf_glad_glActiveTextureARB;
#define glActiveTextureARB sf_glad_glActiveTextureARB
GLAD_API_CALL PFNGLACTIVEVARYINGNVPROC sf_glad_glActiveVaryingNV;
#define glActiveVaryingNV sf_glad_glActiveVaryingNV
GLAD_API_CALL PFNGLAREPROGRAMSRESIDENTNVPROC sf_glad_glAreProgramsResidentNV;
#define glAreProgramsResidentNV sf_glad_glAreProgramsResidentNV
GLAD_API_CALL PFNGLARETEXTURESRESIDENTEXTPROC sf_glad_glAreTexturesResidentEXT;
#define glAreTexturesResidentEXT sf_glad_glAreTexturesResidentEXT
GLAD_API_CALL PFNGLARRAYELEMENTEXTPROC sf_glad_glArrayElementEXT;
#define glArrayElementEXT sf_glad_glArrayElementEXT
GLAD_API_CALL PFNGLATTACHOBJECTARBPROC sf_glad_glAttachObjectARB;
#define glAttachObjectARB sf_glad_glAttachObjectARB
GLAD_API_CALL PFNGLATTACHSHADERPROC sf_glad_glAttachShader;
#define glAttachShader sf_glad_glAttachShader
GLAD_API_CALL PFNGLBEGINCONDITIONALRENDERPROC sf_glad_glBeginConditionalRender;
#define glBeginConditionalRender sf_glad_glBeginConditionalRender
GLAD_API_CALL PFNGLBEGINCONDITIONALRENDERNVPROC sf_glad_glBeginConditionalRenderNV;
#define glBeginConditionalRenderNV sf_glad_glBeginConditionalRenderNV
GLAD_API_CALL PFNGLBEGINCONDITIONALRENDERNVXPROC sf_glad_glBeginConditionalRenderNVX;
#define glBeginConditionalRenderNVX sf_glad_glBeginConditionalRenderNVX
GLAD_API_CALL PFNGLBEGINQUERYPROC sf_glad_glBeginQuery;
#define glBeginQuery sf_glad_glBeginQuery
GLAD_API_CALL PFNGLBEGINQUERYARBPROC sf_glad_glBeginQueryARB;
#define glBeginQueryARB sf_glad_glBeginQueryARB
GLAD_API_CALL PFNGLBEGINQUERYINDEXEDPROC sf_glad_glBeginQueryIndexed;
#define glBeginQueryIndexed sf_glad_glBeginQueryIndexed
GLAD_API_CALL PFNGLBEGINTRANSFORMFEEDBACKPROC sf_glad_glBeginTransformFeedback;
#define glBeginTransformFeedback sf_glad_glBeginTransformFeedback
GLAD_API_CALL PFNGLBEGINTRANSFORMFEEDBACKEXTPROC sf_glad_glBeginTransformFeedbackEXT;
#define glBeginTransformFeedbackEXT sf_glad_glBeginTransformFeedbackEXT
GLAD_API_CALL PFNGLBEGINTRANSFORMFEEDBACKNVPROC sf_glad_glBeginTransformFeedbackNV;
#define glBeginTransformFeedbackNV sf_glad_glBeginTransformFeedbackNV
GLAD_API_CALL PFNGLBINDATTRIBLOCATIONPROC sf_glad_glBindAttribLocation;
#define glBindAttribLocation sf_glad_glBindAttribLocation
GLAD_API_CALL PFNGLBINDATTRIBLOCATIONARBPROC sf_glad_glBindAttribLocationARB;
#define glBindAttribLocationARB sf_glad_glBindAttribLocationARB
GLAD_API_CALL PFNGLBINDBUFFERPROC sf_glad_glBindBuffer;
#define glBindBuffer sf_glad_glBindBuffer
GLAD_API_CALL PFNGLBINDBUFFERARBPROC sf_glad_glBindBufferARB;
#define glBindBufferARB sf_glad_glBindBufferARB
GLAD_API_CALL PFNGLBINDBUFFERBASEPROC sf_glad_glBindBufferBase;
#define glBindBufferBase sf_glad_glBindBufferBase
GLAD_API_CALL PFNGLBINDBUFFERBASEEXTPROC sf_glad_glBindBufferBaseEXT;
#define glBindBufferBaseEXT sf_glad_glBindBufferBaseEXT
GLAD_API_CALL PFNGLBINDBUFFERBASENVPROC sf_glad_glBindBufferBaseNV;
#define glBindBufferBaseNV sf_glad_glBindBufferBaseNV
GLAD_API_CALL PFNGLBINDBUFFEROFFSETEXTPROC sf_glad_glBindBufferOffsetEXT;
#define glBindBufferOffsetEXT sf_glad_glBindBufferOffsetEXT
GLAD_API_CALL PFNGLBINDBUFFEROFFSETNVPROC sf_glad_glBindBufferOffsetNV;
#define glBindBufferOffsetNV sf_glad_glBindBufferOffsetNV
GLAD_API_CALL PFNGLBINDBUFFERRANGEPROC sf_glad_glBindBufferRange;
#define glBindBufferRange sf_glad_glBindBufferRange
GLAD_API_CALL PFNGLBINDBUFFERRANGEEXTPROC sf_glad_glBindBufferRangeEXT;
#define glBindBufferRangeEXT sf_glad_glBindBufferRangeEXT
GLAD_API_CALL PFNGLBINDBUFFERRANGENVPROC sf_glad_glBindBufferRangeNV;
#define glBindBufferRangeNV sf_glad_glBindBufferRangeNV
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONPROC sf_glad_glBindFragDataLocation;
#define glBindFragDataLocation sf_glad_glBindFragDataLocation
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONEXTPROC sf_glad_glBindFragDataLocationEXT;
#define glBindFragDataLocationEXT sf_glad_glBindFragDataLocationEXT
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONINDEXEDPROC sf_glad_glBindFragDataLocationIndexed;
#define glBindFragDataLocationIndexed sf_glad_glBindFragDataLocationIndexed
GLAD_API_CALL PFNGLBINDFRAMEBUFFERPROC sf_glad_glBindFramebuffer;
#define glBindFramebuffer sf_glad_glBindFramebuffer
GLAD_API_CALL PFNGLBINDFRAMEBUFFEREXTPROC sf_glad_glBindFramebufferEXT;
#define glBindFramebufferEXT sf_glad_glBindFramebufferEXT
GLAD_API_CALL PFNGLBINDMULTITEXTUREEXTPROC sf_glad_glBindMultiTextureEXT;
#define glBindMultiTextureEXT sf_glad_glBindMultiTextureEXT
GLAD_API_CALL PFNGLBINDPROGRAMARBPROC sf_glad_glBindProgramARB;
#define glBindProgramARB sf_glad_glBindProgramARB
GLAD_API_CALL PFNGLBINDPROGRAMNVPROC sf_glad_glBindProgramNV;
#define glBindProgramNV sf_glad_glBindProgramNV
GLAD_API_CALL PFNGLBINDPROGRAMPIPELINEPROC sf_glad_glBindProgramPipeline;
#define glBindProgramPipeline sf_glad_glBindProgramPipeline
GLAD_API_CALL PFNGLBINDRENDERBUFFERPROC sf_glad_glBindRenderbuffer;
#define glBindRenderbuffer sf_glad_glBindRenderbuffer
GLAD_API_CALL PFNGLBINDRENDERBUFFEREXTPROC sf_glad_glBindRenderbufferEXT;
#define glBindRenderbufferEXT sf_glad_glBindRenderbufferEXT
GLAD_API_CALL PFNGLBINDSAMPLERPROC sf_glad_glBindSampler;
#define glBindSampler sf_glad_glBindSampler
GLAD_API_CALL PFNGLBINDTEXTUREPROC sf_glad_glBindTexture;
#define glBindTexture sf_glad_glBindTexture
GLAD_API_CALL PFNGLBINDTEXTUREEXTPROC sf_glad_glBindTextureEXT;
#define glBindTextureEXT sf_glad_glBindTextureEXT
GLAD_API_CALL PFNGLBINDTRANSFORMFEEDBACKPROC sf_glad_glBindTransformFeedback;
#define glBindTransformFeedback sf_glad_glBindTransformFeedback
GLAD_API_CALL PFNGLBINDTRANSFORMFEEDBACKNVPROC sf_glad_glBindTransformFeedbackNV;
#define glBindTransformFeedbackNV sf_glad_glBindTransformFeedbackNV
GLAD_API_CALL PFNGLBINDVERTEXARRAYPROC sf_glad_glBindVertexArray;
#define glBindVertexArray sf_glad_glBindVertexArray
GLAD_API_CALL PFNGLBINDVERTEXARRAYAPPLEPROC sf_glad_glBindVertexArrayAPPLE;
#define glBindVertexArrayAPPLE sf_glad_glBindVertexArrayAPPLE
GLAD_API_CALL PFNGLBLENDCOLORPROC sf_glad_glBlendColor;
#define glBlendColor sf_glad_glBlendColor
GLAD_API_CALL PFNGLBLENDCOLOREXTPROC sf_glad_glBlendColorEXT;
#define glBlendColorEXT sf_glad_glBlendColorEXT
GLAD_API_CALL PFNGLBLENDEQUATIONPROC sf_glad_glBlendEquation;
#define glBlendEquation sf_glad_glBlendEquation
GLAD_API_CALL PFNGLBLENDEQUATIONEXTPROC sf_glad_glBlendEquationEXT;
#define glBlendEquationEXT sf_glad_glBlendEquationEXT
GLAD_API_CALL PFNGLBLENDEQUATIONINDEXEDAMDPROC sf_glad_glBlendEquationIndexedAMD;
#define glBlendEquationIndexedAMD sf_glad_glBlendEquationIndexedAMD
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEPROC sf_glad_glBlendEquationSeparate;
#define glBlendEquationSeparate sf_glad_glBlendEquationSeparate
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEEXTPROC sf_glad_glBlendEquationSeparateEXT;
#define glBlendEquationSeparateEXT sf_glad_glBlendEquationSeparateEXT
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC sf_glad_glBlendEquationSeparateIndexedAMD;
#define glBlendEquationSeparateIndexedAMD sf_glad_glBlendEquationSeparateIndexedAMD
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEIPROC sf_glad_glBlendEquationSeparatei;
#define glBlendEquationSeparatei sf_glad_glBlendEquationSeparatei
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEIARBPROC sf_glad_glBlendEquationSeparateiARB;
#define glBlendEquationSeparateiARB sf_glad_glBlendEquationSeparateiARB
GLAD_API_CALL PFNGLBLENDEQUATIONIPROC sf_glad_glBlendEquationi;
#define glBlendEquationi sf_glad_glBlendEquationi
GLAD_API_CALL PFNGLBLENDEQUATIONIARBPROC sf_glad_glBlendEquationiARB;
#define glBlendEquationiARB sf_glad_glBlendEquationiARB
GLAD_API_CALL PFNGLBLENDFUNCPROC sf_glad_glBlendFunc;
#define glBlendFunc sf_glad_glBlendFunc
GLAD_API_CALL PFNGLBLENDFUNCINDEXEDAMDPROC sf_glad_glBlendFuncIndexedAMD;
#define glBlendFuncIndexedAMD sf_glad_glBlendFuncIndexedAMD
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEPROC sf_glad_glBlendFuncSeparate;
#define glBlendFuncSeparate sf_glad_glBlendFuncSeparate
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEEXTPROC sf_glad_glBlendFuncSeparateEXT;
#define glBlendFuncSeparateEXT sf_glad_glBlendFuncSeparateEXT
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEINGRPROC sf_glad_glBlendFuncSeparateINGR;
#define glBlendFuncSeparateINGR sf_glad_glBlendFuncSeparateINGR
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC sf_glad_glBlendFuncSeparateIndexedAMD;
#define glBlendFuncSeparateIndexedAMD sf_glad_glBlendFuncSeparateIndexedAMD
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEIPROC sf_glad_glBlendFuncSeparatei;
#define glBlendFuncSeparatei sf_glad_glBlendFuncSeparatei
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEIARBPROC sf_glad_glBlendFuncSeparateiARB;
#define glBlendFuncSeparateiARB sf_glad_glBlendFuncSeparateiARB
GLAD_API_CALL PFNGLBLENDFUNCIPROC sf_glad_glBlendFunci;
#define glBlendFunci sf_glad_glBlendFunci
GLAD_API_CALL PFNGLBLENDFUNCIARBPROC sf_glad_glBlendFunciARB;
#define glBlendFunciARB sf_glad_glBlendFunciARB
GLAD_API_CALL PFNGLBLITFRAMEBUFFERPROC sf_glad_glBlitFramebuffer;
#define glBlitFramebuffer sf_glad_glBlitFramebuffer
GLAD_API_CALL PFNGLBLITFRAMEBUFFEREXTPROC sf_glad_glBlitFramebufferEXT;
#define glBlitFramebufferEXT sf_glad_glBlitFramebufferEXT
GLAD_API_CALL PFNGLBUFFERDATAPROC sf_glad_glBufferData;
#define glBufferData sf_glad_glBufferData
GLAD_API_CALL PFNGLBUFFERDATAARBPROC sf_glad_glBufferDataARB;
#define glBufferDataARB sf_glad_glBufferDataARB
GLAD_API_CALL PFNGLBUFFERPARAMETERIAPPLEPROC sf_glad_glBufferParameteriAPPLE;
#define glBufferParameteriAPPLE sf_glad_glBufferParameteriAPPLE
GLAD_API_CALL PFNGLBUFFERSUBDATAPROC sf_glad_glBufferSubData;
#define glBufferSubData sf_glad_glBufferSubData
GLAD_API_CALL PFNGLBUFFERSUBDATAARBPROC sf_glad_glBufferSubDataARB;
#define glBufferSubDataARB sf_glad_glBufferSubDataARB
GLAD_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSPROC sf_glad_glCheckFramebufferStatus;
#define glCheckFramebufferStatus sf_glad_glCheckFramebufferStatus
GLAD_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC sf_glad_glCheckFramebufferStatusEXT;
#define glCheckFramebufferStatusEXT sf_glad_glCheckFramebufferStatusEXT
GLAD_API_CALL PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC sf_glad_glCheckNamedFramebufferStatusEXT;
#define glCheckNamedFramebufferStatusEXT sf_glad_glCheckNamedFramebufferStatusEXT
GLAD_API_CALL PFNGLCLAMPCOLORPROC sf_glad_glClampColor;
#define glClampColor sf_glad_glClampColor
GLAD_API_CALL PFNGLCLAMPCOLORARBPROC sf_glad_glClampColorARB;
#define glClampColorARB sf_glad_glClampColorARB
GLAD_API_CALL PFNGLCLEARPROC sf_glad_glClear;
#define glClear sf_glad_glClear
GLAD_API_CALL PFNGLCLEARBUFFERFIPROC sf_glad_glClearBufferfi;
#define glClearBufferfi sf_glad_glClearBufferfi
GLAD_API_CALL PFNGLCLEARBUFFERFVPROC sf_glad_glClearBufferfv;
#define glClearBufferfv sf_glad_glClearBufferfv
GLAD_API_CALL PFNGLCLEARBUFFERIVPROC sf_glad_glClearBufferiv;
#define glClearBufferiv sf_glad_glClearBufferiv
GLAD_API_CALL PFNGLCLEARBUFFERUIVPROC sf_glad_glClearBufferuiv;
#define glClearBufferuiv sf_glad_glClearBufferuiv
GLAD_API_CALL PFNGLCLEARCOLORPROC sf_glad_glClearColor;
#define glClearColor sf_glad_glClearColor
GLAD_API_CALL PFNGLCLEARCOLORIIEXTPROC sf_glad_glClearColorIiEXT;
#define glClearColorIiEXT sf_glad_glClearColorIiEXT
GLAD_API_CALL PFNGLCLEARCOLORIUIEXTPROC sf_glad_glClearColorIuiEXT;
#define glClearColorIuiEXT sf_glad_glClearColorIuiEXT
GLAD_API_CALL PFNGLCLEARDEPTHPROC sf_glad_glClearDepth;
#define glClearDepth sf_glad_glClearDepth
GLAD_API_CALL PFNGLCLEARDEPTHFPROC sf_glad_glClearDepthf;
#define glClearDepthf sf_glad_glClearDepthf
GLAD_API_CALL PFNGLCLEARDEPTHFOESPROC sf_glad_glClearDepthfOES;
#define glClearDepthfOES sf_glad_glClearDepthfOES
GLAD_API_CALL PFNGLCLEARNAMEDBUFFERDATAEXTPROC sf_glad_glClearNamedBufferDataEXT;
#define glClearNamedBufferDataEXT sf_glad_glClearNamedBufferDataEXT
GLAD_API_CALL PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC sf_glad_glClearNamedBufferSubDataEXT;
#define glClearNamedBufferSubDataEXT sf_glad_glClearNamedBufferSubDataEXT
GLAD_API_CALL PFNGLCLEARSTENCILPROC sf_glad_glClearStencil;
#define glClearStencil sf_glad_glClearStencil
GLAD_API_CALL PFNGLCLIENTACTIVETEXTUREARBPROC sf_glad_glClientActiveTextureARB;
#define glClientActiveTextureARB sf_glad_glClientActiveTextureARB
GLAD_API_CALL PFNGLCLIENTATTRIBDEFAULTEXTPROC sf_glad_glClientAttribDefaultEXT;
#define glClientAttribDefaultEXT sf_glad_glClientAttribDefaultEXT
GLAD_API_CALL PFNGLCLIENTWAITSYNCPROC sf_glad_glClientWaitSync;
#define glClientWaitSync sf_glad_glClientWaitSync
GLAD_API_CALL PFNGLCLIPPLANEFOESPROC sf_glad_glClipPlanefOES;
#define glClipPlanefOES sf_glad_glClipPlanefOES
GLAD_API_CALL PFNGLCOLORMASKPROC sf_glad_glColorMask;
#define glColorMask sf_glad_glColorMask
GLAD_API_CALL PFNGLCOLORMASKINDEXEDEXTPROC sf_glad_glColorMaskIndexedEXT;
#define glColorMaskIndexedEXT sf_glad_glColorMaskIndexedEXT
GLAD_API_CALL PFNGLCOLORMASKIPROC sf_glad_glColorMaski;
#define glColorMaski sf_glad_glColorMaski
GLAD_API_CALL PFNGLCOLORPOINTEREXTPROC sf_glad_glColorPointerEXT;
#define glColorPointerEXT sf_glad_glColorPointerEXT
GLAD_API_CALL PFNGLCOMPILESHADERPROC sf_glad_glCompileShader;
#define glCompileShader sf_glad_glCompileShader
GLAD_API_CALL PFNGLCOMPILESHADERARBPROC sf_glad_glCompileShaderARB;
#define glCompileShaderARB sf_glad_glCompileShaderARB
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC sf_glad_glCompressedMultiTexImage1DEXT;
#define glCompressedMultiTexImage1DEXT sf_glad_glCompressedMultiTexImage1DEXT
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC sf_glad_glCompressedMultiTexImage2DEXT;
#define glCompressedMultiTexImage2DEXT sf_glad_glCompressedMultiTexImage2DEXT
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC sf_glad_glCompressedMultiTexImage3DEXT;
#define glCompressedMultiTexImage3DEXT sf_glad_glCompressedMultiTexImage3DEXT
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC sf_glad_glCompressedMultiTexSubImage1DEXT;
#define glCompressedMultiTexSubImage1DEXT sf_glad_glCompressedMultiTexSubImage1DEXT
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC sf_glad_glCompressedMultiTexSubImage2DEXT;
#define glCompressedMultiTexSubImage2DEXT sf_glad_glCompressedMultiTexSubImage2DEXT
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC sf_glad_glCompressedMultiTexSubImage3DEXT;
#define glCompressedMultiTexSubImage3DEXT sf_glad_glCompressedMultiTexSubImage3DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE1DPROC sf_glad_glCompressedTexImage1D;
#define glCompressedTexImage1D sf_glad_glCompressedTexImage1D
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE1DARBPROC sf_glad_glCompressedTexImage1DARB;
#define glCompressedTexImage1DARB sf_glad_glCompressedTexImage1DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE2DPROC sf_glad_glCompressedTexImage2D;
#define glCompressedTexImage2D sf_glad_glCompressedTexImage2D
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE2DARBPROC sf_glad_glCompressedTexImage2DARB;
#define glCompressedTexImage2DARB sf_glad_glCompressedTexImage2DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE3DPROC sf_glad_glCompressedTexImage3D;
#define glCompressedTexImage3D sf_glad_glCompressedTexImage3D
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE3DARBPROC sf_glad_glCompressedTexImage3DARB;
#define glCompressedTexImage3DARB sf_glad_glCompressedTexImage3DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC sf_glad_glCompressedTexSubImage1D;
#define glCompressedTexSubImage1D sf_glad_glCompressedTexSubImage1D
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC sf_glad_glCompressedTexSubImage1DARB;
#define glCompressedTexSubImage1DARB sf_glad_glCompressedTexSubImage1DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC sf_glad_glCompressedTexSubImage2D;
#define glCompressedTexSubImage2D sf_glad_glCompressedTexSubImage2D
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC sf_glad_glCompressedTexSubImage2DARB;
#define glCompressedTexSubImage2DARB sf_glad_glCompressedTexSubImage2DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC sf_glad_glCompressedTexSubImage3D;
#define glCompressedTexSubImage3D sf_glad_glCompressedTexSubImage3D
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC sf_glad_glCompressedTexSubImage3DARB;
#define glCompressedTexSubImage3DARB sf_glad_glCompressedTexSubImage3DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC sf_glad_glCompressedTextureImage1DEXT;
#define glCompressedTextureImage1DEXT sf_glad_glCompressedTextureImage1DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC sf_glad_glCompressedTextureImage2DEXT;
#define glCompressedTextureImage2DEXT sf_glad_glCompressedTextureImage2DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC sf_glad_glCompressedTextureImage3DEXT;
#define glCompressedTextureImage3DEXT sf_glad_glCompressedTextureImage3DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC sf_glad_glCompressedTextureSubImage1DEXT;
#define glCompressedTextureSubImage1DEXT sf_glad_glCompressedTextureSubImage1DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC sf_glad_glCompressedTextureSubImage2DEXT;
#define glCompressedTextureSubImage2DEXT sf_glad_glCompressedTextureSubImage2DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC sf_glad_glCompressedTextureSubImage3DEXT;
#define glCompressedTextureSubImage3DEXT sf_glad_glCompressedTextureSubImage3DEXT
GLAD_API_CALL PFNGLCOPYBUFFERSUBDATAPROC sf_glad_glCopyBufferSubData;
#define glCopyBufferSubData sf_glad_glCopyBufferSubData
GLAD_API_CALL PFNGLCOPYMULTITEXIMAGE1DEXTPROC sf_glad_glCopyMultiTexImage1DEXT;
#define glCopyMultiTexImage1DEXT sf_glad_glCopyMultiTexImage1DEXT
GLAD_API_CALL PFNGLCOPYMULTITEXIMAGE2DEXTPROC sf_glad_glCopyMultiTexImage2DEXT;
#define glCopyMultiTexImage2DEXT sf_glad_glCopyMultiTexImage2DEXT
GLAD_API_CALL PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC sf_glad_glCopyMultiTexSubImage1DEXT;
#define glCopyMultiTexSubImage1DEXT sf_glad_glCopyMultiTexSubImage1DEXT
GLAD_API_CALL PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC sf_glad_glCopyMultiTexSubImage2DEXT;
#define glCopyMultiTexSubImage2DEXT sf_glad_glCopyMultiTexSubImage2DEXT
GLAD_API_CALL PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC sf_glad_glCopyMultiTexSubImage3DEXT;
#define glCopyMultiTexSubImage3DEXT sf_glad_glCopyMultiTexSubImage3DEXT
GLAD_API_CALL PFNGLCOPYTEXIMAGE1DPROC sf_glad_glCopyTexImage1D;
#define glCopyTexImage1D sf_glad_glCopyTexImage1D
GLAD_API_CALL PFNGLCOPYTEXIMAGE1DEXTPROC sf_glad_glCopyTexImage1DEXT;
#define glCopyTexImage1DEXT sf_glad_glCopyTexImage1DEXT
GLAD_API_CALL PFNGLCOPYTEXIMAGE2DPROC sf_glad_glCopyTexImage2D;
#define glCopyTexImage2D sf_glad_glCopyTexImage2D
GLAD_API_CALL PFNGLCOPYTEXIMAGE2DEXTPROC sf_glad_glCopyTexImage2DEXT;
#define glCopyTexImage2DEXT sf_glad_glCopyTexImage2DEXT
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE1DPROC sf_glad_glCopyTexSubImage1D;
#define glCopyTexSubImage1D sf_glad_glCopyTexSubImage1D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE1DEXTPROC sf_glad_glCopyTexSubImage1DEXT;
#define glCopyTexSubImage1DEXT sf_glad_glCopyTexSubImage1DEXT
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE2DPROC sf_glad_glCopyTexSubImage2D;
#define glCopyTexSubImage2D sf_glad_glCopyTexSubImage2D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE2DEXTPROC sf_glad_glCopyTexSubImage2DEXT;
#define glCopyTexSubImage2DEXT sf_glad_glCopyTexSubImage2DEXT
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE3DPROC sf_glad_glCopyTexSubImage3D;
#define glCopyTexSubImage3D sf_glad_glCopyTexSubImage3D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE3DEXTPROC sf_glad_glCopyTexSubImage3DEXT;
#define glCopyTexSubImage3DEXT sf_glad_glCopyTexSubImage3DEXT
GLAD_API_CALL PFNGLCOPYTEXTUREIMAGE1DEXTPROC sf_glad_glCopyTextureImage1DEXT;
#define glCopyTextureImage1DEXT sf_glad_glCopyTextureImage1DEXT
GLAD_API_CALL PFNGLCOPYTEXTUREIMAGE2DEXTPROC sf_glad_glCopyTextureImage2DEXT;
#define glCopyTextureImage2DEXT sf_glad_glCopyTextureImage2DEXT
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC sf_glad_glCopyTextureSubImage1DEXT;
#define glCopyTextureSubImage1DEXT sf_glad_glCopyTextureSubImage1DEXT
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC sf_glad_glCopyTextureSubImage2DEXT;
#define glCopyTextureSubImage2DEXT sf_glad_glCopyTextureSubImage2DEXT
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC sf_glad_glCopyTextureSubImage3DEXT;
#define glCopyTextureSubImage3DEXT sf_glad_glCopyTextureSubImage3DEXT
GLAD_API_CALL PFNGLCREATEPROGRAMPROC sf_glad_glCreateProgram;
#define glCreateProgram sf_glad_glCreateProgram
GLAD_API_CALL PFNGLCREATEPROGRAMOBJECTARBPROC sf_glad_glCreateProgramObjectARB;
#define glCreateProgramObjectARB sf_glad_glCreateProgramObjectARB
GLAD_API_CALL PFNGLCREATESHADERPROC sf_glad_glCreateShader;
#define glCreateShader sf_glad_glCreateShader
GLAD_API_CALL PFNGLCREATESHADEROBJECTARBPROC sf_glad_glCreateShaderObjectARB;
#define glCreateShaderObjectARB sf_glad_glCreateShaderObjectARB
GLAD_API_CALL PFNGLCREATESHADERPROGRAMVPROC sf_glad_glCreateShaderProgramv;
#define glCreateShaderProgramv sf_glad_glCreateShaderProgramv
GLAD_API_CALL PFNGLCULLFACEPROC sf_glad_glCullFace;
#define glCullFace sf_glad_glCullFace
GLAD_API_CALL PFNGLDELETEBUFFERSPROC sf_glad_glDeleteBuffers;
#define glDeleteBuffers sf_glad_glDeleteBuffers
GLAD_API_CALL PFNGLDELETEBUFFERSARBPROC sf_glad_glDeleteBuffersARB;
#define glDeleteBuffersARB sf_glad_glDeleteBuffersARB
GLAD_API_CALL PFNGLDELETEFRAMEBUFFERSPROC sf_glad_glDeleteFramebuffers;
#define glDeleteFramebuffers sf_glad_glDeleteFramebuffers
GLAD_API_CALL PFNGLDELETEFRAMEBUFFERSEXTPROC sf_glad_glDeleteFramebuffersEXT;
#define glDeleteFramebuffersEXT sf_glad_glDeleteFramebuffersEXT
GLAD_API_CALL PFNGLDELETEOBJECTARBPROC sf_glad_glDeleteObjectARB;
#define glDeleteObjectARB sf_glad_glDeleteObjectARB
GLAD_API_CALL PFNGLDELETEPROGRAMPROC sf_glad_glDeleteProgram;
#define glDeleteProgram sf_glad_glDeleteProgram
GLAD_API_CALL PFNGLDELETEPROGRAMPIPELINESPROC sf_glad_glDeleteProgramPipelines;
#define glDeleteProgramPipelines sf_glad_glDeleteProgramPipelines
GLAD_API_CALL PFNGLDELETEPROGRAMSARBPROC sf_glad_glDeleteProgramsARB;
#define glDeleteProgramsARB sf_glad_glDeleteProgramsARB
GLAD_API_CALL PFNGLDELETEPROGRAMSNVPROC sf_glad_glDeleteProgramsNV;
#define glDeleteProgramsNV sf_glad_glDeleteProgramsNV
GLAD_API_CALL PFNGLDELETEQUERIESPROC sf_glad_glDeleteQueries;
#define glDeleteQueries sf_glad_glDeleteQueries
GLAD_API_CALL PFNGLDELETEQUERIESARBPROC sf_glad_glDeleteQueriesARB;
#define glDeleteQueriesARB sf_glad_glDeleteQueriesARB
GLAD_API_CALL PFNGLDELETERENDERBUFFERSPROC sf_glad_glDeleteRenderbuffers;
#define glDeleteRenderbuffers sf_glad_glDeleteRenderbuffers
GLAD_API_CALL PFNGLDELETERENDERBUFFERSEXTPROC sf_glad_glDeleteRenderbuffersEXT;
#define glDeleteRenderbuffersEXT sf_glad_glDeleteRenderbuffersEXT
GLAD_API_CALL PFNGLDELETESAMPLERSPROC sf_glad_glDeleteSamplers;
#define glDeleteSamplers sf_glad_glDeleteSamplers
GLAD_API_CALL PFNGLDELETESHADERPROC sf_glad_glDeleteShader;
#define glDeleteShader sf_glad_glDeleteShader
GLAD_API_CALL PFNGLDELETESYNCPROC sf_glad_glDeleteSync;
#define glDeleteSync sf_glad_glDeleteSync
GLAD_API_CALL PFNGLDELETETEXTURESPROC sf_glad_glDeleteTextures;
#define glDeleteTextures sf_glad_glDeleteTextures
GLAD_API_CALL PFNGLDELETETEXTURESEXTPROC sf_glad_glDeleteTexturesEXT;
#define glDeleteTexturesEXT sf_glad_glDeleteTexturesEXT
GLAD_API_CALL PFNGLDELETETRANSFORMFEEDBACKSPROC sf_glad_glDeleteTransformFeedbacks;
#define glDeleteTransformFeedbacks sf_glad_glDeleteTransformFeedbacks
GLAD_API_CALL PFNGLDELETETRANSFORMFEEDBACKSNVPROC sf_glad_glDeleteTransformFeedbacksNV;
#define glDeleteTransformFeedbacksNV sf_glad_glDeleteTransformFeedbacksNV
GLAD_API_CALL PFNGLDELETEVERTEXARRAYSPROC sf_glad_glDeleteVertexArrays;
#define glDeleteVertexArrays sf_glad_glDeleteVertexArrays
GLAD_API_CALL PFNGLDELETEVERTEXARRAYSAPPLEPROC sf_glad_glDeleteVertexArraysAPPLE;
#define glDeleteVertexArraysAPPLE sf_glad_glDeleteVertexArraysAPPLE
GLAD_API_CALL PFNGLDEPTHFUNCPROC sf_glad_glDepthFunc;
#define glDepthFunc sf_glad_glDepthFunc
GLAD_API_CALL PFNGLDEPTHMASKPROC sf_glad_glDepthMask;
#define glDepthMask sf_glad_glDepthMask
GLAD_API_CALL PFNGLDEPTHRANGEPROC sf_glad_glDepthRange;
#define glDepthRange sf_glad_glDepthRange
GLAD_API_CALL PFNGLDEPTHRANGEARRAYDVNVPROC sf_glad_glDepthRangeArraydvNV;
#define glDepthRangeArraydvNV sf_glad_glDepthRangeArraydvNV
GLAD_API_CALL PFNGLDEPTHRANGEARRAYVPROC sf_glad_glDepthRangeArrayv;
#define glDepthRangeArrayv sf_glad_glDepthRangeArrayv
GLAD_API_CALL PFNGLDEPTHRANGEINDEXEDPROC sf_glad_glDepthRangeIndexed;
#define glDepthRangeIndexed sf_glad_glDepthRangeIndexed
GLAD_API_CALL PFNGLDEPTHRANGEINDEXEDDNVPROC sf_glad_glDepthRangeIndexeddNV;
#define glDepthRangeIndexeddNV sf_glad_glDepthRangeIndexeddNV
GLAD_API_CALL PFNGLDEPTHRANGEFPROC sf_glad_glDepthRangef;
#define glDepthRangef sf_glad_glDepthRangef
GLAD_API_CALL PFNGLDEPTHRANGEFOESPROC sf_glad_glDepthRangefOES;
#define glDepthRangefOES sf_glad_glDepthRangefOES
GLAD_API_CALL PFNGLDETACHOBJECTARBPROC sf_glad_glDetachObjectARB;
#define glDetachObjectARB sf_glad_glDetachObjectARB
GLAD_API_CALL PFNGLDETACHSHADERPROC sf_glad_glDetachShader;
#define glDetachShader sf_glad_glDetachShader
GLAD_API_CALL PFNGLDISABLEPROC sf_glad_glDisable;
#define glDisable sf_glad_glDisable
GLAD_API_CALL PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC sf_glad_glDisableClientStateIndexedEXT;
#define glDisableClientStateIndexedEXT sf_glad_glDisableClientStateIndexedEXT
GLAD_API_CALL PFNGLDISABLECLIENTSTATEIEXTPROC sf_glad_glDisableClientStateiEXT;
#define glDisableClientStateiEXT sf_glad_glDisableClientStateiEXT
GLAD_API_CALL PFNGLDISABLEINDEXEDEXTPROC sf_glad_glDisableIndexedEXT;
#define glDisableIndexedEXT sf_glad_glDisableIndexedEXT
GLAD_API_CALL PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC sf_glad_glDisableVertexArrayAttribEXT;
#define glDisableVertexArrayAttribEXT sf_glad_glDisableVertexArrayAttribEXT
GLAD_API_CALL PFNGLDISABLEVERTEXARRAYEXTPROC sf_glad_glDisableVertexArrayEXT;
#define glDisableVertexArrayEXT sf_glad_glDisableVertexArrayEXT
GLAD_API_CALL PFNGLDISABLEVERTEXATTRIBARRAYPROC sf_glad_glDisableVertexAttribArray;
#define glDisableVertexAttribArray sf_glad_glDisableVertexAttribArray
GLAD_API_CALL PFNGLDISABLEVERTEXATTRIBARRAYARBPROC sf_glad_glDisableVertexAttribArrayARB;
#define glDisableVertexAttribArrayARB sf_glad_glDisableVertexAttribArrayARB
GLAD_API_CALL PFNGLDISABLEIPROC sf_glad_glDisablei;
#define glDisablei sf_glad_glDisablei
GLAD_API_CALL PFNGLDRAWARRAYSPROC sf_glad_glDrawArrays;
#define glDrawArrays sf_glad_glDrawArrays
GLAD_API_CALL PFNGLDRAWARRAYSEXTPROC sf_glad_glDrawArraysEXT;
#define glDrawArraysEXT sf_glad_glDrawArraysEXT
GLAD_API_CALL PFNGLDRAWARRAYSINDIRECTPROC sf_glad_glDrawArraysIndirect;
#define glDrawArraysIndirect sf_glad_glDrawArraysIndirect
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDPROC sf_glad_glDrawArraysInstanced;
#define glDrawArraysInstanced sf_glad_glDrawArraysInstanced
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDARBPROC sf_glad_glDrawArraysInstancedARB;
#define glDrawArraysInstancedARB sf_glad_glDrawArraysInstancedARB
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDEXTPROC sf_glad_glDrawArraysInstancedEXT;
#define glDrawArraysInstancedEXT sf_glad_glDrawArraysInstancedEXT
GLAD_API_CALL PFNGLDRAWBUFFERPROC sf_glad_glDrawBuffer;
#define glDrawBuffer sf_glad_glDrawBuffer
GLAD_API_CALL PFNGLDRAWBUFFERSPROC sf_glad_glDrawBuffers;
#define glDrawBuffers sf_glad_glDrawBuffers
GLAD_API_CALL PFNGLDRAWBUFFERSARBPROC sf_glad_glDrawBuffersARB;
#define glDrawBuffersARB sf_glad_glDrawBuffersARB
GLAD_API_CALL PFNGLDRAWBUFFERSATIPROC sf_glad_glDrawBuffersATI;
#define glDrawBuffersATI sf_glad_glDrawBuffersATI
GLAD_API_CALL PFNGLDRAWELEMENTSPROC sf_glad_glDrawElements;
#define glDrawElements sf_glad_glDrawElements
GLAD_API_CALL PFNGLDRAWELEMENTSBASEVERTEXPROC sf_glad_glDrawElementsBaseVertex;
#define glDrawElementsBaseVertex sf_glad_glDrawElementsBaseVertex
GLAD_API_CALL PFNGLDRAWELEMENTSINDIRECTPROC sf_glad_glDrawElementsIndirect;
#define glDrawElementsIndirect sf_glad_glDrawElementsIndirect
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDPROC sf_glad_glDrawElementsInstanced;
#define glDrawElementsInstanced sf_glad_glDrawElementsInstanced
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDARBPROC sf_glad_glDrawElementsInstancedARB;
#define glDrawElementsInstancedARB sf_glad_glDrawElementsInstancedARB
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC sf_glad_glDrawElementsInstancedBaseVertex;
#define glDrawElementsInstancedBaseVertex sf_glad_glDrawElementsInstancedBaseVertex
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDEXTPROC sf_glad_glDrawElementsInstancedEXT;
#define glDrawElementsInstancedEXT sf_glad_glDrawElementsInstancedEXT
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSPROC sf_glad_glDrawRangeElements;
#define glDrawRangeElements sf_glad_glDrawRangeElements
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC sf_glad_glDrawRangeElementsBaseVertex;
#define glDrawRangeElementsBaseVertex sf_glad_glDrawRangeElementsBaseVertex
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSEXTPROC sf_glad_glDrawRangeElementsEXT;
#define glDrawRangeElementsEXT sf_glad_glDrawRangeElementsEXT
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKPROC sf_glad_glDrawTransformFeedback;
#define glDrawTransformFeedback sf_glad_glDrawTransformFeedback
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKNVPROC sf_glad_glDrawTransformFeedbackNV;
#define glDrawTransformFeedbackNV sf_glad_glDrawTransformFeedbackNV
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC sf_glad_glDrawTransformFeedbackStream;
#define glDrawTransformFeedbackStream sf_glad_glDrawTransformFeedbackStream
GLAD_API_CALL PFNGLEDGEFLAGPOINTEREXTPROC sf_glad_glEdgeFlagPointerEXT;
#define glEdgeFlagPointerEXT sf_glad_glEdgeFlagPointerEXT
GLAD_API_CALL PFNGLENABLEPROC sf_glad_glEnable;
#define glEnable sf_glad_glEnable
GLAD_API_CALL PFNGLENABLECLIENTSTATEINDEXEDEXTPROC sf_glad_glEnableClientStateIndexedEXT;
#define glEnableClientStateIndexedEXT sf_glad_glEnableClientStateIndexedEXT
GLAD_API_CALL PFNGLENABLECLIENTSTATEIEXTPROC sf_glad_glEnableClientStateiEXT;
#define glEnableClientStateiEXT sf_glad_glEnableClientStateiEXT
GLAD_API_CALL PFNGLENABLEINDEXEDEXTPROC sf_glad_glEnableIndexedEXT;
#define glEnableIndexedEXT sf_glad_glEnableIndexedEXT
GLAD_API_CALL PFNGLENABLEVERTEXARRAYATTRIBEXTPROC sf_glad_glEnableVertexArrayAttribEXT;
#define glEnableVertexArrayAttribEXT sf_glad_glEnableVertexArrayAttribEXT
GLAD_API_CALL PFNGLENABLEVERTEXARRAYEXTPROC sf_glad_glEnableVertexArrayEXT;
#define glEnableVertexArrayEXT sf_glad_glEnableVertexArrayEXT
GLAD_API_CALL PFNGLENABLEVERTEXATTRIBARRAYPROC sf_glad_glEnableVertexAttribArray;
#define glEnableVertexAttribArray sf_glad_glEnableVertexAttribArray
GLAD_API_CALL PFNGLENABLEVERTEXATTRIBARRAYARBPROC sf_glad_glEnableVertexAttribArrayARB;
#define glEnableVertexAttribArrayARB sf_glad_glEnableVertexAttribArrayARB
GLAD_API_CALL PFNGLENABLEIPROC sf_glad_glEnablei;
#define glEnablei sf_glad_glEnablei
GLAD_API_CALL PFNGLENDCONDITIONALRENDERPROC sf_glad_glEndConditionalRender;
#define glEndConditionalRender sf_glad_glEndConditionalRender
GLAD_API_CALL PFNGLENDCONDITIONALRENDERNVPROC sf_glad_glEndConditionalRenderNV;
#define glEndConditionalRenderNV sf_glad_glEndConditionalRenderNV
GLAD_API_CALL PFNGLENDCONDITIONALRENDERNVXPROC sf_glad_glEndConditionalRenderNVX;
#define glEndConditionalRenderNVX sf_glad_glEndConditionalRenderNVX
GLAD_API_CALL PFNGLENDQUERYPROC sf_glad_glEndQuery;
#define glEndQuery sf_glad_glEndQuery
GLAD_API_CALL PFNGLENDQUERYARBPROC sf_glad_glEndQueryARB;
#define glEndQueryARB sf_glad_glEndQueryARB
GLAD_API_CALL PFNGLENDQUERYINDEXEDPROC sf_glad_glEndQueryIndexed;
#define glEndQueryIndexed sf_glad_glEndQueryIndexed
GLAD_API_CALL PFNGLENDTRANSFORMFEEDBACKPROC sf_glad_glEndTransformFeedback;
#define glEndTransformFeedback sf_glad_glEndTransformFeedback
GLAD_API_CALL PFNGLENDTRANSFORMFEEDBACKEXTPROC sf_glad_glEndTransformFeedbackEXT;
#define glEndTransformFeedbackEXT sf_glad_glEndTransformFeedbackEXT
GLAD_API_CALL PFNGLENDTRANSFORMFEEDBACKNVPROC sf_glad_glEndTransformFeedbackNV;
#define glEndTransformFeedbackNV sf_glad_glEndTransformFeedbackNV
GLAD_API_CALL PFNGLEXECUTEPROGRAMNVPROC sf_glad_glExecuteProgramNV;
#define glExecuteProgramNV sf_glad_glExecuteProgramNV
GLAD_API_CALL PFNGLFENCESYNCPROC sf_glad_glFenceSync;
#define glFenceSync sf_glad_glFenceSync
GLAD_API_CALL PFNGLFINISHPROC sf_glad_glFinish;
#define glFinish sf_glad_glFinish
GLAD_API_CALL PFNGLFLUSHPROC sf_glad_glFlush;
#define glFlush sf_glad_glFlush
GLAD_API_CALL PFNGLFLUSHMAPPEDBUFFERRANGEPROC sf_glad_glFlushMappedBufferRange;
#define glFlushMappedBufferRange sf_glad_glFlushMappedBufferRange
GLAD_API_CALL PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC sf_glad_glFlushMappedBufferRangeAPPLE;
#define glFlushMappedBufferRangeAPPLE sf_glad_glFlushMappedBufferRangeAPPLE
GLAD_API_CALL PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC sf_glad_glFlushMappedNamedBufferRangeEXT;
#define glFlushMappedNamedBufferRangeEXT sf_glad_glFlushMappedNamedBufferRangeEXT
GLAD_API_CALL PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC sf_glad_glFramebufferDrawBufferEXT;
#define glFramebufferDrawBufferEXT sf_glad_glFramebufferDrawBufferEXT
GLAD_API_CALL PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC sf_glad_glFramebufferDrawBuffersEXT;
#define glFramebufferDrawBuffersEXT sf_glad_glFramebufferDrawBuffersEXT
GLAD_API_CALL PFNGLFRAMEBUFFERREADBUFFEREXTPROC sf_glad_glFramebufferReadBufferEXT;
#define glFramebufferReadBufferEXT sf_glad_glFramebufferReadBufferEXT
GLAD_API_CALL PFNGLFRAMEBUFFERRENDERBUFFERPROC sf_glad_glFramebufferRenderbuffer;
#define glFramebufferRenderbuffer sf_glad_glFramebufferRenderbuffer
GLAD_API_CALL PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC sf_glad_glFramebufferRenderbufferEXT;
#define glFramebufferRenderbufferEXT sf_glad_glFramebufferRenderbufferEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREPROC sf_glad_glFramebufferTexture;
#define glFramebufferTexture sf_glad_glFramebufferTexture
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE1DPROC sf_glad_glFramebufferTexture1D;
#define glFramebufferTexture1D sf_glad_glFramebufferTexture1D
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE1DEXTPROC sf_glad_glFramebufferTexture1DEXT;
#define glFramebufferTexture1DEXT sf_glad_glFramebufferTexture1DEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DPROC sf_glad_glFramebufferTexture2D;
#define glFramebufferTexture2D sf_glad_glFramebufferTexture2D
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DEXTPROC sf_glad_glFramebufferTexture2DEXT;
#define glFramebufferTexture2DEXT sf_glad_glFramebufferTexture2DEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE3DPROC sf_glad_glFramebufferTexture3D;
#define glFramebufferTexture3D sf_glad_glFramebufferTexture3D
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE3DEXTPROC sf_glad_glFramebufferTexture3DEXT;
#define glFramebufferTexture3DEXT sf_glad_glFramebufferTexture3DEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREARBPROC sf_glad_glFramebufferTextureARB;
#define glFramebufferTextureARB sf_glad_glFramebufferTextureARB
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREEXTPROC sf_glad_glFramebufferTextureEXT;
#define glFramebufferTextureEXT sf_glad_glFramebufferTextureEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREFACEARBPROC sf_glad_glFramebufferTextureFaceARB;
#define glFramebufferTextureFaceARB sf_glad_glFramebufferTextureFaceARB
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC sf_glad_glFramebufferTextureFaceEXT;
#define glFramebufferTextureFaceEXT sf_glad_glFramebufferTextureFaceEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYERPROC sf_glad_glFramebufferTextureLayer;
#define glFramebufferTextureLayer sf_glad_glFramebufferTextureLayer
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYERARBPROC sf_glad_glFramebufferTextureLayerARB;
#define glFramebufferTextureLayerARB sf_glad_glFramebufferTextureLayerARB
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC sf_glad_glFramebufferTextureLayerEXT;
#define glFramebufferTextureLayerEXT sf_glad_glFramebufferTextureLayerEXT
GLAD_API_CALL PFNGLFRONTFACEPROC sf_glad_glFrontFace;
#define glFrontFace sf_glad_glFrontFace
GLAD_API_CALL PFNGLFRUSTUMFOESPROC sf_glad_glFrustumfOES;
#define glFrustumfOES sf_glad_glFrustumfOES
GLAD_API_CALL PFNGLGENBUFFERSPROC sf_glad_glGenBuffers;
#define glGenBuffers sf_glad_glGenBuffers
GLAD_API_CALL PFNGLGENBUFFERSARBPROC sf_glad_glGenBuffersARB;
#define glGenBuffersARB sf_glad_glGenBuffersARB
GLAD_API_CALL PFNGLGENFRAMEBUFFERSPROC sf_glad_glGenFramebuffers;
#define glGenFramebuffers sf_glad_glGenFramebuffers
GLAD_API_CALL PFNGLGENFRAMEBUFFERSEXTPROC sf_glad_glGenFramebuffersEXT;
#define glGenFramebuffersEXT sf_glad_glGenFramebuffersEXT
GLAD_API_CALL PFNGLGENPROGRAMPIPELINESPROC sf_glad_glGenProgramPipelines;
#define glGenProgramPipelines sf_glad_glGenProgramPipelines
GLAD_API_CALL PFNGLGENPROGRAMSARBPROC sf_glad_glGenProgramsARB;
#define glGenProgramsARB sf_glad_glGenProgramsARB
GLAD_API_CALL PFNGLGENPROGRAMSNVPROC sf_glad_glGenProgramsNV;
#define glGenProgramsNV sf_glad_glGenProgramsNV
GLAD_API_CALL PFNGLGENQUERIESPROC sf_glad_glGenQueries;
#define glGenQueries sf_glad_glGenQueries
GLAD_API_CALL PFNGLGENQUERIESARBPROC sf_glad_glGenQueriesARB;
#define glGenQueriesARB sf_glad_glGenQueriesARB
GLAD_API_CALL PFNGLGENRENDERBUFFERSPROC sf_glad_glGenRenderbuffers;
#define glGenRenderbuffers sf_glad_glGenRenderbuffers
GLAD_API_CALL PFNGLGENRENDERBUFFERSEXTPROC sf_glad_glGenRenderbuffersEXT;
#define glGenRenderbuffersEXT sf_glad_glGenRenderbuffersEXT
GLAD_API_CALL PFNGLGENSAMPLERSPROC sf_glad_glGenSamplers;
#define glGenSamplers sf_glad_glGenSamplers
GLAD_API_CALL PFNGLGENTEXTURESPROC sf_glad_glGenTextures;
#define glGenTextures sf_glad_glGenTextures
GLAD_API_CALL PFNGLGENTEXTURESEXTPROC sf_glad_glGenTexturesEXT;
#define glGenTexturesEXT sf_glad_glGenTexturesEXT
GLAD_API_CALL PFNGLGENTRANSFORMFEEDBACKSPROC sf_glad_glGenTransformFeedbacks;
#define glGenTransformFeedbacks sf_glad_glGenTransformFeedbacks
GLAD_API_CALL PFNGLGENTRANSFORMFEEDBACKSNVPROC sf_glad_glGenTransformFeedbacksNV;
#define glGenTransformFeedbacksNV sf_glad_glGenTransformFeedbacksNV
GLAD_API_CALL PFNGLGENVERTEXARRAYSPROC sf_glad_glGenVertexArrays;
#define glGenVertexArrays sf_glad_glGenVertexArrays
GLAD_API_CALL PFNGLGENVERTEXARRAYSAPPLEPROC sf_glad_glGenVertexArraysAPPLE;
#define glGenVertexArraysAPPLE sf_glad_glGenVertexArraysAPPLE
GLAD_API_CALL PFNGLGENERATEMIPMAPPROC sf_glad_glGenerateMipmap;
#define glGenerateMipmap sf_glad_glGenerateMipmap
GLAD_API_CALL PFNGLGENERATEMIPMAPEXTPROC sf_glad_glGenerateMipmapEXT;
#define glGenerateMipmapEXT sf_glad_glGenerateMipmapEXT
GLAD_API_CALL PFNGLGENERATEMULTITEXMIPMAPEXTPROC sf_glad_glGenerateMultiTexMipmapEXT;
#define glGenerateMultiTexMipmapEXT sf_glad_glGenerateMultiTexMipmapEXT
GLAD_API_CALL PFNGLGENERATETEXTUREMIPMAPEXTPROC sf_glad_glGenerateTextureMipmapEXT;
#define glGenerateTextureMipmapEXT sf_glad_glGenerateTextureMipmapEXT
GLAD_API_CALL PFNGLGETACTIVEATTRIBPROC sf_glad_glGetActiveAttrib;
#define glGetActiveAttrib sf_glad_glGetActiveAttrib
GLAD_API_CALL PFNGLGETACTIVEATTRIBARBPROC sf_glad_glGetActiveAttribARB;
#define glGetActiveAttribARB sf_glad_glGetActiveAttribARB
GLAD_API_CALL PFNGLGETACTIVESUBROUTINENAMEPROC sf_glad_glGetActiveSubroutineName;
#define glGetActiveSubroutineName sf_glad_glGetActiveSubroutineName
GLAD_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC sf_glad_glGetActiveSubroutineUniformName;
#define glGetActiveSubroutineUniformName sf_glad_glGetActiveSubroutineUniformName
GLAD_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC sf_glad_glGetActiveSubroutineUniformiv;
#define glGetActiveSubroutineUniformiv sf_glad_glGetActiveSubroutineUniformiv
GLAD_API_CALL PFNGLGETACTIVEUNIFORMPROC sf_glad_glGetActiveUniform;
#define glGetActiveUniform sf_glad_glGetActiveUniform
GLAD_API_CALL PFNGLGETACTIVEUNIFORMARBPROC sf_glad_glGetActiveUniformARB;
#define glGetActiveUniformARB sf_glad_glGetActiveUniformARB
GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC sf_glad_glGetActiveUniformBlockName;
#define glGetActiveUniformBlockName sf_glad_glGetActiveUniformBlockName
GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKIVPROC sf_glad_glGetActiveUniformBlockiv;
#define glGetActiveUniformBlockiv sf_glad_glGetActiveUniformBlockiv
GLAD_API_CALL PFNGLGETACTIVEUNIFORMNAMEPROC sf_glad_glGetActiveUniformName;
#define glGetActiveUniformName sf_glad_glGetActiveUniformName
GLAD_API_CALL PFNGLGETACTIVEUNIFORMSIVPROC sf_glad_glGetActiveUniformsiv;
#define glGetActiveUniformsiv sf_glad_glGetActiveUniformsiv
GLAD_API_CALL PFNGLGETACTIVEVARYINGNVPROC sf_glad_glGetActiveVaryingNV;
#define glGetActiveVaryingNV sf_glad_glGetActiveVaryingNV
GLAD_API_CALL PFNGLGETATTACHEDOBJECTSARBPROC sf_glad_glGetAttachedObjectsARB;
#define glGetAttachedObjectsARB sf_glad_glGetAttachedObjectsARB
GLAD_API_CALL PFNGLGETATTACHEDSHADERSPROC sf_glad_glGetAttachedShaders;
#define glGetAttachedShaders sf_glad_glGetAttachedShaders
GLAD_API_CALL PFNGLGETATTRIBLOCATIONPROC sf_glad_glGetAttribLocation;
#define glGetAttribLocation sf_glad_glGetAttribLocation
GLAD_API_CALL PFNGLGETATTRIBLOCATIONARBPROC sf_glad_glGetAttribLocationARB;
#define glGetAttribLocationARB sf_glad_glGetAttribLocationARB
GLAD_API_CALL PFNGLGETBOOLEANINDEXEDVEXTPROC sf_glad_glGetBooleanIndexedvEXT;
#define glGetBooleanIndexedvEXT sf_glad_glGetBooleanIndexedvEXT
GLAD_API_CALL PFNGLGETBOOLEANI_VPROC sf_glad_glGetBooleani_v;
#define glGetBooleani_v sf_glad_glGetBooleani_v
GLAD_API_CALL PFNGLGETBOOLEANVPROC sf_glad_glGetBooleanv;
#define glGetBooleanv sf_glad_glGetBooleanv
GLAD_API_CALL PFNGLGETBUFFERPARAMETERI64VPROC sf_glad_glGetBufferParameteri64v;
#define glGetBufferParameteri64v sf_glad_glGetBufferParameteri64v
GLAD_API_CALL PFNGLGETBUFFERPARAMETERIVPROC sf_glad_glGetBufferParameteriv;
#define glGetBufferParameteriv sf_glad_glGetBufferParameteriv
GLAD_API_CALL PFNGLGETBUFFERPARAMETERIVARBPROC sf_glad_glGetBufferParameterivARB;
#define glGetBufferParameterivARB sf_glad_glGetBufferParameterivARB
GLAD_API_CALL PFNGLGETBUFFERPOINTERVPROC sf_glad_glGetBufferPointerv;
#define glGetBufferPointerv sf_glad_glGetBufferPointerv
GLAD_API_CALL PFNGLGETBUFFERPOINTERVARBPROC sf_glad_glGetBufferPointervARB;
#define glGetBufferPointervARB sf_glad_glGetBufferPointervARB
GLAD_API_CALL PFNGLGETBUFFERSUBDATAPROC sf_glad_glGetBufferSubData;
#define glGetBufferSubData sf_glad_glGetBufferSubData
GLAD_API_CALL PFNGLGETBUFFERSUBDATAARBPROC sf_glad_glGetBufferSubDataARB;
#define glGetBufferSubDataARB sf_glad_glGetBufferSubDataARB
GLAD_API_CALL PFNGLGETCLIPPLANEFOESPROC sf_glad_glGetClipPlanefOES;
#define glGetClipPlanefOES sf_glad_glGetClipPlanefOES
GLAD_API_CALL PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC sf_glad_glGetCompressedMultiTexImageEXT;
#define glGetCompressedMultiTexImageEXT sf_glad_glGetCompressedMultiTexImageEXT
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXIMAGEPROC sf_glad_glGetCompressedTexImage;
#define glGetCompressedTexImage sf_glad_glGetCompressedTexImage
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXIMAGEARBPROC sf_glad_glGetCompressedTexImageARB;
#define glGetCompressedTexImageARB sf_glad_glGetCompressedTexImageARB
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC sf_glad_glGetCompressedTextureImageEXT;
#define glGetCompressedTextureImageEXT sf_glad_glGetCompressedTextureImageEXT
GLAD_API_CALL PFNGLGETDOUBLEINDEXEDVEXTPROC sf_glad_glGetDoubleIndexedvEXT;
#define glGetDoubleIndexedvEXT sf_glad_glGetDoubleIndexedvEXT
GLAD_API_CALL PFNGLGETDOUBLEI_VPROC sf_glad_glGetDoublei_v;
#define glGetDoublei_v sf_glad_glGetDoublei_v
GLAD_API_CALL PFNGLGETDOUBLEI_VEXTPROC sf_glad_glGetDoublei_vEXT;
#define glGetDoublei_vEXT sf_glad_glGetDoublei_vEXT
GLAD_API_CALL PFNGLGETDOUBLEVPROC sf_glad_glGetDoublev;
#define glGetDoublev sf_glad_glGetDoublev
GLAD_API_CALL PFNGLGETERRORPROC sf_glad_glGetError;
#define glGetError sf_glad_glGetError
GLAD_API_CALL PFNGLGETFLOATINDEXEDVEXTPROC sf_glad_glGetFloatIndexedvEXT;
#define glGetFloatIndexedvEXT sf_glad_glGetFloatIndexedvEXT
GLAD_API_CALL PFNGLGETFLOATI_VPROC sf_glad_glGetFloati_v;
#define glGetFloati_v sf_glad_glGetFloati_v
GLAD_API_CALL PFNGLGETFLOATI_VEXTPROC sf_glad_glGetFloati_vEXT;
#define glGetFloati_vEXT sf_glad_glGetFloati_vEXT
GLAD_API_CALL PFNGLGETFLOATVPROC sf_glad_glGetFloatv;
#define glGetFloatv sf_glad_glGetFloatv
GLAD_API_CALL PFNGLGETFRAGDATAINDEXPROC sf_glad_glGetFragDataIndex;
#define glGetFragDataIndex sf_glad_glGetFragDataIndex
GLAD_API_CALL PFNGLGETFRAGDATALOCATIONPROC sf_glad_glGetFragDataLocation;
#define glGetFragDataLocation sf_glad_glGetFragDataLocation
GLAD_API_CALL PFNGLGETFRAGDATALOCATIONEXTPROC sf_glad_glGetFragDataLocationEXT;
#define glGetFragDataLocationEXT sf_glad_glGetFragDataLocationEXT
GLAD_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC sf_glad_glGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv sf_glad_glGetFramebufferAttachmentParameteriv
GLAD_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC sf_glad_glGetFramebufferAttachmentParameterivEXT;
#define glGetFramebufferAttachmentParameterivEXT sf_glad_glGetFramebufferAttachmentParameterivEXT
GLAD_API_CALL PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC sf_glad_glGetFramebufferParameterivEXT;
#define glGetFramebufferParameterivEXT sf_glad_glGetFramebufferParameterivEXT
GLAD_API_CALL PFNGLGETHANDLEARBPROC sf_glad_glGetHandleARB;
#define glGetHandleARB sf_glad_glGetHandleARB
GLAD_API_CALL PFNGLGETINFOLOGARBPROC sf_glad_glGetInfoLogARB;
#define glGetInfoLogARB sf_glad_glGetInfoLogARB
GLAD_API_CALL PFNGLGETINTEGER64I_VPROC sf_glad_glGetInteger64i_v;
#define glGetInteger64i_v sf_glad_glGetInteger64i_v
GLAD_API_CALL PFNGLGETINTEGER64VPROC sf_glad_glGetInteger64v;
#define glGetInteger64v sf_glad_glGetInteger64v
GLAD_API_CALL PFNGLGETINTEGERINDEXEDVEXTPROC sf_glad_glGetIntegerIndexedvEXT;
#define glGetIntegerIndexedvEXT sf_glad_glGetIntegerIndexedvEXT
GLAD_API_CALL PFNGLGETINTEGERI_VPROC sf_glad_glGetIntegeri_v;
#define glGetIntegeri_v sf_glad_glGetIntegeri_v
GLAD_API_CALL PFNGLGETINTEGERVPROC sf_glad_glGetIntegerv;
#define glGetIntegerv sf_glad_glGetIntegerv
GLAD_API_CALL PFNGLGETMULTITEXENVFVEXTPROC sf_glad_glGetMultiTexEnvfvEXT;
#define glGetMultiTexEnvfvEXT sf_glad_glGetMultiTexEnvfvEXT
GLAD_API_CALL PFNGLGETMULTITEXENVIVEXTPROC sf_glad_glGetMultiTexEnvivEXT;
#define glGetMultiTexEnvivEXT sf_glad_glGetMultiTexEnvivEXT
GLAD_API_CALL PFNGLGETMULTITEXGENDVEXTPROC sf_glad_glGetMultiTexGendvEXT;
#define glGetMultiTexGendvEXT sf_glad_glGetMultiTexGendvEXT
GLAD_API_CALL PFNGLGETMULTITEXGENFVEXTPROC sf_glad_glGetMultiTexGenfvEXT;
#define glGetMultiTexGenfvEXT sf_glad_glGetMultiTexGenfvEXT
GLAD_API_CALL PFNGLGETMULTITEXGENIVEXTPROC sf_glad_glGetMultiTexGenivEXT;
#define glGetMultiTexGenivEXT sf_glad_glGetMultiTexGenivEXT
GLAD_API_CALL PFNGLGETMULTITEXIMAGEEXTPROC sf_glad_glGetMultiTexImageEXT;
#define glGetMultiTexImageEXT sf_glad_glGetMultiTexImageEXT
GLAD_API_CALL PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC sf_glad_glGetMultiTexLevelParameterfvEXT;
#define glGetMultiTexLevelParameterfvEXT sf_glad_glGetMultiTexLevelParameterfvEXT
GLAD_API_CALL PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC sf_glad_glGetMultiTexLevelParameterivEXT;
#define glGetMultiTexLevelParameterivEXT sf_glad_glGetMultiTexLevelParameterivEXT
GLAD_API_CALL PFNGLGETMULTITEXPARAMETERIIVEXTPROC sf_glad_glGetMultiTexParameterIivEXT;
#define glGetMultiTexParameterIivEXT sf_glad_glGetMultiTexParameterIivEXT
GLAD_API_CALL PFNGLGETMULTITEXPARAMETERIUIVEXTPROC sf_glad_glGetMultiTexParameterIuivEXT;
#define glGetMultiTexParameterIuivEXT sf_glad_glGetMultiTexParameterIuivEXT
GLAD_API_CALL PFNGLGETMULTITEXPARAMETERFVEXTPROC sf_glad_glGetMultiTexParameterfvEXT;
#define glGetMultiTexParameterfvEXT sf_glad_glGetMultiTexParameterfvEXT
GLAD_API_CALL PFNGLGETMULTITEXPARAMETERIVEXTPROC sf_glad_glGetMultiTexParameterivEXT;
#define glGetMultiTexParameterivEXT sf_glad_glGetMultiTexParameterivEXT
GLAD_API_CALL PFNGLGETMULTISAMPLEFVPROC sf_glad_glGetMultisamplefv;
#define glGetMultisamplefv sf_glad_glGetMultisamplefv
GLAD_API_CALL PFNGLGETMULTISAMPLEFVNVPROC sf_glad_glGetMultisamplefvNV;
#define glGetMultisamplefvNV sf_glad_glGetMultisamplefvNV
GLAD_API_CALL PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC sf_glad_glGetNamedBufferParameterivEXT;
#define glGetNamedBufferParameterivEXT sf_glad_glGetNamedBufferParameterivEXT
GLAD_API_CALL PFNGLGETNAMEDBUFFERPOINTERVEXTPROC sf_glad_glGetNamedBufferPointervEXT;
#define glGetNamedBufferPointervEXT sf_glad_glGetNamedBufferPointervEXT
GLAD_API_CALL PFNGLGETNAMEDBUFFERSUBDATAEXTPROC sf_glad_glGetNamedBufferSubDataEXT;
#define glGetNamedBufferSubDataEXT sf_glad_glGetNamedBufferSubDataEXT
GLAD_API_CALL PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC sf_glad_glGetNamedFramebufferAttachmentParameterivEXT;
#define glGetNamedFramebufferAttachmentParameterivEXT sf_glad_glGetNamedFramebufferAttachmentParameterivEXT
GLAD_API_CALL PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC sf_glad_glGetNamedFramebufferParameterivEXT;
#define glGetNamedFramebufferParameterivEXT sf_glad_glGetNamedFramebufferParameterivEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC sf_glad_glGetNamedProgramLocalParameterIivEXT;
#define glGetNamedProgramLocalParameterIivEXT sf_glad_glGetNamedProgramLocalParameterIivEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC sf_glad_glGetNamedProgramLocalParameterIuivEXT;
#define glGetNamedProgramLocalParameterIuivEXT sf_glad_glGetNamedProgramLocalParameterIuivEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC sf_glad_glGetNamedProgramLocalParameterdvEXT;
#define glGetNamedProgramLocalParameterdvEXT sf_glad_glGetNamedProgramLocalParameterdvEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC sf_glad_glGetNamedProgramLocalParameterfvEXT;
#define glGetNamedProgramLocalParameterfvEXT sf_glad_glGetNamedProgramLocalParameterfvEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMSTRINGEXTPROC sf_glad_glGetNamedProgramStringEXT;
#define glGetNamedProgramStringEXT sf_glad_glGetNamedProgramStringEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMIVEXTPROC sf_glad_glGetNamedProgramivEXT;
#define glGetNamedProgramivEXT sf_glad_glGetNamedProgramivEXT
GLAD_API_CALL PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC sf_glad_glGetNamedRenderbufferParameterivEXT;
#define glGetNamedRenderbufferParameterivEXT sf_glad_glGetNamedRenderbufferParameterivEXT
GLAD_API_CALL PFNGLGETOBJECTPARAMETERFVARBPROC sf_glad_glGetObjectParameterfvARB;
#define glGetObjectParameterfvARB sf_glad_glGetObjectParameterfvARB
GLAD_API_CALL PFNGLGETOBJECTPARAMETERIVARBPROC sf_glad_glGetObjectParameterivARB;
#define glGetObjectParameterivARB sf_glad_glGetObjectParameterivARB
GLAD_API_CALL PFNGLGETPOINTERINDEXEDVEXTPROC sf_glad_glGetPointerIndexedvEXT;
#define glGetPointerIndexedvEXT sf_glad_glGetPointerIndexedvEXT
GLAD_API_CALL PFNGLGETPOINTERI_VEXTPROC sf_glad_glGetPointeri_vEXT;
#define glGetPointeri_vEXT sf_glad_glGetPointeri_vEXT
GLAD_API_CALL PFNGLGETPOINTERVEXTPROC sf_glad_glGetPointervEXT;
#define glGetPointervEXT sf_glad_glGetPointervEXT
GLAD_API_CALL PFNGLGETPROGRAMBINARYPROC sf_glad_glGetProgramBinary;
#define glGetProgramBinary sf_glad_glGetProgramBinary
GLAD_API_CALL PFNGLGETPROGRAMENVPARAMETERDVARBPROC sf_glad_glGetProgramEnvParameterdvARB;
#define glGetProgramEnvParameterdvARB sf_glad_glGetProgramEnvParameterdvARB
GLAD_API_CALL PFNGLGETPROGRAMENVPARAMETERFVARBPROC sf_glad_glGetProgramEnvParameterfvARB;
#define glGetProgramEnvParameterfvARB sf_glad_glGetProgramEnvParameterfvARB
GLAD_API_CALL PFNGLGETPROGRAMINFOLOGPROC sf_glad_glGetProgramInfoLog;
#define glGetProgramInfoLog sf_glad_glGetProgramInfoLog
GLAD_API_CALL PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC sf_glad_glGetProgramLocalParameterdvARB;
#define glGetProgramLocalParameterdvARB sf_glad_glGetProgramLocalParameterdvARB
GLAD_API_CALL PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC sf_glad_glGetProgramLocalParameterfvARB;
#define glGetProgramLocalParameterfvARB sf_glad_glGetProgramLocalParameterfvARB
GLAD_API_CALL PFNGLGETPROGRAMPARAMETERDVNVPROC sf_glad_glGetProgramParameterdvNV;
#define glGetProgramParameterdvNV sf_glad_glGetProgramParameterdvNV
GLAD_API_CALL PFNGLGETPROGRAMPARAMETERFVNVPROC sf_glad_glGetProgramParameterfvNV;
#define glGetProgramParameterfvNV sf_glad_glGetProgramParameterfvNV
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEINFOLOGPROC sf_glad_glGetProgramPipelineInfoLog;
#define glGetProgramPipelineInfoLog sf_glad_glGetProgramPipelineInfoLog
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEIVPROC sf_glad_glGetProgramPipelineiv;
#define glGetProgramPipelineiv sf_glad_glGetProgramPipelineiv
GLAD_API_CALL PFNGLGETPROGRAMSTAGEIVPROC sf_glad_glGetProgramStageiv;
#define glGetProgramStageiv sf_glad_glGetProgramStageiv
GLAD_API_CALL PFNGLGETPROGRAMSTRINGARBPROC sf_glad_glGetProgramStringARB;
#define glGetProgramStringARB sf_glad_glGetProgramStringARB
GLAD_API_CALL PFNGLGETPROGRAMSTRINGNVPROC sf_glad_glGetProgramStringNV;
#define glGetProgramStringNV sf_glad_glGetProgramStringNV
GLAD_API_CALL PFNGLGETPROGRAMIVPROC sf_glad_glGetProgramiv;
#define glGetProgramiv sf_glad_glGetProgramiv
GLAD_API_CALL PFNGLGETPROGRAMIVARBPROC sf_glad_glGetProgramivARB;
#define glGetProgramivARB sf_glad_glGetProgramivARB
GLAD_API_CALL PFNGLGETPROGRAMIVNVPROC sf_glad_glGetProgramivNV;
#define glGetProgramivNV sf_glad_glGetProgramivNV
GLAD_API_CALL PFNGLGETQUERYINDEXEDIVPROC sf_glad_glGetQueryIndexediv;
#define glGetQueryIndexediv sf_glad_glGetQueryIndexediv
GLAD_API_CALL PFNGLGETQUERYOBJECTI64VPROC sf_glad_glGetQueryObjecti64v;
#define glGetQueryObjecti64v sf_glad_glGetQueryObjecti64v
GLAD_API_CALL PFNGLGETQUERYOBJECTI64VEXTPROC sf_glad_glGetQueryObjecti64vEXT;
#define glGetQueryObjecti64vEXT sf_glad_glGetQueryObjecti64vEXT
GLAD_API_CALL PFNGLGETQUERYOBJECTIVPROC sf_glad_glGetQueryObjectiv;
#define glGetQueryObjectiv sf_glad_glGetQueryObjectiv
GLAD_API_CALL PFNGLGETQUERYOBJECTIVARBPROC sf_glad_glGetQueryObjectivARB;
#define glGetQueryObjectivARB sf_glad_glGetQueryObjectivARB
GLAD_API_CALL PFNGLGETQUERYOBJECTUI64VPROC sf_glad_glGetQueryObjectui64v;
#define glGetQueryObjectui64v sf_glad_glGetQueryObjectui64v
GLAD_API_CALL PFNGLGETQUERYOBJECTUI64VEXTPROC sf_glad_glGetQueryObjectui64vEXT;
#define glGetQueryObjectui64vEXT sf_glad_glGetQueryObjectui64vEXT
GLAD_API_CALL PFNGLGETQUERYOBJECTUIVPROC sf_glad_glGetQueryObjectuiv;
#define glGetQueryObjectuiv sf_glad_glGetQueryObjectuiv
GLAD_API_CALL PFNGLGETQUERYOBJECTUIVARBPROC sf_glad_glGetQueryObjectuivARB;
#define glGetQueryObjectuivARB sf_glad_glGetQueryObjectuivARB
GLAD_API_CALL PFNGLGETQUERYIVPROC sf_glad_glGetQueryiv;
#define glGetQueryiv sf_glad_glGetQueryiv
GLAD_API_CALL PFNGLGETQUERYIVARBPROC sf_glad_glGetQueryivARB;
#define glGetQueryivARB sf_glad_glGetQueryivARB
GLAD_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVPROC sf_glad_glGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv sf_glad_glGetRenderbufferParameteriv
GLAD_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC sf_glad_glGetRenderbufferParameterivEXT;
#define glGetRenderbufferParameterivEXT sf_glad_glGetRenderbufferParameterivEXT
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIIVPROC sf_glad_glGetSamplerParameterIiv;
#define glGetSamplerParameterIiv sf_glad_glGetSamplerParameterIiv
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIUIVPROC sf_glad_glGetSamplerParameterIuiv;
#define glGetSamplerParameterIuiv sf_glad_glGetSamplerParameterIuiv
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERFVPROC sf_glad_glGetSamplerParameterfv;
#define glGetSamplerParameterfv sf_glad_glGetSamplerParameterfv
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIVPROC sf_glad_glGetSamplerParameteriv;
#define glGetSamplerParameteriv sf_glad_glGetSamplerParameteriv
GLAD_API_CALL PFNGLGETSHADERINFOLOGPROC sf_glad_glGetShaderInfoLog;
#define glGetShaderInfoLog sf_glad_glGetShaderInfoLog
GLAD_API_CALL PFNGLGETSHADERPRECISIONFORMATPROC sf_glad_glGetShaderPrecisionFormat;
#define glGetShaderPrecisionFormat sf_glad_glGetShaderPrecisionFormat
GLAD_API_CALL PFNGLGETSHADERSOURCEPROC sf_glad_glGetShaderSource;
#define glGetShaderSource sf_glad_glGetShaderSource
GLAD_API_CALL PFNGLGETSHADERSOURCEARBPROC sf_glad_glGetShaderSourceARB;
#define glGetShaderSourceARB sf_glad_glGetShaderSourceARB
GLAD_API_CALL PFNGLGETSHADERIVPROC sf_glad_glGetShaderiv;
#define glGetShaderiv sf_glad_glGetShaderiv
GLAD_API_CALL PFNGLGETSTRINGPROC sf_glad_glGetString;
#define glGetString sf_glad_glGetString
GLAD_API_CALL PFNGLGETSTRINGIPROC sf_glad_glGetStringi;
#define glGetStringi sf_glad_glGetStringi
GLAD_API_CALL PFNGLGETSUBROUTINEINDEXPROC sf_glad_glGetSubroutineIndex;
#define glGetSubroutineIndex sf_glad_glGetSubroutineIndex
GLAD_API_CALL PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC sf_glad_glGetSubroutineUniformLocation;
#define glGetSubroutineUniformLocation sf_glad_glGetSubroutineUniformLocation
GLAD_API_CALL PFNGLGETSYNCIVPROC sf_glad_glGetSynciv;
#define glGetSynciv sf_glad_glGetSynciv
GLAD_API_CALL PFNGLGETTEXIMAGEPROC sf_glad_glGetTexImage;
#define glGetTexImage sf_glad_glGetTexImage
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERFVPROC sf_glad_glGetTexLevelParameterfv;
#define glGetTexLevelParameterfv sf_glad_glGetTexLevelParameterfv
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERIVPROC sf_glad_glGetTexLevelParameteriv;
#define glGetTexLevelParameteriv sf_glad_glGetTexLevelParameteriv
GLAD_API_CALL PFNGLGETTEXPARAMETERIIVPROC sf_glad_glGetTexParameterIiv;
#define glGetTexParameterIiv sf_glad_glGetTexParameterIiv
GLAD_API_CALL PFNGLGETTEXPARAMETERIIVEXTPROC sf_glad_glGetTexParameterIivEXT;
#define glGetTexParameterIivEXT sf_glad_glGetTexParameterIivEXT
GLAD_API_CALL PFNGLGETTEXPARAMETERIUIVPROC sf_glad_glGetTexParameterIuiv;
#define glGetTexParameterIuiv sf_glad_glGetTexParameterIuiv
GLAD_API_CALL PFNGLGETTEXPARAMETERIUIVEXTPROC sf_glad_glGetTexParameterIuivEXT;
#define glGetTexParameterIuivEXT sf_glad_glGetTexParameterIuivEXT
GLAD_API_CALL PFNGLGETTEXPARAMETERFVPROC sf_glad_glGetTexParameterfv;
#define glGetTexParameterfv sf_glad_glGetTexParameterfv
GLAD_API_CALL PFNGLGETTEXPARAMETERIVPROC sf_glad_glGetTexParameteriv;
#define glGetTexParameteriv sf_glad_glGetTexParameteriv
GLAD_API_CALL PFNGLGETTEXTUREIMAGEEXTPROC sf_glad_glGetTextureImageEXT;
#define glGetTextureImageEXT sf_glad_glGetTextureImageEXT
GLAD_API_CALL PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC sf_glad_glGetTextureLevelParameterfvEXT;
#define glGetTextureLevelParameterfvEXT sf_glad_glGetTextureLevelParameterfvEXT
GLAD_API_CALL PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC sf_glad_glGetTextureLevelParameterivEXT;
#define glGetTextureLevelParameterivEXT sf_glad_glGetTextureLevelParameterivEXT
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIIVEXTPROC sf_glad_glGetTextureParameterIivEXT;
#define glGetTextureParameterIivEXT sf_glad_glGetTextureParameterIivEXT
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIUIVEXTPROC sf_glad_glGetTextureParameterIuivEXT;
#define glGetTextureParameterIuivEXT sf_glad_glGetTextureParameterIuivEXT
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERFVEXTPROC sf_glad_glGetTextureParameterfvEXT;
#define glGetTextureParameterfvEXT sf_glad_glGetTextureParameterfvEXT
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIVEXTPROC sf_glad_glGetTextureParameterivEXT;
#define glGetTextureParameterivEXT sf_glad_glGetTextureParameterivEXT
GLAD_API_CALL PFNGLGETTRACKMATRIXIVNVPROC sf_glad_glGetTrackMatrixivNV;
#define glGetTrackMatrixivNV sf_glad_glGetTrackMatrixivNV
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKVARYINGPROC sf_glad_glGetTransformFeedbackVarying;
#define glGetTransformFeedbackVarying sf_glad_glGetTransformFeedbackVarying
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC sf_glad_glGetTransformFeedbackVaryingEXT;
#define glGetTransformFeedbackVaryingEXT sf_glad_glGetTransformFeedbackVaryingEXT
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC sf_glad_glGetTransformFeedbackVaryingNV;
#define glGetTransformFeedbackVaryingNV sf_glad_glGetTransformFeedbackVaryingNV
GLAD_API_CALL PFNGLGETUNIFORMBLOCKINDEXPROC sf_glad_glGetUniformBlockIndex;
#define glGetUniformBlockIndex sf_glad_glGetUniformBlockIndex
GLAD_API_CALL PFNGLGETUNIFORMINDICESPROC sf_glad_glGetUniformIndices;
#define glGetUniformIndices sf_glad_glGetUniformIndices
GLAD_API_CALL PFNGLGETUNIFORMLOCATIONPROC sf_glad_glGetUniformLocation;
#define glGetUniformLocation sf_glad_glGetUniformLocation
GLAD_API_CALL PFNGLGETUNIFORMLOCATIONARBPROC sf_glad_glGetUniformLocationARB;
#define glGetUniformLocationARB sf_glad_glGetUniformLocationARB
GLAD_API_CALL PFNGLGETUNIFORMSUBROUTINEUIVPROC sf_glad_glGetUniformSubroutineuiv;
#define glGetUniformSubroutineuiv sf_glad_glGetUniformSubroutineuiv
GLAD_API_CALL PFNGLGETUNIFORMDVPROC sf_glad_glGetUniformdv;
#define glGetUniformdv sf_glad_glGetUniformdv
GLAD_API_CALL PFNGLGETUNIFORMFVPROC sf_glad_glGetUniformfv;
#define glGetUniformfv sf_glad_glGetUniformfv
GLAD_API_CALL PFNGLGETUNIFORMFVARBPROC sf_glad_glGetUniformfvARB;
#define glGetUniformfvARB sf_glad_glGetUniformfvARB
GLAD_API_CALL PFNGLGETUNIFORMIVPROC sf_glad_glGetUniformiv;
#define glGetUniformiv sf_glad_glGetUniformiv
GLAD_API_CALL PFNGLGETUNIFORMIVARBPROC sf_glad_glGetUniformivARB;
#define glGetUniformivARB sf_glad_glGetUniformivARB
GLAD_API_CALL PFNGLGETUNIFORMUIVPROC sf_glad_glGetUniformuiv;
#define glGetUniformuiv sf_glad_glGetUniformuiv
GLAD_API_CALL PFNGLGETUNIFORMUIVEXTPROC sf_glad_glGetUniformuivEXT;
#define glGetUniformuivEXT sf_glad_glGetUniformuivEXT
GLAD_API_CALL PFNGLGETVARYINGLOCATIONNVPROC sf_glad_glGetVaryingLocationNV;
#define glGetVaryingLocationNV sf_glad_glGetVaryingLocationNV
GLAD_API_CALL PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC sf_glad_glGetVertexArrayIntegeri_vEXT;
#define glGetVertexArrayIntegeri_vEXT sf_glad_glGetVertexArrayIntegeri_vEXT
GLAD_API_CALL PFNGLGETVERTEXARRAYINTEGERVEXTPROC sf_glad_glGetVertexArrayIntegervEXT;
#define glGetVertexArrayIntegervEXT sf_glad_glGetVertexArrayIntegervEXT
GLAD_API_CALL PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC sf_glad_glGetVertexArrayPointeri_vEXT;
#define glGetVertexArrayPointeri_vEXT sf_glad_glGetVertexArrayPointeri_vEXT
GLAD_API_CALL PFNGLGETVERTEXARRAYPOINTERVEXTPROC sf_glad_glGetVertexArrayPointervEXT;
#define glGetVertexArrayPointervEXT sf_glad_glGetVertexArrayPointervEXT
GLAD_API_CALL PFNGLGETVERTEXATTRIBIIVPROC sf_glad_glGetVertexAttribIiv;
#define glGetVertexAttribIiv sf_glad_glGetVertexAttribIiv
GLAD_API_CALL PFNGLGETVERTEXATTRIBIIVEXTPROC sf_glad_glGetVertexAttribIivEXT;
#define glGetVertexAttribIivEXT sf_glad_glGetVertexAttribIivEXT
GLAD_API_CALL PFNGLGETVERTEXATTRIBIUIVPROC sf_glad_glGetVertexAttribIuiv;
#define glGetVertexAttribIuiv sf_glad_glGetVertexAttribIuiv
GLAD_API_CALL PFNGLGETVERTEXATTRIBIUIVEXTPROC sf_glad_glGetVertexAttribIuivEXT;
#define glGetVertexAttribIuivEXT sf_glad_glGetVertexAttribIuivEXT
GLAD_API_CALL PFNGLGETVERTEXATTRIBLDVPROC sf_glad_glGetVertexAttribLdv;
#define glGetVertexAttribLdv sf_glad_glGetVertexAttribLdv
GLAD_API_CALL PFNGLGETVERTEXATTRIBLDVEXTPROC sf_glad_glGetVertexAttribLdvEXT;
#define glGetVertexAttribLdvEXT sf_glad_glGetVertexAttribLdvEXT
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVPROC sf_glad_glGetVertexAttribPointerv;
#define glGetVertexAttribPointerv sf_glad_glGetVertexAttribPointerv
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVARBPROC sf_glad_glGetVertexAttribPointervARB;
#define glGetVertexAttribPointervARB sf_glad_glGetVertexAttribPointervARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVNVPROC sf_glad_glGetVertexAttribPointervNV;
#define glGetVertexAttribPointervNV sf_glad_glGetVertexAttribPointervNV
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVPROC sf_glad_glGetVertexAttribdv;
#define glGetVertexAttribdv sf_glad_glGetVertexAttribdv
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVARBPROC sf_glad_glGetVertexAttribdvARB;
#define glGetVertexAttribdvARB sf_glad_glGetVertexAttribdvARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVNVPROC sf_glad_glGetVertexAttribdvNV;
#define glGetVertexAttribdvNV sf_glad_glGetVertexAttribdvNV
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVPROC sf_glad_glGetVertexAttribfv;
#define glGetVertexAttribfv sf_glad_glGetVertexAttribfv
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVARBPROC sf_glad_glGetVertexAttribfvARB;
#define glGetVertexAttribfvARB sf_glad_glGetVertexAttribfvARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVNVPROC sf_glad_glGetVertexAttribfvNV;
#define glGetVertexAttribfvNV sf_glad_glGetVertexAttribfvNV
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVPROC sf_glad_glGetVertexAttribiv;
#define glGetVertexAttribiv sf_glad_glGetVertexAttribiv
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVARBPROC sf_glad_glGetVertexAttribivARB;
#define glGetVertexAttribivARB sf_glad_glGetVertexAttribivARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVNVPROC sf_glad_glGetVertexAttribivNV;
#define glGetVertexAttribivNV sf_glad_glGetVertexAttribivNV
GLAD_API_CALL PFNGLHINTPROC sf_glad_glHint;
#define glHint sf_glad_glHint
GLAD_API_CALL PFNGLINDEXPOINTEREXTPROC sf_glad_glIndexPointerEXT;
#define glIndexPointerEXT sf_glad_glIndexPointerEXT
GLAD_API_CALL PFNGLISBUFFERPROC sf_glad_glIsBuffer;
#define glIsBuffer sf_glad_glIsBuffer
GLAD_API_CALL PFNGLISBUFFERARBPROC sf_glad_glIsBufferARB;
#define glIsBufferARB sf_glad_glIsBufferARB
GLAD_API_CALL PFNGLISENABLEDPROC sf_glad_glIsEnabled;
#define glIsEnabled sf_glad_glIsEnabled
GLAD_API_CALL PFNGLISENABLEDINDEXEDEXTPROC sf_glad_glIsEnabledIndexedEXT;
#define glIsEnabledIndexedEXT sf_glad_glIsEnabledIndexedEXT
GLAD_API_CALL PFNGLISENABLEDIPROC sf_glad_glIsEnabledi;
#define glIsEnabledi sf_glad_glIsEnabledi
GLAD_API_CALL PFNGLISFRAMEBUFFERPROC sf_glad_glIsFramebuffer;
#define glIsFramebuffer sf_glad_glIsFramebuffer
GLAD_API_CALL PFNGLISFRAMEBUFFEREXTPROC sf_glad_glIsFramebufferEXT;
#define glIsFramebufferEXT sf_glad_glIsFramebufferEXT
GLAD_API_CALL PFNGLISPROGRAMPROC sf_glad_glIsProgram;
#define glIsProgram sf_glad_glIsProgram
GLAD_API_CALL PFNGLISPROGRAMARBPROC sf_glad_glIsProgramARB;
#define glIsProgramARB sf_glad_glIsProgramARB
GLAD_API_CALL PFNGLISPROGRAMNVPROC sf_glad_glIsProgramNV;
#define glIsProgramNV sf_glad_glIsProgramNV
GLAD_API_CALL PFNGLISPROGRAMPIPELINEPROC sf_glad_glIsProgramPipeline;
#define glIsProgramPipeline sf_glad_glIsProgramPipeline
GLAD_API_CALL PFNGLISQUERYPROC sf_glad_glIsQuery;
#define glIsQuery sf_glad_glIsQuery
GLAD_API_CALL PFNGLISQUERYARBPROC sf_glad_glIsQueryARB;
#define glIsQueryARB sf_glad_glIsQueryARB
GLAD_API_CALL PFNGLISRENDERBUFFERPROC sf_glad_glIsRenderbuffer;
#define glIsRenderbuffer sf_glad_glIsRenderbuffer
GLAD_API_CALL PFNGLISRENDERBUFFEREXTPROC sf_glad_glIsRenderbufferEXT;
#define glIsRenderbufferEXT sf_glad_glIsRenderbufferEXT
GLAD_API_CALL PFNGLISSAMPLERPROC sf_glad_glIsSampler;
#define glIsSampler sf_glad_glIsSampler
GLAD_API_CALL PFNGLISSHADERPROC sf_glad_glIsShader;
#define glIsShader sf_glad_glIsShader
GLAD_API_CALL PFNGLISSYNCPROC sf_glad_glIsSync;
#define glIsSync sf_glad_glIsSync
GLAD_API_CALL PFNGLISTEXTUREPROC sf_glad_glIsTexture;
#define glIsTexture sf_glad_glIsTexture
GLAD_API_CALL PFNGLISTEXTUREEXTPROC sf_glad_glIsTextureEXT;
#define glIsTextureEXT sf_glad_glIsTextureEXT
GLAD_API_CALL PFNGLISTRANSFORMFEEDBACKPROC sf_glad_glIsTransformFeedback;
#define glIsTransformFeedback sf_glad_glIsTransformFeedback
GLAD_API_CALL PFNGLISTRANSFORMFEEDBACKNVPROC sf_glad_glIsTransformFeedbackNV;
#define glIsTransformFeedbackNV sf_glad_glIsTransformFeedbackNV
GLAD_API_CALL PFNGLISVERTEXARRAYPROC sf_glad_glIsVertexArray;
#define glIsVertexArray sf_glad_glIsVertexArray
GLAD_API_CALL PFNGLISVERTEXARRAYAPPLEPROC sf_glad_glIsVertexArrayAPPLE;
#define glIsVertexArrayAPPLE sf_glad_glIsVertexArrayAPPLE
GLAD_API_CALL PFNGLLINEWIDTHPROC sf_glad_glLineWidth;
#define glLineWidth sf_glad_glLineWidth
GLAD_API_CALL PFNGLLINKPROGRAMPROC sf_glad_glLinkProgram;
#define glLinkProgram sf_glad_glLinkProgram
GLAD_API_CALL PFNGLLINKPROGRAMARBPROC sf_glad_glLinkProgramARB;
#define glLinkProgramARB sf_glad_glLinkProgramARB
GLAD_API_CALL PFNGLLOADPROGRAMNVPROC sf_glad_glLoadProgramNV;
#define glLoadProgramNV sf_glad_glLoadProgramNV
GLAD_API_CALL PFNGLLOGICOPPROC sf_glad_glLogicOp;
#define glLogicOp sf_glad_glLogicOp
GLAD_API_CALL PFNGLMAPBUFFERPROC sf_glad_glMapBuffer;
#define glMapBuffer sf_glad_glMapBuffer
GLAD_API_CALL PFNGLMAPBUFFERARBPROC sf_glad_glMapBufferARB;
#define glMapBufferARB sf_glad_glMapBufferARB
GLAD_API_CALL PFNGLMAPBUFFERRANGEPROC sf_glad_glMapBufferRange;
#define glMapBufferRange sf_glad_glMapBufferRange
GLAD_API_CALL PFNGLMAPNAMEDBUFFEREXTPROC sf_glad_glMapNamedBufferEXT;
#define glMapNamedBufferEXT sf_glad_glMapNamedBufferEXT
GLAD_API_CALL PFNGLMAPNAMEDBUFFERRANGEEXTPROC sf_glad_glMapNamedBufferRangeEXT;
#define glMapNamedBufferRangeEXT sf_glad_glMapNamedBufferRangeEXT
GLAD_API_CALL PFNGLMATRIXFRUSTUMEXTPROC sf_glad_glMatrixFrustumEXT;
#define glMatrixFrustumEXT sf_glad_glMatrixFrustumEXT
GLAD_API_CALL PFNGLMATRIXLOADIDENTITYEXTPROC sf_glad_glMatrixLoadIdentityEXT;
#define glMatrixLoadIdentityEXT sf_glad_glMatrixLoadIdentityEXT
GLAD_API_CALL PFNGLMATRIXLOADTRANSPOSEDEXTPROC sf_glad_glMatrixLoadTransposedEXT;
#define glMatrixLoadTransposedEXT sf_glad_glMatrixLoadTransposedEXT
GLAD_API_CALL PFNGLMATRIXLOADTRANSPOSEFEXTPROC sf_glad_glMatrixLoadTransposefEXT;
#define glMatrixLoadTransposefEXT sf_glad_glMatrixLoadTransposefEXT
GLAD_API_CALL PFNGLMATRIXLOADDEXTPROC sf_glad_glMatrixLoaddEXT;
#define glMatrixLoaddEXT sf_glad_glMatrixLoaddEXT
GLAD_API_CALL PFNGLMATRIXLOADFEXTPROC sf_glad_glMatrixLoadfEXT;
#define glMatrixLoadfEXT sf_glad_glMatrixLoadfEXT
GLAD_API_CALL PFNGLMATRIXMULTTRANSPOSEDEXTPROC sf_glad_glMatrixMultTransposedEXT;
#define glMatrixMultTransposedEXT sf_glad_glMatrixMultTransposedEXT
GLAD_API_CALL PFNGLMATRIXMULTTRANSPOSEFEXTPROC sf_glad_glMatrixMultTransposefEXT;
#define glMatrixMultTransposefEXT sf_glad_glMatrixMultTransposefEXT
GLAD_API_CALL PFNGLMATRIXMULTDEXTPROC sf_glad_glMatrixMultdEXT;
#define glMatrixMultdEXT sf_glad_glMatrixMultdEXT
GLAD_API_CALL PFNGLMATRIXMULTFEXTPROC sf_glad_glMatrixMultfEXT;
#define glMatrixMultfEXT sf_glad_glMatrixMultfEXT
GLAD_API_CALL PFNGLMATRIXORTHOEXTPROC sf_glad_glMatrixOrthoEXT;
#define glMatrixOrthoEXT sf_glad_glMatrixOrthoEXT
GLAD_API_CALL PFNGLMATRIXPOPEXTPROC sf_glad_glMatrixPopEXT;
#define glMatrixPopEXT sf_glad_glMatrixPopEXT
GLAD_API_CALL PFNGLMATRIXPUSHEXTPROC sf_glad_glMatrixPushEXT;
#define glMatrixPushEXT sf_glad_glMatrixPushEXT
GLAD_API_CALL PFNGLMATRIXROTATEDEXTPROC sf_glad_glMatrixRotatedEXT;
#define glMatrixRotatedEXT sf_glad_glMatrixRotatedEXT
GLAD_API_CALL PFNGLMATRIXROTATEFEXTPROC sf_glad_glMatrixRotatefEXT;
#define glMatrixRotatefEXT sf_glad_glMatrixRotatefEXT
GLAD_API_CALL PFNGLMATRIXSCALEDEXTPROC sf_glad_glMatrixScaledEXT;
#define glMatrixScaledEXT sf_glad_glMatrixScaledEXT
GLAD_API_CALL PFNGLMATRIXSCALEFEXTPROC sf_glad_glMatrixScalefEXT;
#define glMatrixScalefEXT sf_glad_glMatrixScalefEXT
GLAD_API_CALL PFNGLMATRIXTRANSLATEDEXTPROC sf_glad_glMatrixTranslatedEXT;
#define glMatrixTranslatedEXT sf_glad_glMatrixTranslatedEXT
GLAD_API_CALL PFNGLMATRIXTRANSLATEFEXTPROC sf_glad_glMatrixTranslatefEXT;
#define glMatrixTranslatefEXT sf_glad_glMatrixTranslatefEXT
GLAD_API_CALL PFNGLMINSAMPLESHADINGPROC sf_glad_glMinSampleShading;
#define glMinSampleShading sf_glad_glMinSampleShading
GLAD_API_CALL PFNGLMINSAMPLESHADINGARBPROC sf_glad_glMinSampleShadingARB;
#define glMinSampleShadingARB sf_glad_glMinSampleShadingARB
GLAD_API_CALL PFNGLMULTIDRAWARRAYSPROC sf_glad_glMultiDrawArrays;
#define glMultiDrawArrays sf_glad_glMultiDrawArrays
GLAD_API_CALL PFNGLMULTIDRAWARRAYSEXTPROC sf_glad_glMultiDrawArraysEXT;
#define glMultiDrawArraysEXT sf_glad_glMultiDrawArraysEXT
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSPROC sf_glad_glMultiDrawElements;
#define glMultiDrawElements sf_glad_glMultiDrawElements
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC sf_glad_glMultiDrawElementsBaseVertex;
#define glMultiDrawElementsBaseVertex sf_glad_glMultiDrawElementsBaseVertex
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSEXTPROC sf_glad_glMultiDrawElementsEXT;
#define glMultiDrawElementsEXT sf_glad_glMultiDrawElementsEXT
GLAD_API_CALL PFNGLMULTITEXBUFFEREXTPROC sf_glad_glMultiTexBufferEXT;
#define glMultiTexBufferEXT sf_glad_glMultiTexBufferEXT
GLAD_API_CALL PFNGLMULTITEXCOORD1DARBPROC sf_glad_glMultiTexCoord1dARB;
#define glMultiTexCoord1dARB sf_glad_glMultiTexCoord1dARB
GLAD_API_CALL PFNGLMULTITEXCOORD1DVARBPROC sf_glad_glMultiTexCoord1dvARB;
#define glMultiTexCoord1dvARB sf_glad_glMultiTexCoord1dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD1FARBPROC sf_glad_glMultiTexCoord1fARB;
#define glMultiTexCoord1fARB sf_glad_glMultiTexCoord1fARB
GLAD_API_CALL PFNGLMULTITEXCOORD1FVARBPROC sf_glad_glMultiTexCoord1fvARB;
#define glMultiTexCoord1fvARB sf_glad_glMultiTexCoord1fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD1IARBPROC sf_glad_glMultiTexCoord1iARB;
#define glMultiTexCoord1iARB sf_glad_glMultiTexCoord1iARB
GLAD_API_CALL PFNGLMULTITEXCOORD1IVARBPROC sf_glad_glMultiTexCoord1ivARB;
#define glMultiTexCoord1ivARB sf_glad_glMultiTexCoord1ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD1SARBPROC sf_glad_glMultiTexCoord1sARB;
#define glMultiTexCoord1sARB sf_glad_glMultiTexCoord1sARB
GLAD_API_CALL PFNGLMULTITEXCOORD1SVARBPROC sf_glad_glMultiTexCoord1svARB;
#define glMultiTexCoord1svARB sf_glad_glMultiTexCoord1svARB
GLAD_API_CALL PFNGLMULTITEXCOORD2DARBPROC sf_glad_glMultiTexCoord2dARB;
#define glMultiTexCoord2dARB sf_glad_glMultiTexCoord2dARB
GLAD_API_CALL PFNGLMULTITEXCOORD2DVARBPROC sf_glad_glMultiTexCoord2dvARB;
#define glMultiTexCoord2dvARB sf_glad_glMultiTexCoord2dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD2FARBPROC sf_glad_glMultiTexCoord2fARB;
#define glMultiTexCoord2fARB sf_glad_glMultiTexCoord2fARB
GLAD_API_CALL PFNGLMULTITEXCOORD2FVARBPROC sf_glad_glMultiTexCoord2fvARB;
#define glMultiTexCoord2fvARB sf_glad_glMultiTexCoord2fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD2IARBPROC sf_glad_glMultiTexCoord2iARB;
#define glMultiTexCoord2iARB sf_glad_glMultiTexCoord2iARB
GLAD_API_CALL PFNGLMULTITEXCOORD2IVARBPROC sf_glad_glMultiTexCoord2ivARB;
#define glMultiTexCoord2ivARB sf_glad_glMultiTexCoord2ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD2SARBPROC sf_glad_glMultiTexCoord2sARB;
#define glMultiTexCoord2sARB sf_glad_glMultiTexCoord2sARB
GLAD_API_CALL PFNGLMULTITEXCOORD2SVARBPROC sf_glad_glMultiTexCoord2svARB;
#define glMultiTexCoord2svARB sf_glad_glMultiTexCoord2svARB
GLAD_API_CALL PFNGLMULTITEXCOORD3DARBPROC sf_glad_glMultiTexCoord3dARB;
#define glMultiTexCoord3dARB sf_glad_glMultiTexCoord3dARB
GLAD_API_CALL PFNGLMULTITEXCOORD3DVARBPROC sf_glad_glMultiTexCoord3dvARB;
#define glMultiTexCoord3dvARB sf_glad_glMultiTexCoord3dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD3FARBPROC sf_glad_glMultiTexCoord3fARB;
#define glMultiTexCoord3fARB sf_glad_glMultiTexCoord3fARB
GLAD_API_CALL PFNGLMULTITEXCOORD3FVARBPROC sf_glad_glMultiTexCoord3fvARB;
#define glMultiTexCoord3fvARB sf_glad_glMultiTexCoord3fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD3IARBPROC sf_glad_glMultiTexCoord3iARB;
#define glMultiTexCoord3iARB sf_glad_glMultiTexCoord3iARB
GLAD_API_CALL PFNGLMULTITEXCOORD3IVARBPROC sf_glad_glMultiTexCoord3ivARB;
#define glMultiTexCoord3ivARB sf_glad_glMultiTexCoord3ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD3SARBPROC sf_glad_glMultiTexCoord3sARB;
#define glMultiTexCoord3sARB sf_glad_glMultiTexCoord3sARB
GLAD_API_CALL PFNGLMULTITEXCOORD3SVARBPROC sf_glad_glMultiTexCoord3svARB;
#define glMultiTexCoord3svARB sf_glad_glMultiTexCoord3svARB
GLAD_API_CALL PFNGLMULTITEXCOORD4DARBPROC sf_glad_glMultiTexCoord4dARB;
#define glMultiTexCoord4dARB sf_glad_glMultiTexCoord4dARB
GLAD_API_CALL PFNGLMULTITEXCOORD4DVARBPROC sf_glad_glMultiTexCoord4dvARB;
#define glMultiTexCoord4dvARB sf_glad_glMultiTexCoord4dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD4FARBPROC sf_glad_glMultiTexCoord4fARB;
#define glMultiTexCoord4fARB sf_glad_glMultiTexCoord4fARB
GLAD_API_CALL PFNGLMULTITEXCOORD4FVARBPROC sf_glad_glMultiTexCoord4fvARB;
#define glMultiTexCoord4fvARB sf_glad_glMultiTexCoord4fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD4IARBPROC sf_glad_glMultiTexCoord4iARB;
#define glMultiTexCoord4iARB sf_glad_glMultiTexCoord4iARB
GLAD_API_CALL PFNGLMULTITEXCOORD4IVARBPROC sf_glad_glMultiTexCoord4ivARB;
#define glMultiTexCoord4ivARB sf_glad_glMultiTexCoord4ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD4SARBPROC sf_glad_glMultiTexCoord4sARB;
#define glMultiTexCoord4sARB sf_glad_glMultiTexCoord4sARB
GLAD_API_CALL PFNGLMULTITEXCOORD4SVARBPROC sf_glad_glMultiTexCoord4svARB;
#define glMultiTexCoord4svARB sf_glad_glMultiTexCoord4svARB
GLAD_API_CALL PFNGLMULTITEXCOORDPOINTEREXTPROC sf_glad_glMultiTexCoordPointerEXT;
#define glMultiTexCoordPointerEXT sf_glad_glMultiTexCoordPointerEXT
GLAD_API_CALL PFNGLMULTITEXENVFEXTPROC sf_glad_glMultiTexEnvfEXT;
#define glMultiTexEnvfEXT sf_glad_glMultiTexEnvfEXT
GLAD_API_CALL PFNGLMULTITEXENVFVEXTPROC sf_glad_glMultiTexEnvfvEXT;
#define glMultiTexEnvfvEXT sf_glad_glMultiTexEnvfvEXT
GLAD_API_CALL PFNGLMULTITEXENVIEXTPROC sf_glad_glMultiTexEnviEXT;
#define glMultiTexEnviEXT sf_glad_glMultiTexEnviEXT
GLAD_API_CALL PFNGLMULTITEXENVIVEXTPROC sf_glad_glMultiTexEnvivEXT;
#define glMultiTexEnvivEXT sf_glad_glMultiTexEnvivEXT
GLAD_API_CALL PFNGLMULTITEXGENDEXTPROC sf_glad_glMultiTexGendEXT;
#define glMultiTexGendEXT sf_glad_glMultiTexGendEXT
GLAD_API_CALL PFNGLMULTITEXGENDVEXTPROC sf_glad_glMultiTexGendvEXT;
#define glMultiTexGendvEXT sf_glad_glMultiTexGendvEXT
GLAD_API_CALL PFNGLMULTITEXGENFEXTPROC sf_glad_glMultiTexGenfEXT;
#define glMultiTexGenfEXT sf_glad_glMultiTexGenfEXT
GLAD_API_CALL PFNGLMULTITEXGENFVEXTPROC sf_glad_glMultiTexGenfvEXT;
#define glMultiTexGenfvEXT sf_glad_glMultiTexGenfvEXT
GLAD_API_CALL PFNGLMULTITEXGENIEXTPROC sf_glad_glMultiTexGeniEXT;
#define glMultiTexGeniEXT sf_glad_glMultiTexGeniEXT
GLAD_API_CALL PFNGLMULTITEXGENIVEXTPROC sf_glad_glMultiTexGenivEXT;
#define glMultiTexGenivEXT sf_glad_glMultiTexGenivEXT
GLAD_API_CALL PFNGLMULTITEXIMAGE1DEXTPROC sf_glad_glMultiTexImage1DEXT;
#define glMultiTexImage1DEXT sf_glad_glMultiTexImage1DEXT
GLAD_API_CALL PFNGLMULTITEXIMAGE2DEXTPROC sf_glad_glMultiTexImage2DEXT;
#define glMultiTexImage2DEXT sf_glad_glMultiTexImage2DEXT
GLAD_API_CALL PFNGLMULTITEXIMAGE3DEXTPROC sf_glad_glMultiTexImage3DEXT;
#define glMultiTexImage3DEXT sf_glad_glMultiTexImage3DEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERIIVEXTPROC sf_glad_glMultiTexParameterIivEXT;
#define glMultiTexParameterIivEXT sf_glad_glMultiTexParameterIivEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERIUIVEXTPROC sf_glad_glMultiTexParameterIuivEXT;
#define glMultiTexParameterIuivEXT sf_glad_glMultiTexParameterIuivEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERFEXTPROC sf_glad_glMultiTexParameterfEXT;
#define glMultiTexParameterfEXT sf_glad_glMultiTexParameterfEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERFVEXTPROC sf_glad_glMultiTexParameterfvEXT;
#define glMultiTexParameterfvEXT sf_glad_glMultiTexParameterfvEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERIEXTPROC sf_glad_glMultiTexParameteriEXT;
#define glMultiTexParameteriEXT sf_glad_glMultiTexParameteriEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERIVEXTPROC sf_glad_glMultiTexParameterivEXT;
#define glMultiTexParameterivEXT sf_glad_glMultiTexParameterivEXT
GLAD_API_CALL PFNGLMULTITEXRENDERBUFFEREXTPROC sf_glad_glMultiTexRenderbufferEXT;
#define glMultiTexRenderbufferEXT sf_glad_glMultiTexRenderbufferEXT
GLAD_API_CALL PFNGLMULTITEXSUBIMAGE1DEXTPROC sf_glad_glMultiTexSubImage1DEXT;
#define glMultiTexSubImage1DEXT sf_glad_glMultiTexSubImage1DEXT
GLAD_API_CALL PFNGLMULTITEXSUBIMAGE2DEXTPROC sf_glad_glMultiTexSubImage2DEXT;
#define glMultiTexSubImage2DEXT sf_glad_glMultiTexSubImage2DEXT
GLAD_API_CALL PFNGLMULTITEXSUBIMAGE3DEXTPROC sf_glad_glMultiTexSubImage3DEXT;
#define glMultiTexSubImage3DEXT sf_glad_glMultiTexSubImage3DEXT
GLAD_API_CALL PFNGLNAMEDBUFFERDATAEXTPROC sf_glad_glNamedBufferDataEXT;
#define glNamedBufferDataEXT sf_glad_glNamedBufferDataEXT
GLAD_API_CALL PFNGLNAMEDBUFFERSTORAGEEXTPROC sf_glad_glNamedBufferStorageEXT;
#define glNamedBufferStorageEXT sf_glad_glNamedBufferStorageEXT
GLAD_API_CALL PFNGLNAMEDBUFFERSUBDATAEXTPROC sf_glad_glNamedBufferSubDataEXT;
#define glNamedBufferSubDataEXT sf_glad_glNamedBufferSubDataEXT
GLAD_API_CALL PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC sf_glad_glNamedCopyBufferSubDataEXT;
#define glNamedCopyBufferSubDataEXT sf_glad_glNamedCopyBufferSubDataEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC sf_glad_glNamedFramebufferParameteriEXT;
#define glNamedFramebufferParameteriEXT sf_glad_glNamedFramebufferParameteriEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC sf_glad_glNamedFramebufferRenderbufferEXT;
#define glNamedFramebufferRenderbufferEXT sf_glad_glNamedFramebufferRenderbufferEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC sf_glad_glNamedFramebufferTexture1DEXT;
#define glNamedFramebufferTexture1DEXT sf_glad_glNamedFramebufferTexture1DEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC sf_glad_glNamedFramebufferTexture2DEXT;
#define glNamedFramebufferTexture2DEXT sf_glad_glNamedFramebufferTexture2DEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC sf_glad_glNamedFramebufferTexture3DEXT;
#define glNamedFramebufferTexture3DEXT sf_glad_glNamedFramebufferTexture3DEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC sf_glad_glNamedFramebufferTextureEXT;
#define glNamedFramebufferTextureEXT sf_glad_glNamedFramebufferTextureEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC sf_glad_glNamedFramebufferTextureFaceEXT;
#define glNamedFramebufferTextureFaceEXT sf_glad_glNamedFramebufferTextureFaceEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC sf_glad_glNamedFramebufferTextureLayerEXT;
#define glNamedFramebufferTextureLayerEXT sf_glad_glNamedFramebufferTextureLayerEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC sf_glad_glNamedProgramLocalParameter4dEXT;
#define glNamedProgramLocalParameter4dEXT sf_glad_glNamedProgramLocalParameter4dEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC sf_glad_glNamedProgramLocalParameter4dvEXT;
#define glNamedProgramLocalParameter4dvEXT sf_glad_glNamedProgramLocalParameter4dvEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC sf_glad_glNamedProgramLocalParameter4fEXT;
#define glNamedProgramLocalParameter4fEXT sf_glad_glNamedProgramLocalParameter4fEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC sf_glad_glNamedProgramLocalParameter4fvEXT;
#define glNamedProgramLocalParameter4fvEXT sf_glad_glNamedProgramLocalParameter4fvEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC sf_glad_glNamedProgramLocalParameterI4iEXT;
#define glNamedProgramLocalParameterI4iEXT sf_glad_glNamedProgramLocalParameterI4iEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC sf_glad_glNamedProgramLocalParameterI4ivEXT;
#define glNamedProgramLocalParameterI4ivEXT sf_glad_glNamedProgramLocalParameterI4ivEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC sf_glad_glNamedProgramLocalParameterI4uiEXT;
#define glNamedProgramLocalParameterI4uiEXT sf_glad_glNamedProgramLocalParameterI4uiEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC sf_glad_glNamedProgramLocalParameterI4uivEXT;
#define glNamedProgramLocalParameterI4uivEXT sf_glad_glNamedProgramLocalParameterI4uivEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC sf_glad_glNamedProgramLocalParameters4fvEXT;
#define glNamedProgramLocalParameters4fvEXT sf_glad_glNamedProgramLocalParameters4fvEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC sf_glad_glNamedProgramLocalParametersI4ivEXT;
#define glNamedProgramLocalParametersI4ivEXT sf_glad_glNamedProgramLocalParametersI4ivEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC sf_glad_glNamedProgramLocalParametersI4uivEXT;
#define glNamedProgramLocalParametersI4uivEXT sf_glad_glNamedProgramLocalParametersI4uivEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMSTRINGEXTPROC sf_glad_glNamedProgramStringEXT;
#define glNamedProgramStringEXT sf_glad_glNamedProgramStringEXT
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC sf_glad_glNamedRenderbufferStorageEXT;
#define glNamedRenderbufferStorageEXT sf_glad_glNamedRenderbufferStorageEXT
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC sf_glad_glNamedRenderbufferStorageMultisampleCoverageEXT;
#define glNamedRenderbufferStorageMultisampleCoverageEXT sf_glad_glNamedRenderbufferStorageMultisampleCoverageEXT
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC sf_glad_glNamedRenderbufferStorageMultisampleEXT;
#define glNamedRenderbufferStorageMultisampleEXT sf_glad_glNamedRenderbufferStorageMultisampleEXT
GLAD_API_CALL PFNGLNORMALPOINTEREXTPROC sf_glad_glNormalPointerEXT;
#define glNormalPointerEXT sf_glad_glNormalPointerEXT
GLAD_API_CALL PFNGLORTHOFOESPROC sf_glad_glOrthofOES;
#define glOrthofOES sf_glad_glOrthofOES
GLAD_API_CALL PFNGLPATCHPARAMETERFVPROC sf_glad_glPatchParameterfv;
#define glPatchParameterfv sf_glad_glPatchParameterfv
GLAD_API_CALL PFNGLPATCHPARAMETERIPROC sf_glad_glPatchParameteri;
#define glPatchParameteri sf_glad_glPatchParameteri
GLAD_API_CALL PFNGLPAUSETRANSFORMFEEDBACKPROC sf_glad_glPauseTransformFeedback;
#define glPauseTransformFeedback sf_glad_glPauseTransformFeedback
GLAD_API_CALL PFNGLPAUSETRANSFORMFEEDBACKNVPROC sf_glad_glPauseTransformFeedbackNV;
#define glPauseTransformFeedbackNV sf_glad_glPauseTransformFeedbackNV
GLAD_API_CALL PFNGLPIXELSTOREFPROC sf_glad_glPixelStoref;
#define glPixelStoref sf_glad_glPixelStoref
GLAD_API_CALL PFNGLPIXELSTOREIPROC sf_glad_glPixelStorei;
#define glPixelStorei sf_glad_glPixelStorei
GLAD_API_CALL PFNGLPOINTPARAMETERFPROC sf_glad_glPointParameterf;
#define glPointParameterf sf_glad_glPointParameterf
GLAD_API_CALL PFNGLPOINTPARAMETERFARBPROC sf_glad_glPointParameterfARB;
#define glPointParameterfARB sf_glad_glPointParameterfARB
GLAD_API_CALL PFNGLPOINTPARAMETERFEXTPROC sf_glad_glPointParameterfEXT;
#define glPointParameterfEXT sf_glad_glPointParameterfEXT
GLAD_API_CALL PFNGLPOINTPARAMETERFSGISPROC sf_glad_glPointParameterfSGIS;
#define glPointParameterfSGIS sf_glad_glPointParameterfSGIS
GLAD_API_CALL PFNGLPOINTPARAMETERFVPROC sf_glad_glPointParameterfv;
#define glPointParameterfv sf_glad_glPointParameterfv
GLAD_API_CALL PFNGLPOINTPARAMETERFVARBPROC sf_glad_glPointParameterfvARB;
#define glPointParameterfvARB sf_glad_glPointParameterfvARB
GLAD_API_CALL PFNGLPOINTPARAMETERFVEXTPROC sf_glad_glPointParameterfvEXT;
#define glPointParameterfvEXT sf_glad_glPointParameterfvEXT
GLAD_API_CALL PFNGLPOINTPARAMETERFVSGISPROC sf_glad_glPointParameterfvSGIS;
#define glPointParameterfvSGIS sf_glad_glPointParameterfvSGIS
GLAD_API_CALL PFNGLPOINTPARAMETERIPROC sf_glad_glPointParameteri;
#define glPointParameteri sf_glad_glPointParameteri
GLAD_API_CALL PFNGLPOINTPARAMETERINVPROC sf_glad_glPointParameteriNV;
#define glPointParameteriNV sf_glad_glPointParameteriNV
GLAD_API_CALL PFNGLPOINTPARAMETERIVPROC sf_glad_glPointParameteriv;
#define glPointParameteriv sf_glad_glPointParameteriv
GLAD_API_CALL PFNGLPOINTPARAMETERIVNVPROC sf_glad_glPointParameterivNV;
#define glPointParameterivNV sf_glad_glPointParameterivNV
GLAD_API_CALL PFNGLPOINTSIZEPROC sf_glad_glPointSize;
#define glPointSize sf_glad_glPointSize
GLAD_API_CALL PFNGLPOLYGONMODEPROC sf_glad_glPolygonMode;
#define glPolygonMode sf_glad_glPolygonMode
GLAD_API_CALL PFNGLPOLYGONOFFSETPROC sf_glad_glPolygonOffset;
#define glPolygonOffset sf_glad_glPolygonOffset
GLAD_API_CALL PFNGLPRIMITIVERESTARTINDEXPROC sf_glad_glPrimitiveRestartIndex;
#define glPrimitiveRestartIndex sf_glad_glPrimitiveRestartIndex
GLAD_API_CALL PFNGLPRIORITIZETEXTURESEXTPROC sf_glad_glPrioritizeTexturesEXT;
#define glPrioritizeTexturesEXT sf_glad_glPrioritizeTexturesEXT
GLAD_API_CALL PFNGLPROGRAMBINARYPROC sf_glad_glProgramBinary;
#define glProgramBinary sf_glad_glProgramBinary
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4DARBPROC sf_glad_glProgramEnvParameter4dARB;
#define glProgramEnvParameter4dARB sf_glad_glProgramEnvParameter4dARB
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4DVARBPROC sf_glad_glProgramEnvParameter4dvARB;
#define glProgramEnvParameter4dvARB sf_glad_glProgramEnvParameter4dvARB
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4FARBPROC sf_glad_glProgramEnvParameter4fARB;
#define glProgramEnvParameter4fARB sf_glad_glProgramEnvParameter4fARB
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4FVARBPROC sf_glad_glProgramEnvParameter4fvARB;
#define glProgramEnvParameter4fvARB sf_glad_glProgramEnvParameter4fvARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4DARBPROC sf_glad_glProgramLocalParameter4dARB;
#define glProgramLocalParameter4dARB sf_glad_glProgramLocalParameter4dARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4DVARBPROC sf_glad_glProgramLocalParameter4dvARB;
#define glProgramLocalParameter4dvARB sf_glad_glProgramLocalParameter4dvARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4FARBPROC sf_glad_glProgramLocalParameter4fARB;
#define glProgramLocalParameter4fARB sf_glad_glProgramLocalParameter4fARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4FVARBPROC sf_glad_glProgramLocalParameter4fvARB;
#define glProgramLocalParameter4fvARB sf_glad_glProgramLocalParameter4fvARB
GLAD_API_CALL PFNGLPROGRAMPARAMETER4DNVPROC sf_glad_glProgramParameter4dNV;
#define glProgramParameter4dNV sf_glad_glProgramParameter4dNV
GLAD_API_CALL PFNGLPROGRAMPARAMETER4DVNVPROC sf_glad_glProgramParameter4dvNV;
#define glProgramParameter4dvNV sf_glad_glProgramParameter4dvNV
GLAD_API_CALL PFNGLPROGRAMPARAMETER4FNVPROC sf_glad_glProgramParameter4fNV;
#define glProgramParameter4fNV sf_glad_glProgramParameter4fNV
GLAD_API_CALL PFNGLPROGRAMPARAMETER4FVNVPROC sf_glad_glProgramParameter4fvNV;
#define glProgramParameter4fvNV sf_glad_glProgramParameter4fvNV
GLAD_API_CALL PFNGLPROGRAMPARAMETERIPROC sf_glad_glProgramParameteri;
#define glProgramParameteri sf_glad_glProgramParameteri
GLAD_API_CALL PFNGLPROGRAMPARAMETERIARBPROC sf_glad_glProgramParameteriARB;
#define glProgramParameteriARB sf_glad_glProgramParameteriARB
GLAD_API_CALL PFNGLPROGRAMPARAMETERIEXTPROC sf_glad_glProgramParameteriEXT;
#define glProgramParameteriEXT sf_glad_glProgramParameteriEXT
GLAD_API_CALL PFNGLPROGRAMPARAMETERS4DVNVPROC sf_glad_glProgramParameters4dvNV;
#define glProgramParameters4dvNV sf_glad_glProgramParameters4dvNV
GLAD_API_CALL PFNGLPROGRAMPARAMETERS4FVNVPROC sf_glad_glProgramParameters4fvNV;
#define glProgramParameters4fvNV sf_glad_glProgramParameters4fvNV
GLAD_API_CALL PFNGLPROGRAMSTRINGARBPROC sf_glad_glProgramStringARB;
#define glProgramStringARB sf_glad_glProgramStringARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DPROC sf_glad_glProgramUniform1d;
#define glProgramUniform1d sf_glad_glProgramUniform1d
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DEXTPROC sf_glad_glProgramUniform1dEXT;
#define glProgramUniform1dEXT sf_glad_glProgramUniform1dEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DVPROC sf_glad_glProgramUniform1dv;
#define glProgramUniform1dv sf_glad_glProgramUniform1dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DVEXTPROC sf_glad_glProgramUniform1dvEXT;
#define glProgramUniform1dvEXT sf_glad_glProgramUniform1dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FPROC sf_glad_glProgramUniform1f;
#define glProgramUniform1f sf_glad_glProgramUniform1f
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FEXTPROC sf_glad_glProgramUniform1fEXT;
#define glProgramUniform1fEXT sf_glad_glProgramUniform1fEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FVPROC sf_glad_glProgramUniform1fv;
#define glProgramUniform1fv sf_glad_glProgramUniform1fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FVEXTPROC sf_glad_glProgramUniform1fvEXT;
#define glProgramUniform1fvEXT sf_glad_glProgramUniform1fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IPROC sf_glad_glProgramUniform1i;
#define glProgramUniform1i sf_glad_glProgramUniform1i
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IEXTPROC sf_glad_glProgramUniform1iEXT;
#define glProgramUniform1iEXT sf_glad_glProgramUniform1iEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IVPROC sf_glad_glProgramUniform1iv;
#define glProgramUniform1iv sf_glad_glProgramUniform1iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IVEXTPROC sf_glad_glProgramUniform1ivEXT;
#define glProgramUniform1ivEXT sf_glad_glProgramUniform1ivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIPROC sf_glad_glProgramUniform1ui;
#define glProgramUniform1ui sf_glad_glProgramUniform1ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIEXTPROC sf_glad_glProgramUniform1uiEXT;
#define glProgramUniform1uiEXT sf_glad_glProgramUniform1uiEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIVPROC sf_glad_glProgramUniform1uiv;
#define glProgramUniform1uiv sf_glad_glProgramUniform1uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIVEXTPROC sf_glad_glProgramUniform1uivEXT;
#define glProgramUniform1uivEXT sf_glad_glProgramUniform1uivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DPROC sf_glad_glProgramUniform2d;
#define glProgramUniform2d sf_glad_glProgramUniform2d
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DEXTPROC sf_glad_glProgramUniform2dEXT;
#define glProgramUniform2dEXT sf_glad_glProgramUniform2dEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DVPROC sf_glad_glProgramUniform2dv;
#define glProgramUniform2dv sf_glad_glProgramUniform2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DVEXTPROC sf_glad_glProgramUniform2dvEXT;
#define glProgramUniform2dvEXT sf_glad_glProgramUniform2dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FPROC sf_glad_glProgramUniform2f;
#define glProgramUniform2f sf_glad_glProgramUniform2f
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FEXTPROC sf_glad_glProgramUniform2fEXT;
#define glProgramUniform2fEXT sf_glad_glProgramUniform2fEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FVPROC sf_glad_glProgramUniform2fv;
#define glProgramUniform2fv sf_glad_glProgramUniform2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FVEXTPROC sf_glad_glProgramUniform2fvEXT;
#define glProgramUniform2fvEXT sf_glad_glProgramUniform2fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IPROC sf_glad_glProgramUniform2i;
#define glProgramUniform2i sf_glad_glProgramUniform2i
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IEXTPROC sf_glad_glProgramUniform2iEXT;
#define glProgramUniform2iEXT sf_glad_glProgramUniform2iEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IVPROC sf_glad_glProgramUniform2iv;
#define glProgramUniform2iv sf_glad_glProgramUniform2iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IVEXTPROC sf_glad_glProgramUniform2ivEXT;
#define glProgramUniform2ivEXT sf_glad_glProgramUniform2ivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIPROC sf_glad_glProgramUniform2ui;
#define glProgramUniform2ui sf_glad_glProgramUniform2ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIEXTPROC sf_glad_glProgramUniform2uiEXT;
#define glProgramUniform2uiEXT sf_glad_glProgramUniform2uiEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIVPROC sf_glad_glProgramUniform2uiv;
#define glProgramUniform2uiv sf_glad_glProgramUniform2uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIVEXTPROC sf_glad_glProgramUniform2uivEXT;
#define glProgramUniform2uivEXT sf_glad_glProgramUniform2uivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DPROC sf_glad_glProgramUniform3d;
#define glProgramUniform3d sf_glad_glProgramUniform3d
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DEXTPROC sf_glad_glProgramUniform3dEXT;
#define glProgramUniform3dEXT sf_glad_glProgramUniform3dEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DVPROC sf_glad_glProgramUniform3dv;
#define glProgramUniform3dv sf_glad_glProgramUniform3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DVEXTPROC sf_glad_glProgramUniform3dvEXT;
#define glProgramUniform3dvEXT sf_glad_glProgramUniform3dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FPROC sf_glad_glProgramUniform3f;
#define glProgramUniform3f sf_glad_glProgramUniform3f
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FEXTPROC sf_glad_glProgramUniform3fEXT;
#define glProgramUniform3fEXT sf_glad_glProgramUniform3fEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FVPROC sf_glad_glProgramUniform3fv;
#define glProgramUniform3fv sf_glad_glProgramUniform3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FVEXTPROC sf_glad_glProgramUniform3fvEXT;
#define glProgramUniform3fvEXT sf_glad_glProgramUniform3fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IPROC sf_glad_glProgramUniform3i;
#define glProgramUniform3i sf_glad_glProgramUniform3i
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IEXTPROC sf_glad_glProgramUniform3iEXT;
#define glProgramUniform3iEXT sf_glad_glProgramUniform3iEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IVPROC sf_glad_glProgramUniform3iv;
#define glProgramUniform3iv sf_glad_glProgramUniform3iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IVEXTPROC sf_glad_glProgramUniform3ivEXT;
#define glProgramUniform3ivEXT sf_glad_glProgramUniform3ivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIPROC sf_glad_glProgramUniform3ui;
#define glProgramUniform3ui sf_glad_glProgramUniform3ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIEXTPROC sf_glad_glProgramUniform3uiEXT;
#define glProgramUniform3uiEXT sf_glad_glProgramUniform3uiEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIVPROC sf_glad_glProgramUniform3uiv;
#define glProgramUniform3uiv sf_glad_glProgramUniform3uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIVEXTPROC sf_glad_glProgramUniform3uivEXT;
#define glProgramUniform3uivEXT sf_glad_glProgramUniform3uivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DPROC sf_glad_glProgramUniform4d;
#define glProgramUniform4d sf_glad_glProgramUniform4d
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DEXTPROC sf_glad_glProgramUniform4dEXT;
#define glProgramUniform4dEXT sf_glad_glProgramUniform4dEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DVPROC sf_glad_glProgramUniform4dv;
#define glProgramUniform4dv sf_glad_glProgramUniform4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DVEXTPROC sf_glad_glProgramUniform4dvEXT;
#define glProgramUniform4dvEXT sf_glad_glProgramUniform4dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FPROC sf_glad_glProgramUniform4f;
#define glProgramUniform4f sf_glad_glProgramUniform4f
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FEXTPROC sf_glad_glProgramUniform4fEXT;
#define glProgramUniform4fEXT sf_glad_glProgramUniform4fEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FVPROC sf_glad_glProgramUniform4fv;
#define glProgramUniform4fv sf_glad_glProgramUniform4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FVEXTPROC sf_glad_glProgramUniform4fvEXT;
#define glProgramUniform4fvEXT sf_glad_glProgramUniform4fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IPROC sf_glad_glProgramUniform4i;
#define glProgramUniform4i sf_glad_glProgramUniform4i
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IEXTPROC sf_glad_glProgramUniform4iEXT;
#define glProgramUniform4iEXT sf_glad_glProgramUniform4iEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IVPROC sf_glad_glProgramUniform4iv;
#define glProgramUniform4iv sf_glad_glProgramUniform4iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IVEXTPROC sf_glad_glProgramUniform4ivEXT;
#define glProgramUniform4ivEXT sf_glad_glProgramUniform4ivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIPROC sf_glad_glProgramUniform4ui;
#define glProgramUniform4ui sf_glad_glProgramUniform4ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIEXTPROC sf_glad_glProgramUniform4uiEXT;
#define glProgramUniform4uiEXT sf_glad_glProgramUniform4uiEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIVPROC sf_glad_glProgramUniform4uiv;
#define glProgramUniform4uiv sf_glad_glProgramUniform4uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIVEXTPROC sf_glad_glProgramUniform4uivEXT;
#define glProgramUniform4uivEXT sf_glad_glProgramUniform4uivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2DVPROC sf_glad_glProgramUniformMatrix2dv;
#define glProgramUniformMatrix2dv sf_glad_glProgramUniformMatrix2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC sf_glad_glProgramUniformMatrix2dvEXT;
#define glProgramUniformMatrix2dvEXT sf_glad_glProgramUniformMatrix2dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2FVPROC sf_glad_glProgramUniformMatrix2fv;
#define glProgramUniformMatrix2fv sf_glad_glProgramUniformMatrix2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC sf_glad_glProgramUniformMatrix2fvEXT;
#define glProgramUniformMatrix2fvEXT sf_glad_glProgramUniformMatrix2fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC sf_glad_glProgramUniformMatrix2x3dv;
#define glProgramUniformMatrix2x3dv sf_glad_glProgramUniformMatrix2x3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC sf_glad_glProgramUniformMatrix2x3dvEXT;
#define glProgramUniformMatrix2x3dvEXT sf_glad_glProgramUniformMatrix2x3dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC sf_glad_glProgramUniformMatrix2x3fv;
#define glProgramUniformMatrix2x3fv sf_glad_glProgramUniformMatrix2x3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC sf_glad_glProgramUniformMatrix2x3fvEXT;
#define glProgramUniformMatrix2x3fvEXT sf_glad_glProgramUniformMatrix2x3fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC sf_glad_glProgramUniformMatrix2x4dv;
#define glProgramUniformMatrix2x4dv sf_glad_glProgramUniformMatrix2x4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC sf_glad_glProgramUniformMatrix2x4dvEXT;
#define glProgramUniformMatrix2x4dvEXT sf_glad_glProgramUniformMatrix2x4dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC sf_glad_glProgramUniformMatrix2x4fv;
#define glProgramUniformMatrix2x4fv sf_glad_glProgramUniformMatrix2x4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC sf_glad_glProgramUniformMatrix2x4fvEXT;
#define glProgramUniformMatrix2x4fvEXT sf_glad_glProgramUniformMatrix2x4fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3DVPROC sf_glad_glProgramUniformMatrix3dv;
#define glProgramUniformMatrix3dv sf_glad_glProgramUniformMatrix3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC sf_glad_glProgramUniformMatrix3dvEXT;
#define glProgramUniformMatrix3dvEXT sf_glad_glProgramUniformMatrix3dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3FVPROC sf_glad_glProgramUniformMatrix3fv;
#define glProgramUniformMatrix3fv sf_glad_glProgramUniformMatrix3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC sf_glad_glProgramUniformMatrix3fvEXT;
#define glProgramUniformMatrix3fvEXT sf_glad_glProgramUniformMatrix3fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC sf_glad_glProgramUniformMatrix3x2dv;
#define glProgramUniformMatrix3x2dv sf_glad_glProgramUniformMatrix3x2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC sf_glad_glProgramUniformMatrix3x2dvEXT;
#define glProgramUniformMatrix3x2dvEXT sf_glad_glProgramUniformMatrix3x2dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC sf_glad_glProgramUniformMatrix3x2fv;
#define glProgramUniformMatrix3x2fv sf_glad_glProgramUniformMatrix3x2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC sf_glad_glProgramUniformMatrix3x2fvEXT;
#define glProgramUniformMatrix3x2fvEXT sf_glad_glProgramUniformMatrix3x2fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC sf_glad_glProgramUniformMatrix3x4dv;
#define glProgramUniformMatrix3x4dv sf_glad_glProgramUniformMatrix3x4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC sf_glad_glProgramUniformMatrix3x4dvEXT;
#define glProgramUniformMatrix3x4dvEXT sf_glad_glProgramUniformMatrix3x4dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC sf_glad_glProgramUniformMatrix3x4fv;
#define glProgramUniformMatrix3x4fv sf_glad_glProgramUniformMatrix3x4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC sf_glad_glProgramUniformMatrix3x4fvEXT;
#define glProgramUniformMatrix3x4fvEXT sf_glad_glProgramUniformMatrix3x4fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4DVPROC sf_glad_glProgramUniformMatrix4dv;
#define glProgramUniformMatrix4dv sf_glad_glProgramUniformMatrix4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC sf_glad_glProgramUniformMatrix4dvEXT;
#define glProgramUniformMatrix4dvEXT sf_glad_glProgramUniformMatrix4dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4FVPROC sf_glad_glProgramUniformMatrix4fv;
#define glProgramUniformMatrix4fv sf_glad_glProgramUniformMatrix4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC sf_glad_glProgramUniformMatrix4fvEXT;
#define glProgramUniformMatrix4fvEXT sf_glad_glProgramUniformMatrix4fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC sf_glad_glProgramUniformMatrix4x2dv;
#define glProgramUniformMatrix4x2dv sf_glad_glProgramUniformMatrix4x2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC sf_glad_glProgramUniformMatrix4x2dvEXT;
#define glProgramUniformMatrix4x2dvEXT sf_glad_glProgramUniformMatrix4x2dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC sf_glad_glProgramUniformMatrix4x2fv;
#define glProgramUniformMatrix4x2fv sf_glad_glProgramUniformMatrix4x2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC sf_glad_glProgramUniformMatrix4x2fvEXT;
#define glProgramUniformMatrix4x2fvEXT sf_glad_glProgramUniformMatrix4x2fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC sf_glad_glProgramUniformMatrix4x3dv;
#define glProgramUniformMatrix4x3dv sf_glad_glProgramUniformMatrix4x3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC sf_glad_glProgramUniformMatrix4x3dvEXT;
#define glProgramUniformMatrix4x3dvEXT sf_glad_glProgramUniformMatrix4x3dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC sf_glad_glProgramUniformMatrix4x3fv;
#define glProgramUniformMatrix4x3fv sf_glad_glProgramUniformMatrix4x3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC sf_glad_glProgramUniformMatrix4x3fvEXT;
#define glProgramUniformMatrix4x3fvEXT sf_glad_glProgramUniformMatrix4x3fvEXT
GLAD_API_CALL PFNGLPROGRAMVERTEXLIMITNVPROC sf_glad_glProgramVertexLimitNV;
#define glProgramVertexLimitNV sf_glad_glProgramVertexLimitNV
GLAD_API_CALL PFNGLPROVOKINGVERTEXPROC sf_glad_glProvokingVertex;
#define glProvokingVertex sf_glad_glProvokingVertex
GLAD_API_CALL PFNGLPROVOKINGVERTEXEXTPROC sf_glad_glProvokingVertexEXT;
#define glProvokingVertexEXT sf_glad_glProvokingVertexEXT
GLAD_API_CALL PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC sf_glad_glPushClientAttribDefaultEXT;
#define glPushClientAttribDefaultEXT sf_glad_glPushClientAttribDefaultEXT
GLAD_API_CALL PFNGLQUERYCOUNTERPROC sf_glad_glQueryCounter;
#define glQueryCounter sf_glad_glQueryCounter
GLAD_API_CALL PFNGLREADBUFFERPROC sf_glad_glReadBuffer;
#define glReadBuffer sf_glad_glReadBuffer
GLAD_API_CALL PFNGLREADPIXELSPROC sf_glad_glReadPixels;
#define glReadPixels sf_glad_glReadPixels
GLAD_API_CALL PFNGLRELEASESHADERCOMPILERPROC sf_glad_glReleaseShaderCompiler;
#define glReleaseShaderCompiler sf_glad_glReleaseShaderCompiler
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEPROC sf_glad_glRenderbufferStorage;
#define glRenderbufferStorage sf_glad_glRenderbufferStorage
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEEXTPROC sf_glad_glRenderbufferStorageEXT;
#define glRenderbufferStorageEXT sf_glad_glRenderbufferStorageEXT
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC sf_glad_glRenderbufferStorageMultisample;
#define glRenderbufferStorageMultisample sf_glad_glRenderbufferStorageMultisample
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC sf_glad_glRenderbufferStorageMultisampleEXT;
#define glRenderbufferStorageMultisampleEXT sf_glad_glRenderbufferStorageMultisampleEXT
GLAD_API_CALL PFNGLREQUESTRESIDENTPROGRAMSNVPROC sf_glad_glRequestResidentProgramsNV;
#define glRequestResidentProgramsNV sf_glad_glRequestResidentProgramsNV
GLAD_API_CALL PFNGLRESUMETRANSFORMFEEDBACKPROC sf_glad_glResumeTransformFeedback;
#define glResumeTransformFeedback sf_glad_glResumeTransformFeedback
GLAD_API_CALL PFNGLRESUMETRANSFORMFEEDBACKNVPROC sf_glad_glResumeTransformFeedbackNV;
#define glResumeTransformFeedbackNV sf_glad_glResumeTransformFeedbackNV
GLAD_API_CALL PFNGLSAMPLECOVERAGEPROC sf_glad_glSampleCoverage;
#define glSampleCoverage sf_glad_glSampleCoverage
GLAD_API_CALL PFNGLSAMPLECOVERAGEARBPROC sf_glad_glSampleCoverageARB;
#define glSampleCoverageARB sf_glad_glSampleCoverageARB
GLAD_API_CALL PFNGLSAMPLEMASKINDEXEDNVPROC sf_glad_glSampleMaskIndexedNV;
#define glSampleMaskIndexedNV sf_glad_glSampleMaskIndexedNV
GLAD_API_CALL PFNGLSAMPLEMASKIPROC sf_glad_glSampleMaski;
#define glSampleMaski sf_glad_glSampleMaski
GLAD_API_CALL PFNGLSAMPLERPARAMETERIIVPROC sf_glad_glSamplerParameterIiv;
#define glSamplerParameterIiv sf_glad_glSamplerParameterIiv
GLAD_API_CALL PFNGLSAMPLERPARAMETERIUIVPROC sf_glad_glSamplerParameterIuiv;
#define glSamplerParameterIuiv sf_glad_glSamplerParameterIuiv
GLAD_API_CALL PFNGLSAMPLERPARAMETERFPROC sf_glad_glSamplerParameterf;
#define glSamplerParameterf sf_glad_glSamplerParameterf
GLAD_API_CALL PFNGLSAMPLERPARAMETERFVPROC sf_glad_glSamplerParameterfv;
#define glSamplerParameterfv sf_glad_glSamplerParameterfv
GLAD_API_CALL PFNGLSAMPLERPARAMETERIPROC sf_glad_glSamplerParameteri;
#define glSamplerParameteri sf_glad_glSamplerParameteri
GLAD_API_CALL PFNGLSAMPLERPARAMETERIVPROC sf_glad_glSamplerParameteriv;
#define glSamplerParameteriv sf_glad_glSamplerParameteriv
GLAD_API_CALL PFNGLSCISSORPROC sf_glad_glScissor;
#define glScissor sf_glad_glScissor
GLAD_API_CALL PFNGLSCISSORARRAYVPROC sf_glad_glScissorArrayv;
#define glScissorArrayv sf_glad_glScissorArrayv
GLAD_API_CALL PFNGLSCISSORINDEXEDPROC sf_glad_glScissorIndexed;
#define glScissorIndexed sf_glad_glScissorIndexed
GLAD_API_CALL PFNGLSCISSORINDEXEDVPROC sf_glad_glScissorIndexedv;
#define glScissorIndexedv sf_glad_glScissorIndexedv
GLAD_API_CALL PFNGLSHADERBINARYPROC sf_glad_glShaderBinary;
#define glShaderBinary sf_glad_glShaderBinary
GLAD_API_CALL PFNGLSHADERSOURCEPROC sf_glad_glShaderSource;
#define glShaderSource sf_glad_glShaderSource
GLAD_API_CALL PFNGLSHADERSOURCEARBPROC sf_glad_glShaderSourceARB;
#define glShaderSourceARB sf_glad_glShaderSourceARB
GLAD_API_CALL PFNGLSTENCILFUNCPROC sf_glad_glStencilFunc;
#define glStencilFunc sf_glad_glStencilFunc
GLAD_API_CALL PFNGLSTENCILFUNCSEPARATEPROC sf_glad_glStencilFuncSeparate;
#define glStencilFuncSeparate sf_glad_glStencilFuncSeparate
GLAD_API_CALL PFNGLSTENCILFUNCSEPARATEATIPROC sf_glad_glStencilFuncSeparateATI;
#define glStencilFuncSeparateATI sf_glad_glStencilFuncSeparateATI
GLAD_API_CALL PFNGLSTENCILMASKPROC sf_glad_glStencilMask;
#define glStencilMask sf_glad_glStencilMask
GLAD_API_CALL PFNGLSTENCILMASKSEPARATEPROC sf_glad_glStencilMaskSeparate;
#define glStencilMaskSeparate sf_glad_glStencilMaskSeparate
GLAD_API_CALL PFNGLSTENCILOPPROC sf_glad_glStencilOp;
#define glStencilOp sf_glad_glStencilOp
GLAD_API_CALL PFNGLSTENCILOPSEPARATEPROC sf_glad_glStencilOpSeparate;
#define glStencilOpSeparate sf_glad_glStencilOpSeparate
GLAD_API_CALL PFNGLSTENCILOPSEPARATEATIPROC sf_glad_glStencilOpSeparateATI;
#define glStencilOpSeparateATI sf_glad_glStencilOpSeparateATI
GLAD_API_CALL PFNGLTEXBUFFERPROC sf_glad_glTexBuffer;
#define glTexBuffer sf_glad_glTexBuffer
GLAD_API_CALL PFNGLTEXBUFFERARBPROC sf_glad_glTexBufferARB;
#define glTexBufferARB sf_glad_glTexBufferARB
GLAD_API_CALL PFNGLTEXBUFFEREXTPROC sf_glad_glTexBufferEXT;
#define glTexBufferEXT sf_glad_glTexBufferEXT
GLAD_API_CALL PFNGLTEXCOORDPOINTEREXTPROC sf_glad_glTexCoordPointerEXT;
#define glTexCoordPointerEXT sf_glad_glTexCoordPointerEXT
GLAD_API_CALL PFNGLTEXIMAGE1DPROC sf_glad_glTexImage1D;
#define glTexImage1D sf_glad_glTexImage1D
GLAD_API_CALL PFNGLTEXIMAGE2DPROC sf_glad_glTexImage2D;
#define glTexImage2D sf_glad_glTexImage2D
GLAD_API_CALL PFNGLTEXIMAGE2DMULTISAMPLEPROC sf_glad_glTexImage2DMultisample;
#define glTexImage2DMultisample sf_glad_glTexImage2DMultisample
GLAD_API_CALL PFNGLTEXIMAGE3DPROC sf_glad_glTexImage3D;
#define glTexImage3D sf_glad_glTexImage3D
GLAD_API_CALL PFNGLTEXIMAGE3DEXTPROC sf_glad_glTexImage3DEXT;
#define glTexImage3DEXT sf_glad_glTexImage3DEXT
GLAD_API_CALL PFNGLTEXIMAGE3DMULTISAMPLEPROC sf_glad_glTexImage3DMultisample;
#define glTexImage3DMultisample sf_glad_glTexImage3DMultisample
GLAD_API_CALL PFNGLTEXPARAMETERIIVPROC sf_glad_glTexParameterIiv;
#define glTexParameterIiv sf_glad_glTexParameterIiv
GLAD_API_CALL PFNGLTEXPARAMETERIIVEXTPROC sf_glad_glTexParameterIivEXT;
#define glTexParameterIivEXT sf_glad_glTexParameterIivEXT
GLAD_API_CALL PFNGLTEXPARAMETERIUIVPROC sf_glad_glTexParameterIuiv;
#define glTexParameterIuiv sf_glad_glTexParameterIuiv
GLAD_API_CALL PFNGLTEXPARAMETERIUIVEXTPROC sf_glad_glTexParameterIuivEXT;
#define glTexParameterIuivEXT sf_glad_glTexParameterIuivEXT
GLAD_API_CALL PFNGLTEXPARAMETERFPROC sf_glad_glTexParameterf;
#define glTexParameterf sf_glad_glTexParameterf
GLAD_API_CALL PFNGLTEXPARAMETERFVPROC sf_glad_glTexParameterfv;
#define glTexParameterfv sf_glad_glTexParameterfv
GLAD_API_CALL PFNGLTEXPARAMETERIPROC sf_glad_glTexParameteri;
#define glTexParameteri sf_glad_glTexParameteri
GLAD_API_CALL PFNGLTEXPARAMETERIVPROC sf_glad_glTexParameteriv;
#define glTexParameteriv sf_glad_glTexParameteriv
GLAD_API_CALL PFNGLTEXRENDERBUFFERNVPROC sf_glad_glTexRenderbufferNV;
#define glTexRenderbufferNV sf_glad_glTexRenderbufferNV
GLAD_API_CALL PFNGLTEXSUBIMAGE1DPROC sf_glad_glTexSubImage1D;
#define glTexSubImage1D sf_glad_glTexSubImage1D
GLAD_API_CALL PFNGLTEXSUBIMAGE1DEXTPROC sf_glad_glTexSubImage1DEXT;
#define glTexSubImage1DEXT sf_glad_glTexSubImage1DEXT
GLAD_API_CALL PFNGLTEXSUBIMAGE2DPROC sf_glad_glTexSubImage2D;
#define glTexSubImage2D sf_glad_glTexSubImage2D
GLAD_API_CALL PFNGLTEXSUBIMAGE2DEXTPROC sf_glad_glTexSubImage2DEXT;
#define glTexSubImage2DEXT sf_glad_glTexSubImage2DEXT
GLAD_API_CALL PFNGLTEXSUBIMAGE3DPROC sf_glad_glTexSubImage3D;
#define glTexSubImage3D sf_glad_glTexSubImage3D
GLAD_API_CALL PFNGLTEXSUBIMAGE3DEXTPROC sf_glad_glTexSubImage3DEXT;
#define glTexSubImage3DEXT sf_glad_glTexSubImage3DEXT
GLAD_API_CALL PFNGLTEXTUREBUFFEREXTPROC sf_glad_glTextureBufferEXT;
#define glTextureBufferEXT sf_glad_glTextureBufferEXT
GLAD_API_CALL PFNGLTEXTUREBUFFERRANGEEXTPROC sf_glad_glTextureBufferRangeEXT;
#define glTextureBufferRangeEXT sf_glad_glTextureBufferRangeEXT
GLAD_API_CALL PFNGLTEXTUREIMAGE1DEXTPROC sf_glad_glTextureImage1DEXT;
#define glTextureImage1DEXT sf_glad_glTextureImage1DEXT
GLAD_API_CALL PFNGLTEXTUREIMAGE2DEXTPROC sf_glad_glTextureImage2DEXT;
#define glTextureImage2DEXT sf_glad_glTextureImage2DEXT
GLAD_API_CALL PFNGLTEXTUREIMAGE3DEXTPROC sf_glad_glTextureImage3DEXT;
#define glTextureImage3DEXT sf_glad_glTextureImage3DEXT
GLAD_API_CALL PFNGLTEXTUREPAGECOMMITMENTEXTPROC sf_glad_glTexturePageCommitmentEXT;
#define glTexturePageCommitmentEXT sf_glad_glTexturePageCommitmentEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERIIVEXTPROC sf_glad_glTextureParameterIivEXT;
#define glTextureParameterIivEXT sf_glad_glTextureParameterIivEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERIUIVEXTPROC sf_glad_glTextureParameterIuivEXT;
#define glTextureParameterIuivEXT sf_glad_glTextureParameterIuivEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERFEXTPROC sf_glad_glTextureParameterfEXT;
#define glTextureParameterfEXT sf_glad_glTextureParameterfEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERFVEXTPROC sf_glad_glTextureParameterfvEXT;
#define glTextureParameterfvEXT sf_glad_glTextureParameterfvEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERIEXTPROC sf_glad_glTextureParameteriEXT;
#define glTextureParameteriEXT sf_glad_glTextureParameteriEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERIVEXTPROC sf_glad_glTextureParameterivEXT;
#define glTextureParameterivEXT sf_glad_glTextureParameterivEXT
GLAD_API_CALL PFNGLTEXTURERENDERBUFFEREXTPROC sf_glad_glTextureRenderbufferEXT;
#define glTextureRenderbufferEXT sf_glad_glTextureRenderbufferEXT
GLAD_API_CALL PFNGLTEXTURESTORAGE1DEXTPROC sf_glad_glTextureStorage1DEXT;
#define glTextureStorage1DEXT sf_glad_glTextureStorage1DEXT
GLAD_API_CALL PFNGLTEXTURESTORAGE2DEXTPROC sf_glad_glTextureStorage2DEXT;
#define glTextureStorage2DEXT sf_glad_glTextureStorage2DEXT
GLAD_API_CALL PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC sf_glad_glTextureStorage2DMultisampleEXT;
#define glTextureStorage2DMultisampleEXT sf_glad_glTextureStorage2DMultisampleEXT
GLAD_API_CALL PFNGLTEXTURESTORAGE3DEXTPROC sf_glad_glTextureStorage3DEXT;
#define glTextureStorage3DEXT sf_glad_glTextureStorage3DEXT
GLAD_API_CALL PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC sf_glad_glTextureStorage3DMultisampleEXT;
#define glTextureStorage3DMultisampleEXT sf_glad_glTextureStorage3DMultisampleEXT
GLAD_API_CALL PFNGLTEXTURESUBIMAGE1DEXTPROC sf_glad_glTextureSubImage1DEXT;
#define glTextureSubImage1DEXT sf_glad_glTextureSubImage1DEXT
GLAD_API_CALL PFNGLTEXTURESUBIMAGE2DEXTPROC sf_glad_glTextureSubImage2DEXT;
#define glTextureSubImage2DEXT sf_glad_glTextureSubImage2DEXT
GLAD_API_CALL PFNGLTEXTURESUBIMAGE3DEXTPROC sf_glad_glTextureSubImage3DEXT;
#define glTextureSubImage3DEXT sf_glad_glTextureSubImage3DEXT
GLAD_API_CALL PFNGLTRACKMATRIXNVPROC sf_glad_glTrackMatrixNV;
#define glTrackMatrixNV sf_glad_glTrackMatrixNV
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC sf_glad_glTransformFeedbackAttribsNV;
#define glTransformFeedbackAttribsNV sf_glad_glTransformFeedbackAttribsNV
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC sf_glad_glTransformFeedbackStreamAttribsNV;
#define glTransformFeedbackStreamAttribsNV sf_glad_glTransformFeedbackStreamAttribsNV
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKVARYINGSPROC sf_glad_glTransformFeedbackVaryings;
#define glTransformFeedbackVaryings sf_glad_glTransformFeedbackVaryings
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC sf_glad_glTransformFeedbackVaryingsEXT;
#define glTransformFeedbackVaryingsEXT sf_glad_glTransformFeedbackVaryingsEXT
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC sf_glad_glTransformFeedbackVaryingsNV;
#define glTransformFeedbackVaryingsNV sf_glad_glTransformFeedbackVaryingsNV
GLAD_API_CALL PFNGLUNIFORM1DPROC sf_glad_glUniform1d;
#define glUniform1d sf_glad_glUniform1d
GLAD_API_CALL PFNGLUNIFORM1DVPROC sf_glad_glUniform1dv;
#define glUniform1dv sf_glad_glUniform1dv
GLAD_API_CALL PFNGLUNIFORM1FPROC sf_glad_glUniform1f;
#define glUniform1f sf_glad_glUniform1f
GLAD_API_CALL PFNGLUNIFORM1FARBPROC sf_glad_glUniform1fARB;
#define glUniform1fARB sf_glad_glUniform1fARB
GLAD_API_CALL PFNGLUNIFORM1FVPROC sf_glad_glUniform1fv;
#define glUniform1fv sf_glad_glUniform1fv
GLAD_API_CALL PFNGLUNIFORM1FVARBPROC sf_glad_glUniform1fvARB;
#define glUniform1fvARB sf_glad_glUniform1fvARB
GLAD_API_CALL PFNGLUNIFORM1IPROC sf_glad_glUniform1i;
#define glUniform1i sf_glad_glUniform1i
GLAD_API_CALL PFNGLUNIFORM1IARBPROC sf_glad_glUniform1iARB;
#define glUniform1iARB sf_glad_glUniform1iARB
GLAD_API_CALL PFNGLUNIFORM1IVPROC sf_glad_glUniform1iv;
#define glUniform1iv sf_glad_glUniform1iv
GLAD_API_CALL PFNGLUNIFORM1IVARBPROC sf_glad_glUniform1ivARB;
#define glUniform1ivARB sf_glad_glUniform1ivARB
GLAD_API_CALL PFNGLUNIFORM1UIPROC sf_glad_glUniform1ui;
#define glUniform1ui sf_glad_glUniform1ui
GLAD_API_CALL PFNGLUNIFORM1UIEXTPROC sf_glad_glUniform1uiEXT;
#define glUniform1uiEXT sf_glad_glUniform1uiEXT
GLAD_API_CALL PFNGLUNIFORM1UIVPROC sf_glad_glUniform1uiv;
#define glUniform1uiv sf_glad_glUniform1uiv
GLAD_API_CALL PFNGLUNIFORM1UIVEXTPROC sf_glad_glUniform1uivEXT;
#define glUniform1uivEXT sf_glad_glUniform1uivEXT
GLAD_API_CALL PFNGLUNIFORM2DPROC sf_glad_glUniform2d;
#define glUniform2d sf_glad_glUniform2d
GLAD_API_CALL PFNGLUNIFORM2DVPROC sf_glad_glUniform2dv;
#define glUniform2dv sf_glad_glUniform2dv
GLAD_API_CALL PFNGLUNIFORM2FPROC sf_glad_glUniform2f;
#define glUniform2f sf_glad_glUniform2f
GLAD_API_CALL PFNGLUNIFORM2FARBPROC sf_glad_glUniform2fARB;
#define glUniform2fARB sf_glad_glUniform2fARB
GLAD_API_CALL PFNGLUNIFORM2FVPROC sf_glad_glUniform2fv;
#define glUniform2fv sf_glad_glUniform2fv
GLAD_API_CALL PFNGLUNIFORM2FVARBPROC sf_glad_glUniform2fvARB;
#define glUniform2fvARB sf_glad_glUniform2fvARB
GLAD_API_CALL PFNGLUNIFORM2IPROC sf_glad_glUniform2i;
#define glUniform2i sf_glad_glUniform2i
GLAD_API_CALL PFNGLUNIFORM2IARBPROC sf_glad_glUniform2iARB;
#define glUniform2iARB sf_glad_glUniform2iARB
GLAD_API_CALL PFNGLUNIFORM2IVPROC sf_glad_glUniform2iv;
#define glUniform2iv sf_glad_glUniform2iv
GLAD_API_CALL PFNGLUNIFORM2IVARBPROC sf_glad_glUniform2ivARB;
#define glUniform2ivARB sf_glad_glUniform2ivARB
GLAD_API_CALL PFNGLUNIFORM2UIPROC sf_glad_glUniform2ui;
#define glUniform2ui sf_glad_glUniform2ui
GLAD_API_CALL PFNGLUNIFORM2UIEXTPROC sf_glad_glUniform2uiEXT;
#define glUniform2uiEXT sf_glad_glUniform2uiEXT
GLAD_API_CALL PFNGLUNIFORM2UIVPROC sf_glad_glUniform2uiv;
#define glUniform2uiv sf_glad_glUniform2uiv
GLAD_API_CALL PFNGLUNIFORM2UIVEXTPROC sf_glad_glUniform2uivEXT;
#define glUniform2uivEXT sf_glad_glUniform2uivEXT
GLAD_API_CALL PFNGLUNIFORM3DPROC sf_glad_glUniform3d;
#define glUniform3d sf_glad_glUniform3d
GLAD_API_CALL PFNGLUNIFORM3DVPROC sf_glad_glUniform3dv;
#define glUniform3dv sf_glad_glUniform3dv
GLAD_API_CALL PFNGLUNIFORM3FPROC sf_glad_glUniform3f;
#define glUniform3f sf_glad_glUniform3f
GLAD_API_CALL PFNGLUNIFORM3FARBPROC sf_glad_glUniform3fARB;
#define glUniform3fARB sf_glad_glUniform3fARB
GLAD_API_CALL PFNGLUNIFORM3FVPROC sf_glad_glUniform3fv;
#define glUniform3fv sf_glad_glUniform3fv
GLAD_API_CALL PFNGLUNIFORM3FVARBPROC sf_glad_glUniform3fvARB;
#define glUniform3fvARB sf_glad_glUniform3fvARB
GLAD_API_CALL PFNGLUNIFORM3IPROC sf_glad_glUniform3i;
#define glUniform3i sf_glad_glUniform3i
GLAD_API_CALL PFNGLUNIFORM3IARBPROC sf_glad_glUniform3iARB;
#define glUniform3iARB sf_glad_glUniform3iARB
GLAD_API_CALL PFNGLUNIFORM3IVPROC sf_glad_glUniform3iv;
#define glUniform3iv sf_glad_glUniform3iv
GLAD_API_CALL PFNGLUNIFORM3IVARBPROC sf_glad_glUniform3ivARB;
#define glUniform3ivARB sf_glad_glUniform3ivARB
GLAD_API_CALL PFNGLUNIFORM3UIPROC sf_glad_glUniform3ui;
#define glUniform3ui sf_glad_glUniform3ui
GLAD_API_CALL PFNGLUNIFORM3UIEXTPROC sf_glad_glUniform3uiEXT;
#define glUniform3uiEXT sf_glad_glUniform3uiEXT
GLAD_API_CALL PFNGLUNIFORM3UIVPROC sf_glad_glUniform3uiv;
#define glUniform3uiv sf_glad_glUniform3uiv
GLAD_API_CALL PFNGLUNIFORM3UIVEXTPROC sf_glad_glUniform3uivEXT;
#define glUniform3uivEXT sf_glad_glUniform3uivEXT
GLAD_API_CALL PFNGLUNIFORM4DPROC sf_glad_glUniform4d;
#define glUniform4d sf_glad_glUniform4d
GLAD_API_CALL PFNGLUNIFORM4DVPROC sf_glad_glUniform4dv;
#define glUniform4dv sf_glad_glUniform4dv
GLAD_API_CALL PFNGLUNIFORM4FPROC sf_glad_glUniform4f;
#define glUniform4f sf_glad_glUniform4f
GLAD_API_CALL PFNGLUNIFORM4FARBPROC sf_glad_glUniform4fARB;
#define glUniform4fARB sf_glad_glUniform4fARB
GLAD_API_CALL PFNGLUNIFORM4FVPROC sf_glad_glUniform4fv;
#define glUniform4fv sf_glad_glUniform4fv
GLAD_API_CALL PFNGLUNIFORM4FVARBPROC sf_glad_glUniform4fvARB;
#define glUniform4fvARB sf_glad_glUniform4fvARB
GLAD_API_CALL PFNGLUNIFORM4IPROC sf_glad_glUniform4i;
#define glUniform4i sf_glad_glUniform4i
GLAD_API_CALL PFNGLUNIFORM4IARBPROC sf_glad_glUniform4iARB;
#define glUniform4iARB sf_glad_glUniform4iARB
GLAD_API_CALL PFNGLUNIFORM4IVPROC sf_glad_glUniform4iv;
#define glUniform4iv sf_glad_glUniform4iv
GLAD_API_CALL PFNGLUNIFORM4IVARBPROC sf_glad_glUniform4ivARB;
#define glUniform4ivARB sf_glad_glUniform4ivARB
GLAD_API_CALL PFNGLUNIFORM4UIPROC sf_glad_glUniform4ui;
#define glUniform4ui sf_glad_glUniform4ui
GLAD_API_CALL PFNGLUNIFORM4UIEXTPROC sf_glad_glUniform4uiEXT;
#define glUniform4uiEXT sf_glad_glUniform4uiEXT
GLAD_API_CALL PFNGLUNIFORM4UIVPROC sf_glad_glUniform4uiv;
#define glUniform4uiv sf_glad_glUniform4uiv
GLAD_API_CALL PFNGLUNIFORM4UIVEXTPROC sf_glad_glUniform4uivEXT;
#define glUniform4uivEXT sf_glad_glUniform4uivEXT
GLAD_API_CALL PFNGLUNIFORMBLOCKBINDINGPROC sf_glad_glUniformBlockBinding;
#define glUniformBlockBinding sf_glad_glUniformBlockBinding
GLAD_API_CALL PFNGLUNIFORMMATRIX2DVPROC sf_glad_glUniformMatrix2dv;
#define glUniformMatrix2dv sf_glad_glUniformMatrix2dv
GLAD_API_CALL PFNGLUNIFORMMATRIX2FVPROC sf_glad_glUniformMatrix2fv;
#define glUniformMatrix2fv sf_glad_glUniformMatrix2fv
GLAD_API_CALL PFNGLUNIFORMMATRIX2FVARBPROC sf_glad_glUniformMatrix2fvARB;
#define glUniformMatrix2fvARB sf_glad_glUniformMatrix2fvARB
GLAD_API_CALL PFNGLUNIFORMMATRIX2X3DVPROC sf_glad_glUniformMatrix2x3dv;
#define glUniformMatrix2x3dv sf_glad_glUniformMatrix2x3dv
GLAD_API_CALL PFNGLUNIFORMMATRIX2X3FVPROC sf_glad_glUniformMatrix2x3fv;
#define glUniformMatrix2x3fv sf_glad_glUniformMatrix2x3fv
GLAD_API_CALL PFNGLUNIFORMMATRIX2X4DVPROC sf_glad_glUniformMatrix2x4dv;
#define glUniformMatrix2x4dv sf_glad_glUniformMatrix2x4dv
GLAD_API_CALL PFNGLUNIFORMMATRIX2X4FVPROC sf_glad_glUniformMatrix2x4fv;
#define glUniformMatrix2x4fv sf_glad_glUniformMatrix2x4fv
GLAD_API_CALL PFNGLUNIFORMMATRIX3DVPROC sf_glad_glUniformMatrix3dv;
#define glUniformMatrix3dv sf_glad_glUniformMatrix3dv
GLAD_API_CALL PFNGLUNIFORMMATRIX3FVPROC sf_glad_glUniformMatrix3fv;
#define glUniformMatrix3fv sf_glad_glUniformMatrix3fv
GLAD_API_CALL PFNGLUNIFORMMATRIX3FVARBPROC sf_glad_glUniformMatrix3fvARB;
#define glUniformMatrix3fvARB sf_glad_glUniformMatrix3fvARB
GLAD_API_CALL PFNGLUNIFORMMATRIX3X2DVPROC sf_glad_glUniformMatrix3x2dv;
#define glUniformMatrix3x2dv sf_glad_glUniformMatrix3x2dv
GLAD_API_CALL PFNGLUNIFORMMATRIX3X2FVPROC sf_glad_glUniformMatrix3x2fv;
#define glUniformMatrix3x2fv sf_glad_glUniformMatrix3x2fv
GLAD_API_CALL PFNGLUNIFORMMATRIX3X4DVPROC sf_glad_glUniformMatrix3x4dv;
#define glUniformMatrix3x4dv sf_glad_glUniformMatrix3x4dv
GLAD_API_CALL PFNGLUNIFORMMATRIX3X4FVPROC sf_glad_glUniformMatrix3x4fv;
#define glUniformMatrix3x4fv sf_glad_glUniformMatrix3x4fv
GLAD_API_CALL PFNGLUNIFORMMATRIX4DVPROC sf_glad_glUniformMatrix4dv;
#define glUniformMatrix4dv sf_glad_glUniformMatrix4dv
GLAD_API_CALL PFNGLUNIFORMMATRIX4FVPROC sf_glad_glUniformMatrix4fv;
#define glUniformMatrix4fv sf_glad_glUniformMatrix4fv
GLAD_API_CALL PFNGLUNIFORMMATRIX4FVARBPROC sf_glad_glUniformMatrix4fvARB;
#define glUniformMatrix4fvARB sf_glad_glUniformMatrix4fvARB
GLAD_API_CALL PFNGLUNIFORMMATRIX4X2DVPROC sf_glad_glUniformMatrix4x2dv;
#define glUniformMatrix4x2dv sf_glad_glUniformMatrix4x2dv
GLAD_API_CALL PFNGLUNIFORMMATRIX4X2FVPROC sf_glad_glUniformMatrix4x2fv;
#define glUniformMatrix4x2fv sf_glad_glUniformMatrix4x2fv
GLAD_API_CALL PFNGLUNIFORMMATRIX4X3DVPROC sf_glad_glUniformMatrix4x3dv;
#define glUniformMatrix4x3dv sf_glad_glUniformMatrix4x3dv
GLAD_API_CALL PFNGLUNIFORMMATRIX4X3FVPROC sf_glad_glUniformMatrix4x3fv;
#define glUniformMatrix4x3fv sf_glad_glUniformMatrix4x3fv
GLAD_API_CALL PFNGLUNIFORMSUBROUTINESUIVPROC sf_glad_glUniformSubroutinesuiv;
#define glUniformSubroutinesuiv sf_glad_glUniformSubroutinesuiv
GLAD_API_CALL PFNGLUNMAPBUFFERPROC sf_glad_glUnmapBuffer;
#define glUnmapBuffer sf_glad_glUnmapBuffer
GLAD_API_CALL PFNGLUNMAPBUFFERARBPROC sf_glad_glUnmapBufferARB;
#define glUnmapBufferARB sf_glad_glUnmapBufferARB
GLAD_API_CALL PFNGLUNMAPNAMEDBUFFEREXTPROC sf_glad_glUnmapNamedBufferEXT;
#define glUnmapNamedBufferEXT sf_glad_glUnmapNamedBufferEXT
GLAD_API_CALL PFNGLUSEPROGRAMPROC sf_glad_glUseProgram;
#define glUseProgram sf_glad_glUseProgram
GLAD_API_CALL PFNGLUSEPROGRAMOBJECTARBPROC sf_glad_glUseProgramObjectARB;
#define glUseProgramObjectARB sf_glad_glUseProgramObjectARB
GLAD_API_CALL PFNGLUSEPROGRAMSTAGESPROC sf_glad_glUseProgramStages;
#define glUseProgramStages sf_glad_glUseProgramStages
GLAD_API_CALL PFNGLVALIDATEPROGRAMPROC sf_glad_glValidateProgram;
#define glValidateProgram sf_glad_glValidateProgram
GLAD_API_CALL PFNGLVALIDATEPROGRAMARBPROC sf_glad_glValidateProgramARB;
#define glValidateProgramARB sf_glad_glValidateProgramARB
GLAD_API_CALL PFNGLVALIDATEPROGRAMPIPELINEPROC sf_glad_glValidateProgramPipeline;
#define glValidateProgramPipeline sf_glad_glValidateProgramPipeline
GLAD_API_CALL PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC sf_glad_glVertexArrayBindVertexBufferEXT;
#define glVertexArrayBindVertexBufferEXT sf_glad_glVertexArrayBindVertexBufferEXT
GLAD_API_CALL PFNGLVERTEXARRAYCOLOROFFSETEXTPROC sf_glad_glVertexArrayColorOffsetEXT;
#define glVertexArrayColorOffsetEXT sf_glad_glVertexArrayColorOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC sf_glad_glVertexArrayEdgeFlagOffsetEXT;
#define glVertexArrayEdgeFlagOffsetEXT sf_glad_glVertexArrayEdgeFlagOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC sf_glad_glVertexArrayFogCoordOffsetEXT;
#define glVertexArrayFogCoordOffsetEXT sf_glad_glVertexArrayFogCoordOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYINDEXOFFSETEXTPROC sf_glad_glVertexArrayIndexOffsetEXT;
#define glVertexArrayIndexOffsetEXT sf_glad_glVertexArrayIndexOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC sf_glad_glVertexArrayMultiTexCoordOffsetEXT;
#define glVertexArrayMultiTexCoordOffsetEXT sf_glad_glVertexArrayMultiTexCoordOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYNORMALOFFSETEXTPROC sf_glad_glVertexArrayNormalOffsetEXT;
#define glVertexArrayNormalOffsetEXT sf_glad_glVertexArrayNormalOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC sf_glad_glVertexArraySecondaryColorOffsetEXT;
#define glVertexArraySecondaryColorOffsetEXT sf_glad_glVertexArraySecondaryColorOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC sf_glad_glVertexArrayTexCoordOffsetEXT;
#define glVertexArrayTexCoordOffsetEXT sf_glad_glVertexArrayTexCoordOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC sf_glad_glVertexArrayVertexAttribBindingEXT;
#define glVertexArrayVertexAttribBindingEXT sf_glad_glVertexArrayVertexAttribBindingEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC sf_glad_glVertexArrayVertexAttribDivisorEXT;
#define glVertexArrayVertexAttribDivisorEXT sf_glad_glVertexArrayVertexAttribDivisorEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC sf_glad_glVertexArrayVertexAttribFormatEXT;
#define glVertexArrayVertexAttribFormatEXT sf_glad_glVertexArrayVertexAttribFormatEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC sf_glad_glVertexArrayVertexAttribIFormatEXT;
#define glVertexArrayVertexAttribIFormatEXT sf_glad_glVertexArrayVertexAttribIFormatEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC sf_glad_glVertexArrayVertexAttribIOffsetEXT;
#define glVertexArrayVertexAttribIOffsetEXT sf_glad_glVertexArrayVertexAttribIOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC sf_glad_glVertexArrayVertexAttribLFormatEXT;
#define glVertexArrayVertexAttribLFormatEXT sf_glad_glVertexArrayVertexAttribLFormatEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC sf_glad_glVertexArrayVertexAttribLOffsetEXT;
#define glVertexArrayVertexAttribLOffsetEXT sf_glad_glVertexArrayVertexAttribLOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC sf_glad_glVertexArrayVertexAttribOffsetEXT;
#define glVertexArrayVertexAttribOffsetEXT sf_glad_glVertexArrayVertexAttribOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC sf_glad_glVertexArrayVertexBindingDivisorEXT;
#define glVertexArrayVertexBindingDivisorEXT sf_glad_glVertexArrayVertexBindingDivisorEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC sf_glad_glVertexArrayVertexOffsetEXT;
#define glVertexArrayVertexOffsetEXT sf_glad_glVertexArrayVertexOffsetEXT
GLAD_API_CALL PFNGLVERTEXATTRIB1DPROC sf_glad_glVertexAttrib1d;
#define glVertexAttrib1d sf_glad_glVertexAttrib1d
GLAD_API_CALL PFNGLVERTEXATTRIB1DARBPROC sf_glad_glVertexAttrib1dARB;
#define glVertexAttrib1dARB sf_glad_glVertexAttrib1dARB
GLAD_API_CALL PFNGLVERTEXATTRIB1DNVPROC sf_glad_glVertexAttrib1dNV;
#define glVertexAttrib1dNV sf_glad_glVertexAttrib1dNV
GLAD_API_CALL PFNGLVERTEXATTRIB1DVPROC sf_glad_glVertexAttrib1dv;
#define glVertexAttrib1dv sf_glad_glVertexAttrib1dv
GLAD_API_CALL PFNGLVERTEXATTRIB1DVARBPROC sf_glad_glVertexAttrib1dvARB;
#define glVertexAttrib1dvARB sf_glad_glVertexAttrib1dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB1DVNVPROC sf_glad_glVertexAttrib1dvNV;
#define glVertexAttrib1dvNV sf_glad_glVertexAttrib1dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB1FPROC sf_glad_glVertexAttrib1f;
#define glVertexAttrib1f sf_glad_glVertexAttrib1f
GLAD_API_CALL PFNGLVERTEXATTRIB1FARBPROC sf_glad_glVertexAttrib1fARB;
#define glVertexAttrib1fARB sf_glad_glVertexAttrib1fARB
GLAD_API_CALL PFNGLVERTEXATTRIB1FNVPROC sf_glad_glVertexAttrib1fNV;
#define glVertexAttrib1fNV sf_glad_glVertexAttrib1fNV
GLAD_API_CALL PFNGLVERTEXATTRIB1FVPROC sf_glad_glVertexAttrib1fv;
#define glVertexAttrib1fv sf_glad_glVertexAttrib1fv
GLAD_API_CALL PFNGLVERTEXATTRIB1FVARBPROC sf_glad_glVertexAttrib1fvARB;
#define glVertexAttrib1fvARB sf_glad_glVertexAttrib1fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB1FVNVPROC sf_glad_glVertexAttrib1fvNV;
#define glVertexAttrib1fvNV sf_glad_glVertexAttrib1fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB1SPROC sf_glad_glVertexAttrib1s;
#define glVertexAttrib1s sf_glad_glVertexAttrib1s
GLAD_API_CALL PFNGLVERTEXATTRIB1SARBPROC sf_glad_glVertexAttrib1sARB;
#define glVertexAttrib1sARB sf_glad_glVertexAttrib1sARB
GLAD_API_CALL PFNGLVERTEXATTRIB1SNVPROC sf_glad_glVertexAttrib1sNV;
#define glVertexAttrib1sNV sf_glad_glVertexAttrib1sNV
GLAD_API_CALL PFNGLVERTEXATTRIB1SVPROC sf_glad_glVertexAttrib1sv;
#define glVertexAttrib1sv sf_glad_glVertexAttrib1sv
GLAD_API_CALL PFNGLVERTEXATTRIB1SVARBPROC sf_glad_glVertexAttrib1svARB;
#define glVertexAttrib1svARB sf_glad_glVertexAttrib1svARB
GLAD_API_CALL PFNGLVERTEXATTRIB1SVNVPROC sf_glad_glVertexAttrib1svNV;
#define glVertexAttrib1svNV sf_glad_glVertexAttrib1svNV
GLAD_API_CALL PFNGLVERTEXATTRIB2DPROC sf_glad_glVertexAttrib2d;
#define glVertexAttrib2d sf_glad_glVertexAttrib2d
GLAD_API_CALL PFNGLVERTEXATTRIB2DARBPROC sf_glad_glVertexAttrib2dARB;
#define glVertexAttrib2dARB sf_glad_glVertexAttrib2dARB
GLAD_API_CALL PFNGLVERTEXATTRIB2DNVPROC sf_glad_glVertexAttrib2dNV;
#define glVertexAttrib2dNV sf_glad_glVertexAttrib2dNV
GLAD_API_CALL PFNGLVERTEXATTRIB2DVPROC sf_glad_glVertexAttrib2dv;
#define glVertexAttrib2dv sf_glad_glVertexAttrib2dv
GLAD_API_CALL PFNGLVERTEXATTRIB2DVARBPROC sf_glad_glVertexAttrib2dvARB;
#define glVertexAttrib2dvARB sf_glad_glVertexAttrib2dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB2DVNVPROC sf_glad_glVertexAttrib2dvNV;
#define glVertexAttrib2dvNV sf_glad_glVertexAttrib2dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB2FPROC sf_glad_glVertexAttrib2f;
#define glVertexAttrib2f sf_glad_glVertexAttrib2f
GLAD_API_CALL PFNGLVERTEXATTRIB2FARBPROC sf_glad_glVertexAttrib2fARB;
#define glVertexAttrib2fARB sf_glad_glVertexAttrib2fARB
GLAD_API_CALL PFNGLVERTEXATTRIB2FNVPROC sf_glad_glVertexAttrib2fNV;
#define glVertexAttrib2fNV sf_glad_glVertexAttrib2fNV
GLAD_API_CALL PFNGLVERTEXATTRIB2FVPROC sf_glad_glVertexAttrib2fv;
#define glVertexAttrib2fv sf_glad_glVertexAttrib2fv
GLAD_API_CALL PFNGLVERTEXATTRIB2FVARBPROC sf_glad_glVertexAttrib2fvARB;
#define glVertexAttrib2fvARB sf_glad_glVertexAttrib2fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB2FVNVPROC sf_glad_glVertexAttrib2fvNV;
#define glVertexAttrib2fvNV sf_glad_glVertexAttrib2fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB2SPROC sf_glad_glVertexAttrib2s;
#define glVertexAttrib2s sf_glad_glVertexAttrib2s
GLAD_API_CALL PFNGLVERTEXATTRIB2SARBPROC sf_glad_glVertexAttrib2sARB;
#define glVertexAttrib2sARB sf_glad_glVertexAttrib2sARB
GLAD_API_CALL PFNGLVERTEXATTRIB2SNVPROC sf_glad_glVertexAttrib2sNV;
#define glVertexAttrib2sNV sf_glad_glVertexAttrib2sNV
GLAD_API_CALL PFNGLVERTEXATTRIB2SVPROC sf_glad_glVertexAttrib2sv;
#define glVertexAttrib2sv sf_glad_glVertexAttrib2sv
GLAD_API_CALL PFNGLVERTEXATTRIB2SVARBPROC sf_glad_glVertexAttrib2svARB;
#define glVertexAttrib2svARB sf_glad_glVertexAttrib2svARB
GLAD_API_CALL PFNGLVERTEXATTRIB2SVNVPROC sf_glad_glVertexAttrib2svNV;
#define glVertexAttrib2svNV sf_glad_glVertexAttrib2svNV
GLAD_API_CALL PFNGLVERTEXATTRIB3DPROC sf_glad_glVertexAttrib3d;
#define glVertexAttrib3d sf_glad_glVertexAttrib3d
GLAD_API_CALL PFNGLVERTEXATTRIB3DARBPROC sf_glad_glVertexAttrib3dARB;
#define glVertexAttrib3dARB sf_glad_glVertexAttrib3dARB
GLAD_API_CALL PFNGLVERTEXATTRIB3DNVPROC sf_glad_glVertexAttrib3dNV;
#define glVertexAttrib3dNV sf_glad_glVertexAttrib3dNV
GLAD_API_CALL PFNGLVERTEXATTRIB3DVPROC sf_glad_glVertexAttrib3dv;
#define glVertexAttrib3dv sf_glad_glVertexAttrib3dv
GLAD_API_CALL PFNGLVERTEXATTRIB3DVARBPROC sf_glad_glVertexAttrib3dvARB;
#define glVertexAttrib3dvARB sf_glad_glVertexAttrib3dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB3DVNVPROC sf_glad_glVertexAttrib3dvNV;
#define glVertexAttrib3dvNV sf_glad_glVertexAttrib3dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB3FPROC sf_glad_glVertexAttrib3f;
#define glVertexAttrib3f sf_glad_glVertexAttrib3f
GLAD_API_CALL PFNGLVERTEXATTRIB3FARBPROC sf_glad_glVertexAttrib3fARB;
#define glVertexAttrib3fARB sf_glad_glVertexAttrib3fARB
GLAD_API_CALL PFNGLVERTEXATTRIB3FNVPROC sf_glad_glVertexAttrib3fNV;
#define glVertexAttrib3fNV sf_glad_glVertexAttrib3fNV
GLAD_API_CALL PFNGLVERTEXATTRIB3FVPROC sf_glad_glVertexAttrib3fv;
#define glVertexAttrib3fv sf_glad_glVertexAttrib3fv
GLAD_API_CALL PFNGLVERTEXATTRIB3FVARBPROC sf_glad_glVertexAttrib3fvARB;
#define glVertexAttrib3fvARB sf_glad_glVertexAttrib3fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB3FVNVPROC sf_glad_glVertexAttrib3fvNV;
#define glVertexAttrib3fvNV sf_glad_glVertexAttrib3fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB3SPROC sf_glad_glVertexAttrib3s;
#define glVertexAttrib3s sf_glad_glVertexAttrib3s
GLAD_API_CALL PFNGLVERTEXATTRIB3SARBPROC sf_glad_glVertexAttrib3sARB;
#define glVertexAttrib3sARB sf_glad_glVertexAttrib3sARB
GLAD_API_CALL PFNGLVERTEXATTRIB3SNVPROC sf_glad_glVertexAttrib3sNV;
#define glVertexAttrib3sNV sf_glad_glVertexAttrib3sNV
GLAD_API_CALL PFNGLVERTEXATTRIB3SVPROC sf_glad_glVertexAttrib3sv;
#define glVertexAttrib3sv sf_glad_glVertexAttrib3sv
GLAD_API_CALL PFNGLVERTEXATTRIB3SVARBPROC sf_glad_glVertexAttrib3svARB;
#define glVertexAttrib3svARB sf_glad_glVertexAttrib3svARB
GLAD_API_CALL PFNGLVERTEXATTRIB3SVNVPROC sf_glad_glVertexAttrib3svNV;
#define glVertexAttrib3svNV sf_glad_glVertexAttrib3svNV
GLAD_API_CALL PFNGLVERTEXATTRIB4NBVPROC sf_glad_glVertexAttrib4Nbv;
#define glVertexAttrib4Nbv sf_glad_glVertexAttrib4Nbv
GLAD_API_CALL PFNGLVERTEXATTRIB4NBVARBPROC sf_glad_glVertexAttrib4NbvARB;
#define glVertexAttrib4NbvARB sf_glad_glVertexAttrib4NbvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NIVPROC sf_glad_glVertexAttrib4Niv;
#define glVertexAttrib4Niv sf_glad_glVertexAttrib4Niv
GLAD_API_CALL PFNGLVERTEXATTRIB4NIVARBPROC sf_glad_glVertexAttrib4NivARB;
#define glVertexAttrib4NivARB sf_glad_glVertexAttrib4NivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NSVPROC sf_glad_glVertexAttrib4Nsv;
#define glVertexAttrib4Nsv sf_glad_glVertexAttrib4Nsv
GLAD_API_CALL PFNGLVERTEXATTRIB4NSVARBPROC sf_glad_glVertexAttrib4NsvARB;
#define glVertexAttrib4NsvARB sf_glad_glVertexAttrib4NsvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBPROC sf_glad_glVertexAttrib4Nub;
#define glVertexAttrib4Nub sf_glad_glVertexAttrib4Nub
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBARBPROC sf_glad_glVertexAttrib4NubARB;
#define glVertexAttrib4NubARB sf_glad_glVertexAttrib4NubARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBVPROC sf_glad_glVertexAttrib4Nubv;
#define glVertexAttrib4Nubv sf_glad_glVertexAttrib4Nubv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBVARBPROC sf_glad_glVertexAttrib4NubvARB;
#define glVertexAttrib4NubvARB sf_glad_glVertexAttrib4NubvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUIVPROC sf_glad_glVertexAttrib4Nuiv;
#define glVertexAttrib4Nuiv sf_glad_glVertexAttrib4Nuiv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUIVARBPROC sf_glad_glVertexAttrib4NuivARB;
#define glVertexAttrib4NuivARB sf_glad_glVertexAttrib4NuivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUSVPROC sf_glad_glVertexAttrib4Nusv;
#define glVertexAttrib4Nusv sf_glad_glVertexAttrib4Nusv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUSVARBPROC sf_glad_glVertexAttrib4NusvARB;
#define glVertexAttrib4NusvARB sf_glad_glVertexAttrib4NusvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4BVPROC sf_glad_glVertexAttrib4bv;
#define glVertexAttrib4bv sf_glad_glVertexAttrib4bv
GLAD_API_CALL PFNGLVERTEXATTRIB4BVARBPROC sf_glad_glVertexAttrib4bvARB;
#define glVertexAttrib4bvARB sf_glad_glVertexAttrib4bvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4DPROC sf_glad_glVertexAttrib4d;
#define glVertexAttrib4d sf_glad_glVertexAttrib4d
GLAD_API_CALL PFNGLVERTEXATTRIB4DARBPROC sf_glad_glVertexAttrib4dARB;
#define glVertexAttrib4dARB sf_glad_glVertexAttrib4dARB
GLAD_API_CALL PFNGLVERTEXATTRIB4DNVPROC sf_glad_glVertexAttrib4dNV;
#define glVertexAttrib4dNV sf_glad_glVertexAttrib4dNV
GLAD_API_CALL PFNGLVERTEXATTRIB4DVPROC sf_glad_glVertexAttrib4dv;
#define glVertexAttrib4dv sf_glad_glVertexAttrib4dv
GLAD_API_CALL PFNGLVERTEXATTRIB4DVARBPROC sf_glad_glVertexAttrib4dvARB;
#define glVertexAttrib4dvARB sf_glad_glVertexAttrib4dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4DVNVPROC sf_glad_glVertexAttrib4dvNV;
#define glVertexAttrib4dvNV sf_glad_glVertexAttrib4dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB4FPROC sf_glad_glVertexAttrib4f;
#define glVertexAttrib4f sf_glad_glVertexAttrib4f
GLAD_API_CALL PFNGLVERTEXATTRIB4FARBPROC sf_glad_glVertexAttrib4fARB;
#define glVertexAttrib4fARB sf_glad_glVertexAttrib4fARB
GLAD_API_CALL PFNGLVERTEXATTRIB4FNVPROC sf_glad_glVertexAttrib4fNV;
#define glVertexAttrib4fNV sf_glad_glVertexAttrib4fNV
GLAD_API_CALL PFNGLVERTEXATTRIB4FVPROC sf_glad_glVertexAttrib4fv;
#define glVertexAttrib4fv sf_glad_glVertexAttrib4fv
GLAD_API_CALL PFNGLVERTEXATTRIB4FVARBPROC sf_glad_glVertexAttrib4fvARB;
#define glVertexAttrib4fvARB sf_glad_glVertexAttrib4fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4FVNVPROC sf_glad_glVertexAttrib4fvNV;
#define glVertexAttrib4fvNV sf_glad_glVertexAttrib4fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB4IVPROC sf_glad_glVertexAttrib4iv;
#define glVertexAttrib4iv sf_glad_glVertexAttrib4iv
GLAD_API_CALL PFNGLVERTEXATTRIB4IVARBPROC sf_glad_glVertexAttrib4ivARB;
#define glVertexAttrib4ivARB sf_glad_glVertexAttrib4ivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4SPROC sf_glad_glVertexAttrib4s;
#define glVertexAttrib4s sf_glad_glVertexAttrib4s
GLAD_API_CALL PFNGLVERTEXATTRIB4SARBPROC sf_glad_glVertexAttrib4sARB;
#define glVertexAttrib4sARB sf_glad_glVertexAttrib4sARB
GLAD_API_CALL PFNGLVERTEXATTRIB4SNVPROC sf_glad_glVertexAttrib4sNV;
#define glVertexAttrib4sNV sf_glad_glVertexAttrib4sNV
GLAD_API_CALL PFNGLVERTEXATTRIB4SVPROC sf_glad_glVertexAttrib4sv;
#define glVertexAttrib4sv sf_glad_glVertexAttrib4sv
GLAD_API_CALL PFNGLVERTEXATTRIB4SVARBPROC sf_glad_glVertexAttrib4svARB;
#define glVertexAttrib4svARB sf_glad_glVertexAttrib4svARB
GLAD_API_CALL PFNGLVERTEXATTRIB4SVNVPROC sf_glad_glVertexAttrib4svNV;
#define glVertexAttrib4svNV sf_glad_glVertexAttrib4svNV
GLAD_API_CALL PFNGLVERTEXATTRIB4UBNVPROC sf_glad_glVertexAttrib4ubNV;
#define glVertexAttrib4ubNV sf_glad_glVertexAttrib4ubNV
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVPROC sf_glad_glVertexAttrib4ubv;
#define glVertexAttrib4ubv sf_glad_glVertexAttrib4ubv
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVARBPROC sf_glad_glVertexAttrib4ubvARB;
#define glVertexAttrib4ubvARB sf_glad_glVertexAttrib4ubvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVNVPROC sf_glad_glVertexAttrib4ubvNV;
#define glVertexAttrib4ubvNV sf_glad_glVertexAttrib4ubvNV
GLAD_API_CALL PFNGLVERTEXATTRIB4UIVPROC sf_glad_glVertexAttrib4uiv;
#define glVertexAttrib4uiv sf_glad_glVertexAttrib4uiv
GLAD_API_CALL PFNGLVERTEXATTRIB4UIVARBPROC sf_glad_glVertexAttrib4uivARB;
#define glVertexAttrib4uivARB sf_glad_glVertexAttrib4uivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4USVPROC sf_glad_glVertexAttrib4usv;
#define glVertexAttrib4usv sf_glad_glVertexAttrib4usv
GLAD_API_CALL PFNGLVERTEXATTRIB4USVARBPROC sf_glad_glVertexAttrib4usvARB;
#define glVertexAttrib4usvARB sf_glad_glVertexAttrib4usvARB
GLAD_API_CALL PFNGLVERTEXATTRIBDIVISORPROC sf_glad_glVertexAttribDivisor;
#define glVertexAttribDivisor sf_glad_glVertexAttribDivisor
GLAD_API_CALL PFNGLVERTEXATTRIBDIVISORARBPROC sf_glad_glVertexAttribDivisorARB;
#define glVertexAttribDivisorARB sf_glad_glVertexAttribDivisorARB
GLAD_API_CALL PFNGLVERTEXATTRIBI1IPROC sf_glad_glVertexAttribI1i;
#define glVertexAttribI1i sf_glad_glVertexAttribI1i
GLAD_API_CALL PFNGLVERTEXATTRIBI1IEXTPROC sf_glad_glVertexAttribI1iEXT;
#define glVertexAttribI1iEXT sf_glad_glVertexAttribI1iEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI1IVPROC sf_glad_glVertexAttribI1iv;
#define glVertexAttribI1iv sf_glad_glVertexAttribI1iv
GLAD_API_CALL PFNGLVERTEXATTRIBI1IVEXTPROC sf_glad_glVertexAttribI1ivEXT;
#define glVertexAttribI1ivEXT sf_glad_glVertexAttribI1ivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIPROC sf_glad_glVertexAttribI1ui;
#define glVertexAttribI1ui sf_glad_glVertexAttribI1ui
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIEXTPROC sf_glad_glVertexAttribI1uiEXT;
#define glVertexAttribI1uiEXT sf_glad_glVertexAttribI1uiEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIVPROC sf_glad_glVertexAttribI1uiv;
#define glVertexAttribI1uiv sf_glad_glVertexAttribI1uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIVEXTPROC sf_glad_glVertexAttribI1uivEXT;
#define glVertexAttribI1uivEXT sf_glad_glVertexAttribI1uivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI2IPROC sf_glad_glVertexAttribI2i;
#define glVertexAttribI2i sf_glad_glVertexAttribI2i
GLAD_API_CALL PFNGLVERTEXATTRIBI2IEXTPROC sf_glad_glVertexAttribI2iEXT;
#define glVertexAttribI2iEXT sf_glad_glVertexAttribI2iEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI2IVPROC sf_glad_glVertexAttribI2iv;
#define glVertexAttribI2iv sf_glad_glVertexAttribI2iv
GLAD_API_CALL PFNGLVERTEXATTRIBI2IVEXTPROC sf_glad_glVertexAttribI2ivEXT;
#define glVertexAttribI2ivEXT sf_glad_glVertexAttribI2ivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIPROC sf_glad_glVertexAttribI2ui;
#define glVertexAttribI2ui sf_glad_glVertexAttribI2ui
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIEXTPROC sf_glad_glVertexAttribI2uiEXT;
#define glVertexAttribI2uiEXT sf_glad_glVertexAttribI2uiEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIVPROC sf_glad_glVertexAttribI2uiv;
#define glVertexAttribI2uiv sf_glad_glVertexAttribI2uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIVEXTPROC sf_glad_glVertexAttribI2uivEXT;
#define glVertexAttribI2uivEXT sf_glad_glVertexAttribI2uivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI3IPROC sf_glad_glVertexAttribI3i;
#define glVertexAttribI3i sf_glad_glVertexAttribI3i
GLAD_API_CALL PFNGLVERTEXATTRIBI3IEXTPROC sf_glad_glVertexAttribI3iEXT;
#define glVertexAttribI3iEXT sf_glad_glVertexAttribI3iEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI3IVPROC sf_glad_glVertexAttribI3iv;
#define glVertexAttribI3iv sf_glad_glVertexAttribI3iv
GLAD_API_CALL PFNGLVERTEXATTRIBI3IVEXTPROC sf_glad_glVertexAttribI3ivEXT;
#define glVertexAttribI3ivEXT sf_glad_glVertexAttribI3ivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIPROC sf_glad_glVertexAttribI3ui;
#define glVertexAttribI3ui sf_glad_glVertexAttribI3ui
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIEXTPROC sf_glad_glVertexAttribI3uiEXT;
#define glVertexAttribI3uiEXT sf_glad_glVertexAttribI3uiEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIVPROC sf_glad_glVertexAttribI3uiv;
#define glVertexAttribI3uiv sf_glad_glVertexAttribI3uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIVEXTPROC sf_glad_glVertexAttribI3uivEXT;
#define glVertexAttribI3uivEXT sf_glad_glVertexAttribI3uivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4BVPROC sf_glad_glVertexAttribI4bv;
#define glVertexAttribI4bv sf_glad_glVertexAttribI4bv
GLAD_API_CALL PFNGLVERTEXATTRIBI4BVEXTPROC sf_glad_glVertexAttribI4bvEXT;
#define glVertexAttribI4bvEXT sf_glad_glVertexAttribI4bvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4IPROC sf_glad_glVertexAttribI4i;
#define glVertexAttribI4i sf_glad_glVertexAttribI4i
GLAD_API_CALL PFNGLVERTEXATTRIBI4IEXTPROC sf_glad_glVertexAttribI4iEXT;
#define glVertexAttribI4iEXT sf_glad_glVertexAttribI4iEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4IVPROC sf_glad_glVertexAttribI4iv;
#define glVertexAttribI4iv sf_glad_glVertexAttribI4iv
GLAD_API_CALL PFNGLVERTEXATTRIBI4IVEXTPROC sf_glad_glVertexAttribI4ivEXT;
#define glVertexAttribI4ivEXT sf_glad_glVertexAttribI4ivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4SVPROC sf_glad_glVertexAttribI4sv;
#define glVertexAttribI4sv sf_glad_glVertexAttribI4sv
GLAD_API_CALL PFNGLVERTEXATTRIBI4SVEXTPROC sf_glad_glVertexAttribI4svEXT;
#define glVertexAttribI4svEXT sf_glad_glVertexAttribI4svEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4UBVPROC sf_glad_glVertexAttribI4ubv;
#define glVertexAttribI4ubv sf_glad_glVertexAttribI4ubv
GLAD_API_CALL PFNGLVERTEXATTRIBI4UBVEXTPROC sf_glad_glVertexAttribI4ubvEXT;
#define glVertexAttribI4ubvEXT sf_glad_glVertexAttribI4ubvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIPROC sf_glad_glVertexAttribI4ui;
#define glVertexAttribI4ui sf_glad_glVertexAttribI4ui
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIEXTPROC sf_glad_glVertexAttribI4uiEXT;
#define glVertexAttribI4uiEXT sf_glad_glVertexAttribI4uiEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIVPROC sf_glad_glVertexAttribI4uiv;
#define glVertexAttribI4uiv sf_glad_glVertexAttribI4uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIVEXTPROC sf_glad_glVertexAttribI4uivEXT;
#define glVertexAttribI4uivEXT sf_glad_glVertexAttribI4uivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4USVPROC sf_glad_glVertexAttribI4usv;
#define glVertexAttribI4usv sf_glad_glVertexAttribI4usv
GLAD_API_CALL PFNGLVERTEXATTRIBI4USVEXTPROC sf_glad_glVertexAttribI4usvEXT;
#define glVertexAttribI4usvEXT sf_glad_glVertexAttribI4usvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBIPOINTERPROC sf_glad_glVertexAttribIPointer;
#define glVertexAttribIPointer sf_glad_glVertexAttribIPointer
GLAD_API_CALL PFNGLVERTEXATTRIBIPOINTEREXTPROC sf_glad_glVertexAttribIPointerEXT;
#define glVertexAttribIPointerEXT sf_glad_glVertexAttribIPointerEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL1DPROC sf_glad_glVertexAttribL1d;
#define glVertexAttribL1d sf_glad_glVertexAttribL1d
GLAD_API_CALL PFNGLVERTEXATTRIBL1DEXTPROC sf_glad_glVertexAttribL1dEXT;
#define glVertexAttribL1dEXT sf_glad_glVertexAttribL1dEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL1DVPROC sf_glad_glVertexAttribL1dv;
#define glVertexAttribL1dv sf_glad_glVertexAttribL1dv
GLAD_API_CALL PFNGLVERTEXATTRIBL1DVEXTPROC sf_glad_glVertexAttribL1dvEXT;
#define glVertexAttribL1dvEXT sf_glad_glVertexAttribL1dvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL2DPROC sf_glad_glVertexAttribL2d;
#define glVertexAttribL2d sf_glad_glVertexAttribL2d
GLAD_API_CALL PFNGLVERTEXATTRIBL2DEXTPROC sf_glad_glVertexAttribL2dEXT;
#define glVertexAttribL2dEXT sf_glad_glVertexAttribL2dEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL2DVPROC sf_glad_glVertexAttribL2dv;
#define glVertexAttribL2dv sf_glad_glVertexAttribL2dv
GLAD_API_CALL PFNGLVERTEXATTRIBL2DVEXTPROC sf_glad_glVertexAttribL2dvEXT;
#define glVertexAttribL2dvEXT sf_glad_glVertexAttribL2dvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL3DPROC sf_glad_glVertexAttribL3d;
#define glVertexAttribL3d sf_glad_glVertexAttribL3d
GLAD_API_CALL PFNGLVERTEXATTRIBL3DEXTPROC sf_glad_glVertexAttribL3dEXT;
#define glVertexAttribL3dEXT sf_glad_glVertexAttribL3dEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL3DVPROC sf_glad_glVertexAttribL3dv;
#define glVertexAttribL3dv sf_glad_glVertexAttribL3dv
GLAD_API_CALL PFNGLVERTEXATTRIBL3DVEXTPROC sf_glad_glVertexAttribL3dvEXT;
#define glVertexAttribL3dvEXT sf_glad_glVertexAttribL3dvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL4DPROC sf_glad_glVertexAttribL4d;
#define glVertexAttribL4d sf_glad_glVertexAttribL4d
GLAD_API_CALL PFNGLVERTEXATTRIBL4DEXTPROC sf_glad_glVertexAttribL4dEXT;
#define glVertexAttribL4dEXT sf_glad_glVertexAttribL4dEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL4DVPROC sf_glad_glVertexAttribL4dv;
#define glVertexAttribL4dv sf_glad_glVertexAttribL4dv
GLAD_API_CALL PFNGLVERTEXATTRIBL4DVEXTPROC sf_glad_glVertexAttribL4dvEXT;
#define glVertexAttribL4dvEXT sf_glad_glVertexAttribL4dvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBLPOINTERPROC sf_glad_glVertexAttribLPointer;
#define glVertexAttribLPointer sf_glad_glVertexAttribLPointer
GLAD_API_CALL PFNGLVERTEXATTRIBLPOINTEREXTPROC sf_glad_glVertexAttribLPointerEXT;
#define glVertexAttribLPointerEXT sf_glad_glVertexAttribLPointerEXT
GLAD_API_CALL PFNGLVERTEXATTRIBP1UIPROC sf_glad_glVertexAttribP1ui;
#define glVertexAttribP1ui sf_glad_glVertexAttribP1ui
GLAD_API_CALL PFNGLVERTEXATTRIBP1UIVPROC sf_glad_glVertexAttribP1uiv;
#define glVertexAttribP1uiv sf_glad_glVertexAttribP1uiv
GLAD_API_CALL PFNGLVERTEXATTRIBP2UIPROC sf_glad_glVertexAttribP2ui;
#define glVertexAttribP2ui sf_glad_glVertexAttribP2ui
GLAD_API_CALL PFNGLVERTEXATTRIBP2UIVPROC sf_glad_glVertexAttribP2uiv;
#define glVertexAttribP2uiv sf_glad_glVertexAttribP2uiv
GLAD_API_CALL PFNGLVERTEXATTRIBP3UIPROC sf_glad_glVertexAttribP3ui;
#define glVertexAttribP3ui sf_glad_glVertexAttribP3ui
GLAD_API_CALL PFNGLVERTEXATTRIBP3UIVPROC sf_glad_glVertexAttribP3uiv;
#define glVertexAttribP3uiv sf_glad_glVertexAttribP3uiv
GLAD_API_CALL PFNGLVERTEXATTRIBP4UIPROC sf_glad_glVertexAttribP4ui;
#define glVertexAttribP4ui sf_glad_glVertexAttribP4ui
GLAD_API_CALL PFNGLVERTEXATTRIBP4UIVPROC sf_glad_glVertexAttribP4uiv;
#define glVertexAttribP4uiv sf_glad_glVertexAttribP4uiv
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERPROC sf_glad_glVertexAttribPointer;
#define glVertexAttribPointer sf_glad_glVertexAttribPointer
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERARBPROC sf_glad_glVertexAttribPointerARB;
#define glVertexAttribPointerARB sf_glad_glVertexAttribPointerARB
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERNVPROC sf_glad_glVertexAttribPointerNV;
#define glVertexAttribPointerNV sf_glad_glVertexAttribPointerNV
GLAD_API_CALL PFNGLVERTEXATTRIBS1DVNVPROC sf_glad_glVertexAttribs1dvNV;
#define glVertexAttribs1dvNV sf_glad_glVertexAttribs1dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS1FVNVPROC sf_glad_glVertexAttribs1fvNV;
#define glVertexAttribs1fvNV sf_glad_glVertexAttribs1fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS1SVNVPROC sf_glad_glVertexAttribs1svNV;
#define glVertexAttribs1svNV sf_glad_glVertexAttribs1svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS2DVNVPROC sf_glad_glVertexAttribs2dvNV;
#define glVertexAttribs2dvNV sf_glad_glVertexAttribs2dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS2FVNVPROC sf_glad_glVertexAttribs2fvNV;
#define glVertexAttribs2fvNV sf_glad_glVertexAttribs2fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS2SVNVPROC sf_glad_glVertexAttribs2svNV;
#define glVertexAttribs2svNV sf_glad_glVertexAttribs2svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS3DVNVPROC sf_glad_glVertexAttribs3dvNV;
#define glVertexAttribs3dvNV sf_glad_glVertexAttribs3dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS3FVNVPROC sf_glad_glVertexAttribs3fvNV;
#define glVertexAttribs3fvNV sf_glad_glVertexAttribs3fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS3SVNVPROC sf_glad_glVertexAttribs3svNV;
#define glVertexAttribs3svNV sf_glad_glVertexAttribs3svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4DVNVPROC sf_glad_glVertexAttribs4dvNV;
#define glVertexAttribs4dvNV sf_glad_glVertexAttribs4dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4FVNVPROC sf_glad_glVertexAttribs4fvNV;
#define glVertexAttribs4fvNV sf_glad_glVertexAttribs4fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4SVNVPROC sf_glad_glVertexAttribs4svNV;
#define glVertexAttribs4svNV sf_glad_glVertexAttribs4svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4UBVNVPROC sf_glad_glVertexAttribs4ubvNV;
#define glVertexAttribs4ubvNV sf_glad_glVertexAttribs4ubvNV
GLAD_API_CALL PFNGLVERTEXPOINTEREXTPROC sf_glad_glVertexPointerEXT;
#define glVertexPointerEXT sf_glad_glVertexPointerEXT
GLAD_API_CALL PFNGLVIEWPORTPROC sf_glad_glViewport;
#define glViewport sf_glad_glViewport
GLAD_API_CALL PFNGLVIEWPORTARRAYVPROC sf_glad_glViewportArrayv;
#define glViewportArrayv sf_glad_glViewportArrayv
GLAD_API_CALL PFNGLVIEWPORTINDEXEDFPROC sf_glad_glViewportIndexedf;
#define glViewportIndexedf sf_glad_glViewportIndexedf
GLAD_API_CALL PFNGLVIEWPORTINDEXEDFVPROC sf_glad_glViewportIndexedfv;
#define glViewportIndexedfv sf_glad_glViewportIndexedfv
GLAD_API_CALL PFNGLWAITSYNCPROC sf_glad_glWaitSync;
#define glWaitSync sf_glad_glWaitSync





GLAD_API_CALL int gladLoadGLUserPtr( GLADuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadGL( GLADloadfunc load);

GLAD_API_CALL int gladLoadGLES2UserPtr( GLADuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadGLES2( GLADloadfunc load);


#ifdef GLAD_GL

GLAD_API_CALL int gladLoaderLoadGL(void);
GLAD_API_CALL void gladLoaderUnloadGL(void);

#endif
#ifdef GLAD_GLES2

GLAD_API_CALL int gladLoaderLoadGLES2(void);
GLAD_API_CALL void gladLoaderUnloadGLES2(void);

#endif /* GLAD_GLES2 */


#ifdef __cplusplus
}
#endif
#endif

/* Source */
#ifdef SF_GLAD_GL_IMPLEMENTATION
/**
 * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef GLAD_IMPL_UTIL_C_
#define GLAD_IMPL_UTIL_C_

#ifdef _MSC_VER
#define GLAD_IMPL_UTIL_SSCANF sscanf_s
#else
#define GLAD_IMPL_UTIL_SSCANF sscanf
#endif

#endif /* GLAD_IMPL_UTIL_C_ */

#ifdef __cplusplus
extern "C" {
#endif



int SF_GLAD_GL_VERSION_1_0 = 0;
int SF_GLAD_GL_VERSION_1_1 = 0;
int SF_GLAD_GL_VERSION_1_2 = 0;
int SF_GLAD_GL_VERSION_1_3 = 0;
int SF_GLAD_GL_VERSION_1_4 = 0;
int SF_GLAD_GL_VERSION_1_5 = 0;
int SF_GLAD_GL_VERSION_2_0 = 0;
int SF_GLAD_GL_VERSION_2_1 = 0;
int SF_GLAD_GL_VERSION_3_0 = 0;
int SF_GLAD_GL_VERSION_3_1 = 0;
int SF_GLAD_GL_VERSION_3_2 = 0;
int SF_GLAD_GL_VERSION_3_3 = 0;
int SF_GLAD_GL_VERSION_4_0 = 0;
int SF_GLAD_GL_VERSION_4_1 = 0;
int SF_GLAD_GL_ES_VERSION_2_0 = 0;
int SF_GLAD_GL_AMD_draw_buffers_blend = 0;
int SF_GLAD_GL_APPLE_flush_buffer_range = 0;
int SF_GLAD_GL_APPLE_vertex_array_object = 0;
int SF_GLAD_GL_ARB_ES2_compatibility = 0;
int SF_GLAD_GL_ARB_blend_func_extended = 0;
int SF_GLAD_GL_ARB_color_buffer_float = 0;
int SF_GLAD_GL_ARB_copy_buffer = 0;
int SF_GLAD_GL_ARB_draw_buffers = 0;
int SF_GLAD_GL_ARB_draw_buffers_blend = 0;
int SF_GLAD_GL_ARB_draw_elements_base_vertex = 0;
int SF_GLAD_GL_ARB_draw_indirect = 0;
int SF_GLAD_GL_ARB_draw_instanced = 0;
int SF_GLAD_GL_ARB_framebuffer_object = 0;
int SF_GLAD_GL_ARB_geometry_shader4 = 0;
int SF_GLAD_GL_ARB_get_program_binary = 0;
int SF_GLAD_GL_ARB_gpu_shader_fp64 = 0;
int SF_GLAD_GL_ARB_imaging = 0;
int SF_GLAD_GL_ARB_instanced_arrays = 0;
int SF_GLAD_GL_ARB_map_buffer_range = 0;
int SF_GLAD_GL_ARB_multisample = 0;
int SF_GLAD_GL_ARB_multitexture = 0;
int SF_GLAD_GL_ARB_occlusion_query = 0;
int SF_GLAD_GL_ARB_point_parameters = 0;
int SF_GLAD_GL_ARB_provoking_vertex = 0;
int SF_GLAD_GL_ARB_sample_shading = 0;
int SF_GLAD_GL_ARB_sampler_objects = 0;
int SF_GLAD_GL_ARB_separate_shader_objects = 0;
int SF_GLAD_GL_ARB_shader_objects = 0;
int SF_GLAD_GL_ARB_shader_subroutine = 0;
int SF_GLAD_GL_ARB_sync = 0;
int SF_GLAD_GL_ARB_tessellation_shader = 0;
int SF_GLAD_GL_ARB_texture_buffer_object = 0;
int SF_GLAD_GL_ARB_texture_compression = 0;
int SF_GLAD_GL_ARB_texture_multisample = 0;
int SF_GLAD_GL_ARB_timer_query = 0;
int SF_GLAD_GL_ARB_transform_feedback2 = 0;
int SF_GLAD_GL_ARB_transform_feedback3 = 0;
int SF_GLAD_GL_ARB_uniform_buffer_object = 0;
int SF_GLAD_GL_ARB_vertex_array_object = 0;
int SF_GLAD_GL_ARB_vertex_attrib_64bit = 0;
int SF_GLAD_GL_ARB_vertex_buffer_object = 0;
int SF_GLAD_GL_ARB_vertex_program = 0;
int SF_GLAD_GL_ARB_vertex_shader = 0;
int SF_GLAD_GL_ARB_vertex_type_2_10_10_10_rev = 0;
int SF_GLAD_GL_ARB_viewport_array = 0;
int SF_GLAD_GL_ATI_draw_buffers = 0;
int SF_GLAD_GL_ATI_separate_stencil = 0;
int SF_GLAD_GL_EXT_blend_color = 0;
int SF_GLAD_GL_EXT_blend_equation_separate = 0;
int SF_GLAD_GL_EXT_blend_func_separate = 0;
int SF_GLAD_GL_EXT_blend_minmax = 0;
int SF_GLAD_GL_EXT_copy_texture = 0;
int SF_GLAD_GL_EXT_direct_state_access = 0;
int SF_GLAD_GL_EXT_draw_buffers2 = 0;
int SF_GLAD_GL_EXT_draw_instanced = 0;
int SF_GLAD_GL_EXT_draw_range_elements = 0;
int SF_GLAD_GL_EXT_framebuffer_blit = 0;
int SF_GLAD_GL_EXT_framebuffer_multisample = 0;
int SF_GLAD_GL_EXT_framebuffer_object = 0;
int SF_GLAD_GL_EXT_geometry_shader4 = 0;
int SF_GLAD_GL_EXT_gpu_shader4 = 0;
int SF_GLAD_GL_EXT_multi_draw_arrays = 0;
int SF_GLAD_GL_EXT_point_parameters = 0;
int SF_GLAD_GL_EXT_provoking_vertex = 0;
int SF_GLAD_GL_EXT_subtexture = 0;
int SF_GLAD_GL_EXT_texture3D = 0;
int SF_GLAD_GL_EXT_texture_array = 0;
int SF_GLAD_GL_EXT_texture_buffer_object = 0;
int SF_GLAD_GL_EXT_texture_integer = 0;
int SF_GLAD_GL_EXT_texture_object = 0;
int SF_GLAD_GL_EXT_timer_query = 0;
int SF_GLAD_GL_EXT_transform_feedback = 0;
int SF_GLAD_GL_EXT_vertex_array = 0;
int SF_GLAD_GL_EXT_vertex_attrib_64bit = 0;
int SF_GLAD_GL_INGR_blend_func_separate = 0;
int SF_GLAD_GL_NVX_conditional_render = 0;
int SF_GLAD_GL_NV_conditional_render = 0;
int SF_GLAD_GL_NV_explicit_multisample = 0;
int SF_GLAD_GL_NV_geometry_program4 = 0;
int SF_GLAD_GL_NV_point_sprite = 0;
int SF_GLAD_GL_NV_transform_feedback = 0;
int SF_GLAD_GL_NV_transform_feedback2 = 0;
int SF_GLAD_GL_NV_vertex_program = 0;
int SF_GLAD_GL_NV_vertex_program4 = 0;
int SF_GLAD_GL_OES_single_precision = 0;
int SF_GLAD_GL_SGIS_point_parameters = 0;



PFNGLACTIVESHADERPROGRAMPROC sf_glad_glActiveShaderProgram = NULL;
PFNGLACTIVETEXTUREPROC sf_glad_glActiveTexture = NULL;
PFNGLACTIVETEXTUREARBPROC sf_glad_glActiveTextureARB = NULL;
PFNGLACTIVEVARYINGNVPROC sf_glad_glActiveVaryingNV = NULL;
PFNGLAREPROGRAMSRESIDENTNVPROC sf_glad_glAreProgramsResidentNV = NULL;
PFNGLARETEXTURESRESIDENTEXTPROC sf_glad_glAreTexturesResidentEXT = NULL;
PFNGLARRAYELEMENTEXTPROC sf_glad_glArrayElementEXT = NULL;
PFNGLATTACHOBJECTARBPROC sf_glad_glAttachObjectARB = NULL;
PFNGLATTACHSHADERPROC sf_glad_glAttachShader = NULL;
PFNGLBEGINCONDITIONALRENDERPROC sf_glad_glBeginConditionalRender = NULL;
PFNGLBEGINCONDITIONALRENDERNVPROC sf_glad_glBeginConditionalRenderNV = NULL;
PFNGLBEGINCONDITIONALRENDERNVXPROC sf_glad_glBeginConditionalRenderNVX = NULL;
PFNGLBEGINQUERYPROC sf_glad_glBeginQuery = NULL;
PFNGLBEGINQUERYARBPROC sf_glad_glBeginQueryARB = NULL;
PFNGLBEGINQUERYINDEXEDPROC sf_glad_glBeginQueryIndexed = NULL;
PFNGLBEGINTRANSFORMFEEDBACKPROC sf_glad_glBeginTransformFeedback = NULL;
PFNGLBEGINTRANSFORMFEEDBACKEXTPROC sf_glad_glBeginTransformFeedbackEXT = NULL;
PFNGLBEGINTRANSFORMFEEDBACKNVPROC sf_glad_glBeginTransformFeedbackNV = NULL;
PFNGLBINDATTRIBLOCATIONPROC sf_glad_glBindAttribLocation = NULL;
PFNGLBINDATTRIBLOCATIONARBPROC sf_glad_glBindAttribLocationARB = NULL;
PFNGLBINDBUFFERPROC sf_glad_glBindBuffer = NULL;
PFNGLBINDBUFFERARBPROC sf_glad_glBindBufferARB = NULL;
PFNGLBINDBUFFERBASEPROC sf_glad_glBindBufferBase = NULL;
PFNGLBINDBUFFERBASEEXTPROC sf_glad_glBindBufferBaseEXT = NULL;
PFNGLBINDBUFFERBASENVPROC sf_glad_glBindBufferBaseNV = NULL;
PFNGLBINDBUFFEROFFSETEXTPROC sf_glad_glBindBufferOffsetEXT = NULL;
PFNGLBINDBUFFEROFFSETNVPROC sf_glad_glBindBufferOffsetNV = NULL;
PFNGLBINDBUFFERRANGEPROC sf_glad_glBindBufferRange = NULL;
PFNGLBINDBUFFERRANGEEXTPROC sf_glad_glBindBufferRangeEXT = NULL;
PFNGLBINDBUFFERRANGENVPROC sf_glad_glBindBufferRangeNV = NULL;
PFNGLBINDFRAGDATALOCATIONPROC sf_glad_glBindFragDataLocation = NULL;
PFNGLBINDFRAGDATALOCATIONEXTPROC sf_glad_glBindFragDataLocationEXT = NULL;
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC sf_glad_glBindFragDataLocationIndexed = NULL;
PFNGLBINDFRAMEBUFFERPROC sf_glad_glBindFramebuffer = NULL;
PFNGLBINDFRAMEBUFFEREXTPROC sf_glad_glBindFramebufferEXT = NULL;
PFNGLBINDMULTITEXTUREEXTPROC sf_glad_glBindMultiTextureEXT = NULL;
PFNGLBINDPROGRAMARBPROC sf_glad_glBindProgramARB = NULL;
PFNGLBINDPROGRAMNVPROC sf_glad_glBindProgramNV = NULL;
PFNGLBINDPROGRAMPIPELINEPROC sf_glad_glBindProgramPipeline = NULL;
PFNGLBINDRENDERBUFFERPROC sf_glad_glBindRenderbuffer = NULL;
PFNGLBINDRENDERBUFFEREXTPROC sf_glad_glBindRenderbufferEXT = NULL;
PFNGLBINDSAMPLERPROC sf_glad_glBindSampler = NULL;
PFNGLBINDTEXTUREPROC sf_glad_glBindTexture = NULL;
PFNGLBINDTEXTUREEXTPROC sf_glad_glBindTextureEXT = NULL;
PFNGLBINDTRANSFORMFEEDBACKPROC sf_glad_glBindTransformFeedback = NULL;
PFNGLBINDTRANSFORMFEEDBACKNVPROC sf_glad_glBindTransformFeedbackNV = NULL;
PFNGLBINDVERTEXARRAYPROC sf_glad_glBindVertexArray = NULL;
PFNGLBINDVERTEXARRAYAPPLEPROC sf_glad_glBindVertexArrayAPPLE = NULL;
PFNGLBLENDCOLORPROC sf_glad_glBlendColor = NULL;
PFNGLBLENDCOLOREXTPROC sf_glad_glBlendColorEXT = NULL;
PFNGLBLENDEQUATIONPROC sf_glad_glBlendEquation = NULL;
PFNGLBLENDEQUATIONEXTPROC sf_glad_glBlendEquationEXT = NULL;
PFNGLBLENDEQUATIONINDEXEDAMDPROC sf_glad_glBlendEquationIndexedAMD = NULL;
PFNGLBLENDEQUATIONSEPARATEPROC sf_glad_glBlendEquationSeparate = NULL;
PFNGLBLENDEQUATIONSEPARATEEXTPROC sf_glad_glBlendEquationSeparateEXT = NULL;
PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC sf_glad_glBlendEquationSeparateIndexedAMD = NULL;
PFNGLBLENDEQUATIONSEPARATEIPROC sf_glad_glBlendEquationSeparatei = NULL;
PFNGLBLENDEQUATIONSEPARATEIARBPROC sf_glad_glBlendEquationSeparateiARB = NULL;
PFNGLBLENDEQUATIONIPROC sf_glad_glBlendEquationi = NULL;
PFNGLBLENDEQUATIONIARBPROC sf_glad_glBlendEquationiARB = NULL;
PFNGLBLENDFUNCPROC sf_glad_glBlendFunc = NULL;
PFNGLBLENDFUNCINDEXEDAMDPROC sf_glad_glBlendFuncIndexedAMD = NULL;
PFNGLBLENDFUNCSEPARATEPROC sf_glad_glBlendFuncSeparate = NULL;
PFNGLBLENDFUNCSEPARATEEXTPROC sf_glad_glBlendFuncSeparateEXT = NULL;
PFNGLBLENDFUNCSEPARATEINGRPROC sf_glad_glBlendFuncSeparateINGR = NULL;
PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC sf_glad_glBlendFuncSeparateIndexedAMD = NULL;
PFNGLBLENDFUNCSEPARATEIPROC sf_glad_glBlendFuncSeparatei = NULL;
PFNGLBLENDFUNCSEPARATEIARBPROC sf_glad_glBlendFuncSeparateiARB = NULL;
PFNGLBLENDFUNCIPROC sf_glad_glBlendFunci = NULL;
PFNGLBLENDFUNCIARBPROC sf_glad_glBlendFunciARB = NULL;
PFNGLBLITFRAMEBUFFERPROC sf_glad_glBlitFramebuffer = NULL;
PFNGLBLITFRAMEBUFFEREXTPROC sf_glad_glBlitFramebufferEXT = NULL;
PFNGLBUFFERDATAPROC sf_glad_glBufferData = NULL;
PFNGLBUFFERDATAARBPROC sf_glad_glBufferDataARB = NULL;
PFNGLBUFFERPARAMETERIAPPLEPROC sf_glad_glBufferParameteriAPPLE = NULL;
PFNGLBUFFERSUBDATAPROC sf_glad_glBufferSubData = NULL;
PFNGLBUFFERSUBDATAARBPROC sf_glad_glBufferSubDataARB = NULL;
PFNGLCHECKFRAMEBUFFERSTATUSPROC sf_glad_glCheckFramebufferStatus = NULL;
PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC sf_glad_glCheckFramebufferStatusEXT = NULL;
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC sf_glad_glCheckNamedFramebufferStatusEXT = NULL;
PFNGLCLAMPCOLORPROC sf_glad_glClampColor = NULL;
PFNGLCLAMPCOLORARBPROC sf_glad_glClampColorARB = NULL;
PFNGLCLEARPROC sf_glad_glClear = NULL;
PFNGLCLEARBUFFERFIPROC sf_glad_glClearBufferfi = NULL;
PFNGLCLEARBUFFERFVPROC sf_glad_glClearBufferfv = NULL;
PFNGLCLEARBUFFERIVPROC sf_glad_glClearBufferiv = NULL;
PFNGLCLEARBUFFERUIVPROC sf_glad_glClearBufferuiv = NULL;
PFNGLCLEARCOLORPROC sf_glad_glClearColor = NULL;
PFNGLCLEARCOLORIIEXTPROC sf_glad_glClearColorIiEXT = NULL;
PFNGLCLEARCOLORIUIEXTPROC sf_glad_glClearColorIuiEXT = NULL;
PFNGLCLEARDEPTHPROC sf_glad_glClearDepth = NULL;
PFNGLCLEARDEPTHFPROC sf_glad_glClearDepthf = NULL;
PFNGLCLEARDEPTHFOESPROC sf_glad_glClearDepthfOES = NULL;
PFNGLCLEARNAMEDBUFFERDATAEXTPROC sf_glad_glClearNamedBufferDataEXT = NULL;
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC sf_glad_glClearNamedBufferSubDataEXT = NULL;
PFNGLCLEARSTENCILPROC sf_glad_glClearStencil = NULL;
PFNGLCLIENTACTIVETEXTUREARBPROC sf_glad_glClientActiveTextureARB = NULL;
PFNGLCLIENTATTRIBDEFAULTEXTPROC sf_glad_glClientAttribDefaultEXT = NULL;
PFNGLCLIENTWAITSYNCPROC sf_glad_glClientWaitSync = NULL;
PFNGLCLIPPLANEFOESPROC sf_glad_glClipPlanefOES = NULL;
PFNGLCOLORMASKPROC sf_glad_glColorMask = NULL;
PFNGLCOLORMASKINDEXEDEXTPROC sf_glad_glColorMaskIndexedEXT = NULL;
PFNGLCOLORMASKIPROC sf_glad_glColorMaski = NULL;
PFNGLCOLORPOINTEREXTPROC sf_glad_glColorPointerEXT = NULL;
PFNGLCOMPILESHADERPROC sf_glad_glCompileShader = NULL;
PFNGLCOMPILESHADERARBPROC sf_glad_glCompileShaderARB = NULL;
PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC sf_glad_glCompressedMultiTexImage1DEXT = NULL;
PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC sf_glad_glCompressedMultiTexImage2DEXT = NULL;
PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC sf_glad_glCompressedMultiTexImage3DEXT = NULL;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC sf_glad_glCompressedMultiTexSubImage1DEXT = NULL;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC sf_glad_glCompressedMultiTexSubImage2DEXT = NULL;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC sf_glad_glCompressedMultiTexSubImage3DEXT = NULL;
PFNGLCOMPRESSEDTEXIMAGE1DPROC sf_glad_glCompressedTexImage1D = NULL;
PFNGLCOMPRESSEDTEXIMAGE1DARBPROC sf_glad_glCompressedTexImage1DARB = NULL;
PFNGLCOMPRESSEDTEXIMAGE2DPROC sf_glad_glCompressedTexImage2D = NULL;
PFNGLCOMPRESSEDTEXIMAGE2DARBPROC sf_glad_glCompressedTexImage2DARB = NULL;
PFNGLCOMPRESSEDTEXIMAGE3DPROC sf_glad_glCompressedTexImage3D = NULL;
PFNGLCOMPRESSEDTEXIMAGE3DARBPROC sf_glad_glCompressedTexImage3DARB = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC sf_glad_glCompressedTexSubImage1D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC sf_glad_glCompressedTexSubImage1DARB = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC sf_glad_glCompressedTexSubImage2D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC sf_glad_glCompressedTexSubImage2DARB = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC sf_glad_glCompressedTexSubImage3D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC sf_glad_glCompressedTexSubImage3DARB = NULL;
PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC sf_glad_glCompressedTextureImage1DEXT = NULL;
PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC sf_glad_glCompressedTextureImage2DEXT = NULL;
PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC sf_glad_glCompressedTextureImage3DEXT = NULL;
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC sf_glad_glCompressedTextureSubImage1DEXT = NULL;
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC sf_glad_glCompressedTextureSubImage2DEXT = NULL;
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC sf_glad_glCompressedTextureSubImage3DEXT = NULL;
PFNGLCOPYBUFFERSUBDATAPROC sf_glad_glCopyBufferSubData = NULL;
PFNGLCOPYMULTITEXIMAGE1DEXTPROC sf_glad_glCopyMultiTexImage1DEXT = NULL;
PFNGLCOPYMULTITEXIMAGE2DEXTPROC sf_glad_glCopyMultiTexImage2DEXT = NULL;
PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC sf_glad_glCopyMultiTexSubImage1DEXT = NULL;
PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC sf_glad_glCopyMultiTexSubImage2DEXT = NULL;
PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC sf_glad_glCopyMultiTexSubImage3DEXT = NULL;
PFNGLCOPYTEXIMAGE1DPROC sf_glad_glCopyTexImage1D = NULL;
PFNGLCOPYTEXIMAGE1DEXTPROC sf_glad_glCopyTexImage1DEXT = NULL;
PFNGLCOPYTEXIMAGE2DPROC sf_glad_glCopyTexImage2D = NULL;
PFNGLCOPYTEXIMAGE2DEXTPROC sf_glad_glCopyTexImage2DEXT = NULL;
PFNGLCOPYTEXSUBIMAGE1DPROC sf_glad_glCopyTexSubImage1D = NULL;
PFNGLCOPYTEXSUBIMAGE1DEXTPROC sf_glad_glCopyTexSubImage1DEXT = NULL;
PFNGLCOPYTEXSUBIMAGE2DPROC sf_glad_glCopyTexSubImage2D = NULL;
PFNGLCOPYTEXSUBIMAGE2DEXTPROC sf_glad_glCopyTexSubImage2DEXT = NULL;
PFNGLCOPYTEXSUBIMAGE3DPROC sf_glad_glCopyTexSubImage3D = NULL;
PFNGLCOPYTEXSUBIMAGE3DEXTPROC sf_glad_glCopyTexSubImage3DEXT = NULL;
PFNGLCOPYTEXTUREIMAGE1DEXTPROC sf_glad_glCopyTextureImage1DEXT = NULL;
PFNGLCOPYTEXTUREIMAGE2DEXTPROC sf_glad_glCopyTextureImage2DEXT = NULL;
PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC sf_glad_glCopyTextureSubImage1DEXT = NULL;
PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC sf_glad_glCopyTextureSubImage2DEXT = NULL;
PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC sf_glad_glCopyTextureSubImage3DEXT = NULL;
PFNGLCREATEPROGRAMPROC sf_glad_glCreateProgram = NULL;
PFNGLCREATEPROGRAMOBJECTARBPROC sf_glad_glCreateProgramObjectARB = NULL;
PFNGLCREATESHADERPROC sf_glad_glCreateShader = NULL;
PFNGLCREATESHADEROBJECTARBPROC sf_glad_glCreateShaderObjectARB = NULL;
PFNGLCREATESHADERPROGRAMVPROC sf_glad_glCreateShaderProgramv = NULL;
PFNGLCULLFACEPROC sf_glad_glCullFace = NULL;
PFNGLDELETEBUFFERSPROC sf_glad_glDeleteBuffers = NULL;
PFNGLDELETEBUFFERSARBPROC sf_glad_glDeleteBuffersARB = NULL;
PFNGLDELETEFRAMEBUFFERSPROC sf_glad_glDeleteFramebuffers = NULL;
PFNGLDELETEFRAMEBUFFERSEXTPROC sf_glad_glDeleteFramebuffersEXT = NULL;
PFNGLDELETEOBJECTARBPROC sf_glad_glDeleteObjectARB = NULL;
PFNGLDELETEPROGRAMPROC sf_glad_glDeleteProgram = NULL;
PFNGLDELETEPROGRAMPIPELINESPROC sf_glad_glDeleteProgramPipelines = NULL;
PFNGLDELETEPROGRAMSARBPROC sf_glad_glDeleteProgramsARB = NULL;
PFNGLDELETEPROGRAMSNVPROC sf_glad_glDeleteProgramsNV = NULL;
PFNGLDELETEQUERIESPROC sf_glad_glDeleteQueries = NULL;
PFNGLDELETEQUERIESARBPROC sf_glad_glDeleteQueriesARB = NULL;
PFNGLDELETERENDERBUFFERSPROC sf_glad_glDeleteRenderbuffers = NULL;
PFNGLDELETERENDERBUFFERSEXTPROC sf_glad_glDeleteRenderbuffersEXT = NULL;
PFNGLDELETESAMPLERSPROC sf_glad_glDeleteSamplers = NULL;
PFNGLDELETESHADERPROC sf_glad_glDeleteShader = NULL;
PFNGLDELETESYNCPROC sf_glad_glDeleteSync = NULL;
PFNGLDELETETEXTURESPROC sf_glad_glDeleteTextures = NULL;
PFNGLDELETETEXTURESEXTPROC sf_glad_glDeleteTexturesEXT = NULL;
PFNGLDELETETRANSFORMFEEDBACKSPROC sf_glad_glDeleteTransformFeedbacks = NULL;
PFNGLDELETETRANSFORMFEEDBACKSNVPROC sf_glad_glDeleteTransformFeedbacksNV = NULL;
PFNGLDELETEVERTEXARRAYSPROC sf_glad_glDeleteVertexArrays = NULL;
PFNGLDELETEVERTEXARRAYSAPPLEPROC sf_glad_glDeleteVertexArraysAPPLE = NULL;
PFNGLDEPTHFUNCPROC sf_glad_glDepthFunc = NULL;
PFNGLDEPTHMASKPROC sf_glad_glDepthMask = NULL;
PFNGLDEPTHRANGEPROC sf_glad_glDepthRange = NULL;
PFNGLDEPTHRANGEARRAYDVNVPROC sf_glad_glDepthRangeArraydvNV = NULL;
PFNGLDEPTHRANGEARRAYVPROC sf_glad_glDepthRangeArrayv = NULL;
PFNGLDEPTHRANGEINDEXEDPROC sf_glad_glDepthRangeIndexed = NULL;
PFNGLDEPTHRANGEINDEXEDDNVPROC sf_glad_glDepthRangeIndexeddNV = NULL;
PFNGLDEPTHRANGEFPROC sf_glad_glDepthRangef = NULL;
PFNGLDEPTHRANGEFOESPROC sf_glad_glDepthRangefOES = NULL;
PFNGLDETACHOBJECTARBPROC sf_glad_glDetachObjectARB = NULL;
PFNGLDETACHSHADERPROC sf_glad_glDetachShader = NULL;
PFNGLDISABLEPROC sf_glad_glDisable = NULL;
PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC sf_glad_glDisableClientStateIndexedEXT = NULL;
PFNGLDISABLECLIENTSTATEIEXTPROC sf_glad_glDisableClientStateiEXT = NULL;
PFNGLDISABLEINDEXEDEXTPROC sf_glad_glDisableIndexedEXT = NULL;
PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC sf_glad_glDisableVertexArrayAttribEXT = NULL;
PFNGLDISABLEVERTEXARRAYEXTPROC sf_glad_glDisableVertexArrayEXT = NULL;
PFNGLDISABLEVERTEXATTRIBARRAYPROC sf_glad_glDisableVertexAttribArray = NULL;
PFNGLDISABLEVERTEXATTRIBARRAYARBPROC sf_glad_glDisableVertexAttribArrayARB = NULL;
PFNGLDISABLEIPROC sf_glad_glDisablei = NULL;
PFNGLDRAWARRAYSPROC sf_glad_glDrawArrays = NULL;
PFNGLDRAWARRAYSEXTPROC sf_glad_glDrawArraysEXT = NULL;
PFNGLDRAWARRAYSINDIRECTPROC sf_glad_glDrawArraysIndirect = NULL;
PFNGLDRAWARRAYSINSTANCEDPROC sf_glad_glDrawArraysInstanced = NULL;
PFNGLDRAWARRAYSINSTANCEDARBPROC sf_glad_glDrawArraysInstancedARB = NULL;
PFNGLDRAWARRAYSINSTANCEDEXTPROC sf_glad_glDrawArraysInstancedEXT = NULL;
PFNGLDRAWBUFFERPROC sf_glad_glDrawBuffer = NULL;
PFNGLDRAWBUFFERSPROC sf_glad_glDrawBuffers = NULL;
PFNGLDRAWBUFFERSARBPROC sf_glad_glDrawBuffersARB = NULL;
PFNGLDRAWBUFFERSATIPROC sf_glad_glDrawBuffersATI = NULL;
PFNGLDRAWELEMENTSPROC sf_glad_glDrawElements = NULL;
PFNGLDRAWELEMENTSBASEVERTEXPROC sf_glad_glDrawElementsBaseVertex = NULL;
PFNGLDRAWELEMENTSINDIRECTPROC sf_glad_glDrawElementsIndirect = NULL;
PFNGLDRAWELEMENTSINSTANCEDPROC sf_glad_glDrawElementsInstanced = NULL;
PFNGLDRAWELEMENTSINSTANCEDARBPROC sf_glad_glDrawElementsInstancedARB = NULL;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC sf_glad_glDrawElementsInstancedBaseVertex = NULL;
PFNGLDRAWELEMENTSINSTANCEDEXTPROC sf_glad_glDrawElementsInstancedEXT = NULL;
PFNGLDRAWRANGEELEMENTSPROC sf_glad_glDrawRangeElements = NULL;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC sf_glad_glDrawRangeElementsBaseVertex = NULL;
PFNGLDRAWRANGEELEMENTSEXTPROC sf_glad_glDrawRangeElementsEXT = NULL;
PFNGLDRAWTRANSFORMFEEDBACKPROC sf_glad_glDrawTransformFeedback = NULL;
PFNGLDRAWTRANSFORMFEEDBACKNVPROC sf_glad_glDrawTransformFeedbackNV = NULL;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC sf_glad_glDrawTransformFeedbackStream = NULL;
PFNGLEDGEFLAGPOINTEREXTPROC sf_glad_glEdgeFlagPointerEXT = NULL;
PFNGLENABLEPROC sf_glad_glEnable = NULL;
PFNGLENABLECLIENTSTATEINDEXEDEXTPROC sf_glad_glEnableClientStateIndexedEXT = NULL;
PFNGLENABLECLIENTSTATEIEXTPROC sf_glad_glEnableClientStateiEXT = NULL;
PFNGLENABLEINDEXEDEXTPROC sf_glad_glEnableIndexedEXT = NULL;
PFNGLENABLEVERTEXARRAYATTRIBEXTPROC sf_glad_glEnableVertexArrayAttribEXT = NULL;
PFNGLENABLEVERTEXARRAYEXTPROC sf_glad_glEnableVertexArrayEXT = NULL;
PFNGLENABLEVERTEXATTRIBARRAYPROC sf_glad_glEnableVertexAttribArray = NULL;
PFNGLENABLEVERTEXATTRIBARRAYARBPROC sf_glad_glEnableVertexAttribArrayARB = NULL;
PFNGLENABLEIPROC sf_glad_glEnablei = NULL;
PFNGLENDCONDITIONALRENDERPROC sf_glad_glEndConditionalRender = NULL;
PFNGLENDCONDITIONALRENDERNVPROC sf_glad_glEndConditionalRenderNV = NULL;
PFNGLENDCONDITIONALRENDERNVXPROC sf_glad_glEndConditionalRenderNVX = NULL;
PFNGLENDQUERYPROC sf_glad_glEndQuery = NULL;
PFNGLENDQUERYARBPROC sf_glad_glEndQueryARB = NULL;
PFNGLENDQUERYINDEXEDPROC sf_glad_glEndQueryIndexed = NULL;
PFNGLENDTRANSFORMFEEDBACKPROC sf_glad_glEndTransformFeedback = NULL;
PFNGLENDTRANSFORMFEEDBACKEXTPROC sf_glad_glEndTransformFeedbackEXT = NULL;
PFNGLENDTRANSFORMFEEDBACKNVPROC sf_glad_glEndTransformFeedbackNV = NULL;
PFNGLEXECUTEPROGRAMNVPROC sf_glad_glExecuteProgramNV = NULL;
PFNGLFENCESYNCPROC sf_glad_glFenceSync = NULL;
PFNGLFINISHPROC sf_glad_glFinish = NULL;
PFNGLFLUSHPROC sf_glad_glFlush = NULL;
PFNGLFLUSHMAPPEDBUFFERRANGEPROC sf_glad_glFlushMappedBufferRange = NULL;
PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC sf_glad_glFlushMappedBufferRangeAPPLE = NULL;
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC sf_glad_glFlushMappedNamedBufferRangeEXT = NULL;
PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC sf_glad_glFramebufferDrawBufferEXT = NULL;
PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC sf_glad_glFramebufferDrawBuffersEXT = NULL;
PFNGLFRAMEBUFFERREADBUFFEREXTPROC sf_glad_glFramebufferReadBufferEXT = NULL;
PFNGLFRAMEBUFFERRENDERBUFFERPROC sf_glad_glFramebufferRenderbuffer = NULL;
PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC sf_glad_glFramebufferRenderbufferEXT = NULL;
PFNGLFRAMEBUFFERTEXTUREPROC sf_glad_glFramebufferTexture = NULL;
PFNGLFRAMEBUFFERTEXTURE1DPROC sf_glad_glFramebufferTexture1D = NULL;
PFNGLFRAMEBUFFERTEXTURE1DEXTPROC sf_glad_glFramebufferTexture1DEXT = NULL;
PFNGLFRAMEBUFFERTEXTURE2DPROC sf_glad_glFramebufferTexture2D = NULL;
PFNGLFRAMEBUFFERTEXTURE2DEXTPROC sf_glad_glFramebufferTexture2DEXT = NULL;
PFNGLFRAMEBUFFERTEXTURE3DPROC sf_glad_glFramebufferTexture3D = NULL;
PFNGLFRAMEBUFFERTEXTURE3DEXTPROC sf_glad_glFramebufferTexture3DEXT = NULL;
PFNGLFRAMEBUFFERTEXTUREARBPROC sf_glad_glFramebufferTextureARB = NULL;
PFNGLFRAMEBUFFERTEXTUREEXTPROC sf_glad_glFramebufferTextureEXT = NULL;
PFNGLFRAMEBUFFERTEXTUREFACEARBPROC sf_glad_glFramebufferTextureFaceARB = NULL;
PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC sf_glad_glFramebufferTextureFaceEXT = NULL;
PFNGLFRAMEBUFFERTEXTURELAYERPROC sf_glad_glFramebufferTextureLayer = NULL;
PFNGLFRAMEBUFFERTEXTURELAYERARBPROC sf_glad_glFramebufferTextureLayerARB = NULL;
PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC sf_glad_glFramebufferTextureLayerEXT = NULL;
PFNGLFRONTFACEPROC sf_glad_glFrontFace = NULL;
PFNGLFRUSTUMFOESPROC sf_glad_glFrustumfOES = NULL;
PFNGLGENBUFFERSPROC sf_glad_glGenBuffers = NULL;
PFNGLGENBUFFERSARBPROC sf_glad_glGenBuffersARB = NULL;
PFNGLGENFRAMEBUFFERSPROC sf_glad_glGenFramebuffers = NULL;
PFNGLGENFRAMEBUFFERSEXTPROC sf_glad_glGenFramebuffersEXT = NULL;
PFNGLGENPROGRAMPIPELINESPROC sf_glad_glGenProgramPipelines = NULL;
PFNGLGENPROGRAMSARBPROC sf_glad_glGenProgramsARB = NULL;
PFNGLGENPROGRAMSNVPROC sf_glad_glGenProgramsNV = NULL;
PFNGLGENQUERIESPROC sf_glad_glGenQueries = NULL;
PFNGLGENQUERIESARBPROC sf_glad_glGenQueriesARB = NULL;
PFNGLGENRENDERBUFFERSPROC sf_glad_glGenRenderbuffers = NULL;
PFNGLGENRENDERBUFFERSEXTPROC sf_glad_glGenRenderbuffersEXT = NULL;
PFNGLGENSAMPLERSPROC sf_glad_glGenSamplers = NULL;
PFNGLGENTEXTURESPROC sf_glad_glGenTextures = NULL;
PFNGLGENTEXTURESEXTPROC sf_glad_glGenTexturesEXT = NULL;
PFNGLGENTRANSFORMFEEDBACKSPROC sf_glad_glGenTransformFeedbacks = NULL;
PFNGLGENTRANSFORMFEEDBACKSNVPROC sf_glad_glGenTransformFeedbacksNV = NULL;
PFNGLGENVERTEXARRAYSPROC sf_glad_glGenVertexArrays = NULL;
PFNGLGENVERTEXARRAYSAPPLEPROC sf_glad_glGenVertexArraysAPPLE = NULL;
PFNGLGENERATEMIPMAPPROC sf_glad_glGenerateMipmap = NULL;
PFNGLGENERATEMIPMAPEXTPROC sf_glad_glGenerateMipmapEXT = NULL;
PFNGLGENERATEMULTITEXMIPMAPEXTPROC sf_glad_glGenerateMultiTexMipmapEXT = NULL;
PFNGLGENERATETEXTUREMIPMAPEXTPROC sf_glad_glGenerateTextureMipmapEXT = NULL;
PFNGLGETACTIVEATTRIBPROC sf_glad_glGetActiveAttrib = NULL;
PFNGLGETACTIVEATTRIBARBPROC sf_glad_glGetActiveAttribARB = NULL;
PFNGLGETACTIVESUBROUTINENAMEPROC sf_glad_glGetActiveSubroutineName = NULL;
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC sf_glad_glGetActiveSubroutineUniformName = NULL;
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC sf_glad_glGetActiveSubroutineUniformiv = NULL;
PFNGLGETACTIVEUNIFORMPROC sf_glad_glGetActiveUniform = NULL;
PFNGLGETACTIVEUNIFORMARBPROC sf_glad_glGetActiveUniformARB = NULL;
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC sf_glad_glGetActiveUniformBlockName = NULL;
PFNGLGETACTIVEUNIFORMBLOCKIVPROC sf_glad_glGetActiveUniformBlockiv = NULL;
PFNGLGETACTIVEUNIFORMNAMEPROC sf_glad_glGetActiveUniformName = NULL;
PFNGLGETACTIVEUNIFORMSIVPROC sf_glad_glGetActiveUniformsiv = NULL;
PFNGLGETACTIVEVARYINGNVPROC sf_glad_glGetActiveVaryingNV = NULL;
PFNGLGETATTACHEDOBJECTSARBPROC sf_glad_glGetAttachedObjectsARB = NULL;
PFNGLGETATTACHEDSHADERSPROC sf_glad_glGetAttachedShaders = NULL;
PFNGLGETATTRIBLOCATIONPROC sf_glad_glGetAttribLocation = NULL;
PFNGLGETATTRIBLOCATIONARBPROC sf_glad_glGetAttribLocationARB = NULL;
PFNGLGETBOOLEANINDEXEDVEXTPROC sf_glad_glGetBooleanIndexedvEXT = NULL;
PFNGLGETBOOLEANI_VPROC sf_glad_glGetBooleani_v = NULL;
PFNGLGETBOOLEANVPROC sf_glad_glGetBooleanv = NULL;
PFNGLGETBUFFERPARAMETERI64VPROC sf_glad_glGetBufferParameteri64v = NULL;
PFNGLGETBUFFERPARAMETERIVPROC sf_glad_glGetBufferParameteriv = NULL;
PFNGLGETBUFFERPARAMETERIVARBPROC sf_glad_glGetBufferParameterivARB = NULL;
PFNGLGETBUFFERPOINTERVPROC sf_glad_glGetBufferPointerv = NULL;
PFNGLGETBUFFERPOINTERVARBPROC sf_glad_glGetBufferPointervARB = NULL;
PFNGLGETBUFFERSUBDATAPROC sf_glad_glGetBufferSubData = NULL;
PFNGLGETBUFFERSUBDATAARBPROC sf_glad_glGetBufferSubDataARB = NULL;
PFNGLGETCLIPPLANEFOESPROC sf_glad_glGetClipPlanefOES = NULL;
PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC sf_glad_glGetCompressedMultiTexImageEXT = NULL;
PFNGLGETCOMPRESSEDTEXIMAGEPROC sf_glad_glGetCompressedTexImage = NULL;
PFNGLGETCOMPRESSEDTEXIMAGEARBPROC sf_glad_glGetCompressedTexImageARB = NULL;
PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC sf_glad_glGetCompressedTextureImageEXT = NULL;
PFNGLGETDOUBLEINDEXEDVEXTPROC sf_glad_glGetDoubleIndexedvEXT = NULL;
PFNGLGETDOUBLEI_VPROC sf_glad_glGetDoublei_v = NULL;
PFNGLGETDOUBLEI_VEXTPROC sf_glad_glGetDoublei_vEXT = NULL;
PFNGLGETDOUBLEVPROC sf_glad_glGetDoublev = NULL;
PFNGLGETERRORPROC sf_glad_glGetError = NULL;
PFNGLGETFLOATINDEXEDVEXTPROC sf_glad_glGetFloatIndexedvEXT = NULL;
PFNGLGETFLOATI_VPROC sf_glad_glGetFloati_v = NULL;
PFNGLGETFLOATI_VEXTPROC sf_glad_glGetFloati_vEXT = NULL;
PFNGLGETFLOATVPROC sf_glad_glGetFloatv = NULL;
PFNGLGETFRAGDATAINDEXPROC sf_glad_glGetFragDataIndex = NULL;
PFNGLGETFRAGDATALOCATIONPROC sf_glad_glGetFragDataLocation = NULL;
PFNGLGETFRAGDATALOCATIONEXTPROC sf_glad_glGetFragDataLocationEXT = NULL;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC sf_glad_glGetFramebufferAttachmentParameteriv = NULL;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC sf_glad_glGetFramebufferAttachmentParameterivEXT = NULL;
PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC sf_glad_glGetFramebufferParameterivEXT = NULL;
PFNGLGETHANDLEARBPROC sf_glad_glGetHandleARB = NULL;
PFNGLGETINFOLOGARBPROC sf_glad_glGetInfoLogARB = NULL;
PFNGLGETINTEGER64I_VPROC sf_glad_glGetInteger64i_v = NULL;
PFNGLGETINTEGER64VPROC sf_glad_glGetInteger64v = NULL;
PFNGLGETINTEGERINDEXEDVEXTPROC sf_glad_glGetIntegerIndexedvEXT = NULL;
PFNGLGETINTEGERI_VPROC sf_glad_glGetIntegeri_v = NULL;
PFNGLGETINTEGERVPROC sf_glad_glGetIntegerv = NULL;
PFNGLGETMULTITEXENVFVEXTPROC sf_glad_glGetMultiTexEnvfvEXT = NULL;
PFNGLGETMULTITEXENVIVEXTPROC sf_glad_glGetMultiTexEnvivEXT = NULL;
PFNGLGETMULTITEXGENDVEXTPROC sf_glad_glGetMultiTexGendvEXT = NULL;
PFNGLGETMULTITEXGENFVEXTPROC sf_glad_glGetMultiTexGenfvEXT = NULL;
PFNGLGETMULTITEXGENIVEXTPROC sf_glad_glGetMultiTexGenivEXT = NULL;
PFNGLGETMULTITEXIMAGEEXTPROC sf_glad_glGetMultiTexImageEXT = NULL;
PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC sf_glad_glGetMultiTexLevelParameterfvEXT = NULL;
PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC sf_glad_glGetMultiTexLevelParameterivEXT = NULL;
PFNGLGETMULTITEXPARAMETERIIVEXTPROC sf_glad_glGetMultiTexParameterIivEXT = NULL;
PFNGLGETMULTITEXPARAMETERIUIVEXTPROC sf_glad_glGetMultiTexParameterIuivEXT = NULL;
PFNGLGETMULTITEXPARAMETERFVEXTPROC sf_glad_glGetMultiTexParameterfvEXT = NULL;
PFNGLGETMULTITEXPARAMETERIVEXTPROC sf_glad_glGetMultiTexParameterivEXT = NULL;
PFNGLGETMULTISAMPLEFVPROC sf_glad_glGetMultisamplefv = NULL;
PFNGLGETMULTISAMPLEFVNVPROC sf_glad_glGetMultisamplefvNV = NULL;
PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC sf_glad_glGetNamedBufferParameterivEXT = NULL;
PFNGLGETNAMEDBUFFERPOINTERVEXTPROC sf_glad_glGetNamedBufferPointervEXT = NULL;
PFNGLGETNAMEDBUFFERSUBDATAEXTPROC sf_glad_glGetNamedBufferSubDataEXT = NULL;
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC sf_glad_glGetNamedFramebufferAttachmentParameterivEXT = NULL;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC sf_glad_glGetNamedFramebufferParameterivEXT = NULL;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC sf_glad_glGetNamedProgramLocalParameterIivEXT = NULL;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC sf_glad_glGetNamedProgramLocalParameterIuivEXT = NULL;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC sf_glad_glGetNamedProgramLocalParameterdvEXT = NULL;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC sf_glad_glGetNamedProgramLocalParameterfvEXT = NULL;
PFNGLGETNAMEDPROGRAMSTRINGEXTPROC sf_glad_glGetNamedProgramStringEXT = NULL;
PFNGLGETNAMEDPROGRAMIVEXTPROC sf_glad_glGetNamedProgramivEXT = NULL;
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC sf_glad_glGetNamedRenderbufferParameterivEXT = NULL;
PFNGLGETOBJECTPARAMETERFVARBPROC sf_glad_glGetObjectParameterfvARB = NULL;
PFNGLGETOBJECTPARAMETERIVARBPROC sf_glad_glGetObjectParameterivARB = NULL;
PFNGLGETPOINTERINDEXEDVEXTPROC sf_glad_glGetPointerIndexedvEXT = NULL;
PFNGLGETPOINTERI_VEXTPROC sf_glad_glGetPointeri_vEXT = NULL;
PFNGLGETPOINTERVEXTPROC sf_glad_glGetPointervEXT = NULL;
PFNGLGETPROGRAMBINARYPROC sf_glad_glGetProgramBinary = NULL;
PFNGLGETPROGRAMENVPARAMETERDVARBPROC sf_glad_glGetProgramEnvParameterdvARB = NULL;
PFNGLGETPROGRAMENVPARAMETERFVARBPROC sf_glad_glGetProgramEnvParameterfvARB = NULL;
PFNGLGETPROGRAMINFOLOGPROC sf_glad_glGetProgramInfoLog = NULL;
PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC sf_glad_glGetProgramLocalParameterdvARB = NULL;
PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC sf_glad_glGetProgramLocalParameterfvARB = NULL;
PFNGLGETPROGRAMPARAMETERDVNVPROC sf_glad_glGetProgramParameterdvNV = NULL;
PFNGLGETPROGRAMPARAMETERFVNVPROC sf_glad_glGetProgramParameterfvNV = NULL;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC sf_glad_glGetProgramPipelineInfoLog = NULL;
PFNGLGETPROGRAMPIPELINEIVPROC sf_glad_glGetProgramPipelineiv = NULL;
PFNGLGETPROGRAMSTAGEIVPROC sf_glad_glGetProgramStageiv = NULL;
PFNGLGETPROGRAMSTRINGARBPROC sf_glad_glGetProgramStringARB = NULL;
PFNGLGETPROGRAMSTRINGNVPROC sf_glad_glGetProgramStringNV = NULL;
PFNGLGETPROGRAMIVPROC sf_glad_glGetProgramiv = NULL;
PFNGLGETPROGRAMIVARBPROC sf_glad_glGetProgramivARB = NULL;
PFNGLGETPROGRAMIVNVPROC sf_glad_glGetProgramivNV = NULL;
PFNGLGETQUERYINDEXEDIVPROC sf_glad_glGetQueryIndexediv = NULL;
PFNGLGETQUERYOBJECTI64VPROC sf_glad_glGetQueryObjecti64v = NULL;
PFNGLGETQUERYOBJECTI64VEXTPROC sf_glad_glGetQueryObjecti64vEXT = NULL;
PFNGLGETQUERYOBJECTIVPROC sf_glad_glGetQueryObjectiv = NULL;
PFNGLGETQUERYOBJECTIVARBPROC sf_glad_glGetQueryObjectivARB = NULL;
PFNGLGETQUERYOBJECTUI64VPROC sf_glad_glGetQueryObjectui64v = NULL;
PFNGLGETQUERYOBJECTUI64VEXTPROC sf_glad_glGetQueryObjectui64vEXT = NULL;
PFNGLGETQUERYOBJECTUIVPROC sf_glad_glGetQueryObjectuiv = NULL;
PFNGLGETQUERYOBJECTUIVARBPROC sf_glad_glGetQueryObjectuivARB = NULL;
PFNGLGETQUERYIVPROC sf_glad_glGetQueryiv = NULL;
PFNGLGETQUERYIVARBPROC sf_glad_glGetQueryivARB = NULL;
PFNGLGETRENDERBUFFERPARAMETERIVPROC sf_glad_glGetRenderbufferParameteriv = NULL;
PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC sf_glad_glGetRenderbufferParameterivEXT = NULL;
PFNGLGETSAMPLERPARAMETERIIVPROC sf_glad_glGetSamplerParameterIiv = NULL;
PFNGLGETSAMPLERPARAMETERIUIVPROC sf_glad_glGetSamplerParameterIuiv = NULL;
PFNGLGETSAMPLERPARAMETERFVPROC sf_glad_glGetSamplerParameterfv = NULL;
PFNGLGETSAMPLERPARAMETERIVPROC sf_glad_glGetSamplerParameteriv = NULL;
PFNGLGETSHADERINFOLOGPROC sf_glad_glGetShaderInfoLog = NULL;
PFNGLGETSHADERPRECISIONFORMATPROC sf_glad_glGetShaderPrecisionFormat = NULL;
PFNGLGETSHADERSOURCEPROC sf_glad_glGetShaderSource = NULL;
PFNGLGETSHADERSOURCEARBPROC sf_glad_glGetShaderSourceARB = NULL;
PFNGLGETSHADERIVPROC sf_glad_glGetShaderiv = NULL;
PFNGLGETSTRINGPROC sf_glad_glGetString = NULL;
PFNGLGETSTRINGIPROC sf_glad_glGetStringi = NULL;
PFNGLGETSUBROUTINEINDEXPROC sf_glad_glGetSubroutineIndex = NULL;
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC sf_glad_glGetSubroutineUniformLocation = NULL;
PFNGLGETSYNCIVPROC sf_glad_glGetSynciv = NULL;
PFNGLGETTEXIMAGEPROC sf_glad_glGetTexImage = NULL;
PFNGLGETTEXLEVELPARAMETERFVPROC sf_glad_glGetTexLevelParameterfv = NULL;
PFNGLGETTEXLEVELPARAMETERIVPROC sf_glad_glGetTexLevelParameteriv = NULL;
PFNGLGETTEXPARAMETERIIVPROC sf_glad_glGetTexParameterIiv = NULL;
PFNGLGETTEXPARAMETERIIVEXTPROC sf_glad_glGetTexParameterIivEXT = NULL;
PFNGLGETTEXPARAMETERIUIVPROC sf_glad_glGetTexParameterIuiv = NULL;
PFNGLGETTEXPARAMETERIUIVEXTPROC sf_glad_glGetTexParameterIuivEXT = NULL;
PFNGLGETTEXPARAMETERFVPROC sf_glad_glGetTexParameterfv = NULL;
PFNGLGETTEXPARAMETERIVPROC sf_glad_glGetTexParameteriv = NULL;
PFNGLGETTEXTUREIMAGEEXTPROC sf_glad_glGetTextureImageEXT = NULL;
PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC sf_glad_glGetTextureLevelParameterfvEXT = NULL;
PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC sf_glad_glGetTextureLevelParameterivEXT = NULL;
PFNGLGETTEXTUREPARAMETERIIVEXTPROC sf_glad_glGetTextureParameterIivEXT = NULL;
PFNGLGETTEXTUREPARAMETERIUIVEXTPROC sf_glad_glGetTextureParameterIuivEXT = NULL;
PFNGLGETTEXTUREPARAMETERFVEXTPROC sf_glad_glGetTextureParameterfvEXT = NULL;
PFNGLGETTEXTUREPARAMETERIVEXTPROC sf_glad_glGetTextureParameterivEXT = NULL;
PFNGLGETTRACKMATRIXIVNVPROC sf_glad_glGetTrackMatrixivNV = NULL;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC sf_glad_glGetTransformFeedbackVarying = NULL;
PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC sf_glad_glGetTransformFeedbackVaryingEXT = NULL;
PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC sf_glad_glGetTransformFeedbackVaryingNV = NULL;
PFNGLGETUNIFORMBLOCKINDEXPROC sf_glad_glGetUniformBlockIndex = NULL;
PFNGLGETUNIFORMINDICESPROC sf_glad_glGetUniformIndices = NULL;
PFNGLGETUNIFORMLOCATIONPROC sf_glad_glGetUniformLocation = NULL;
PFNGLGETUNIFORMLOCATIONARBPROC sf_glad_glGetUniformLocationARB = NULL;
PFNGLGETUNIFORMSUBROUTINEUIVPROC sf_glad_glGetUniformSubroutineuiv = NULL;
PFNGLGETUNIFORMDVPROC sf_glad_glGetUniformdv = NULL;
PFNGLGETUNIFORMFVPROC sf_glad_glGetUniformfv = NULL;
PFNGLGETUNIFORMFVARBPROC sf_glad_glGetUniformfvARB = NULL;
PFNGLGETUNIFORMIVPROC sf_glad_glGetUniformiv = NULL;
PFNGLGETUNIFORMIVARBPROC sf_glad_glGetUniformivARB = NULL;
PFNGLGETUNIFORMUIVPROC sf_glad_glGetUniformuiv = NULL;
PFNGLGETUNIFORMUIVEXTPROC sf_glad_glGetUniformuivEXT = NULL;
PFNGLGETVARYINGLOCATIONNVPROC sf_glad_glGetVaryingLocationNV = NULL;
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC sf_glad_glGetVertexArrayIntegeri_vEXT = NULL;
PFNGLGETVERTEXARRAYINTEGERVEXTPROC sf_glad_glGetVertexArrayIntegervEXT = NULL;
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC sf_glad_glGetVertexArrayPointeri_vEXT = NULL;
PFNGLGETVERTEXARRAYPOINTERVEXTPROC sf_glad_glGetVertexArrayPointervEXT = NULL;
PFNGLGETVERTEXATTRIBIIVPROC sf_glad_glGetVertexAttribIiv = NULL;
PFNGLGETVERTEXATTRIBIIVEXTPROC sf_glad_glGetVertexAttribIivEXT = NULL;
PFNGLGETVERTEXATTRIBIUIVPROC sf_glad_glGetVertexAttribIuiv = NULL;
PFNGLGETVERTEXATTRIBIUIVEXTPROC sf_glad_glGetVertexAttribIuivEXT = NULL;
PFNGLGETVERTEXATTRIBLDVPROC sf_glad_glGetVertexAttribLdv = NULL;
PFNGLGETVERTEXATTRIBLDVEXTPROC sf_glad_glGetVertexAttribLdvEXT = NULL;
PFNGLGETVERTEXATTRIBPOINTERVPROC sf_glad_glGetVertexAttribPointerv = NULL;
PFNGLGETVERTEXATTRIBPOINTERVARBPROC sf_glad_glGetVertexAttribPointervARB = NULL;
PFNGLGETVERTEXATTRIBPOINTERVNVPROC sf_glad_glGetVertexAttribPointervNV = NULL;
PFNGLGETVERTEXATTRIBDVPROC sf_glad_glGetVertexAttribdv = NULL;
PFNGLGETVERTEXATTRIBDVARBPROC sf_glad_glGetVertexAttribdvARB = NULL;
PFNGLGETVERTEXATTRIBDVNVPROC sf_glad_glGetVertexAttribdvNV = NULL;
PFNGLGETVERTEXATTRIBFVPROC sf_glad_glGetVertexAttribfv = NULL;
PFNGLGETVERTEXATTRIBFVARBPROC sf_glad_glGetVertexAttribfvARB = NULL;
PFNGLGETVERTEXATTRIBFVNVPROC sf_glad_glGetVertexAttribfvNV = NULL;
PFNGLGETVERTEXATTRIBIVPROC sf_glad_glGetVertexAttribiv = NULL;
PFNGLGETVERTEXATTRIBIVARBPROC sf_glad_glGetVertexAttribivARB = NULL;
PFNGLGETVERTEXATTRIBIVNVPROC sf_glad_glGetVertexAttribivNV = NULL;
PFNGLHINTPROC sf_glad_glHint = NULL;
PFNGLINDEXPOINTEREXTPROC sf_glad_glIndexPointerEXT = NULL;
PFNGLISBUFFERPROC sf_glad_glIsBuffer = NULL;
PFNGLISBUFFERARBPROC sf_glad_glIsBufferARB = NULL;
PFNGLISENABLEDPROC sf_glad_glIsEnabled = NULL;
PFNGLISENABLEDINDEXEDEXTPROC sf_glad_glIsEnabledIndexedEXT = NULL;
PFNGLISENABLEDIPROC sf_glad_glIsEnabledi = NULL;
PFNGLISFRAMEBUFFERPROC sf_glad_glIsFramebuffer = NULL;
PFNGLISFRAMEBUFFEREXTPROC sf_glad_glIsFramebufferEXT = NULL;
PFNGLISPROGRAMPROC sf_glad_glIsProgram = NULL;
PFNGLISPROGRAMARBPROC sf_glad_glIsProgramARB = NULL;
PFNGLISPROGRAMNVPROC sf_glad_glIsProgramNV = NULL;
PFNGLISPROGRAMPIPELINEPROC sf_glad_glIsProgramPipeline = NULL;
PFNGLISQUERYPROC sf_glad_glIsQuery = NULL;
PFNGLISQUERYARBPROC sf_glad_glIsQueryARB = NULL;
PFNGLISRENDERBUFFERPROC sf_glad_glIsRenderbuffer = NULL;
PFNGLISRENDERBUFFEREXTPROC sf_glad_glIsRenderbufferEXT = NULL;
PFNGLISSAMPLERPROC sf_glad_glIsSampler = NULL;
PFNGLISSHADERPROC sf_glad_glIsShader = NULL;
PFNGLISSYNCPROC sf_glad_glIsSync = NULL;
PFNGLISTEXTUREPROC sf_glad_glIsTexture = NULL;
PFNGLISTEXTUREEXTPROC sf_glad_glIsTextureEXT = NULL;
PFNGLISTRANSFORMFEEDBACKPROC sf_glad_glIsTransformFeedback = NULL;
PFNGLISTRANSFORMFEEDBACKNVPROC sf_glad_glIsTransformFeedbackNV = NULL;
PFNGLISVERTEXARRAYPROC sf_glad_glIsVertexArray = NULL;
PFNGLISVERTEXARRAYAPPLEPROC sf_glad_glIsVertexArrayAPPLE = NULL;
PFNGLLINEWIDTHPROC sf_glad_glLineWidth = NULL;
PFNGLLINKPROGRAMPROC sf_glad_glLinkProgram = NULL;
PFNGLLINKPROGRAMARBPROC sf_glad_glLinkProgramARB = NULL;
PFNGLLOADPROGRAMNVPROC sf_glad_glLoadProgramNV = NULL;
PFNGLLOGICOPPROC sf_glad_glLogicOp = NULL;
PFNGLMAPBUFFERPROC sf_glad_glMapBuffer = NULL;
PFNGLMAPBUFFERARBPROC sf_glad_glMapBufferARB = NULL;
PFNGLMAPBUFFERRANGEPROC sf_glad_glMapBufferRange = NULL;
PFNGLMAPNAMEDBUFFEREXTPROC sf_glad_glMapNamedBufferEXT = NULL;
PFNGLMAPNAMEDBUFFERRANGEEXTPROC sf_glad_glMapNamedBufferRangeEXT = NULL;
PFNGLMATRIXFRUSTUMEXTPROC sf_glad_glMatrixFrustumEXT = NULL;
PFNGLMATRIXLOADIDENTITYEXTPROC sf_glad_glMatrixLoadIdentityEXT = NULL;
PFNGLMATRIXLOADTRANSPOSEDEXTPROC sf_glad_glMatrixLoadTransposedEXT = NULL;
PFNGLMATRIXLOADTRANSPOSEFEXTPROC sf_glad_glMatrixLoadTransposefEXT = NULL;
PFNGLMATRIXLOADDEXTPROC sf_glad_glMatrixLoaddEXT = NULL;
PFNGLMATRIXLOADFEXTPROC sf_glad_glMatrixLoadfEXT = NULL;
PFNGLMATRIXMULTTRANSPOSEDEXTPROC sf_glad_glMatrixMultTransposedEXT = NULL;
PFNGLMATRIXMULTTRANSPOSEFEXTPROC sf_glad_glMatrixMultTransposefEXT = NULL;
PFNGLMATRIXMULTDEXTPROC sf_glad_glMatrixMultdEXT = NULL;
PFNGLMATRIXMULTFEXTPROC sf_glad_glMatrixMultfEXT = NULL;
PFNGLMATRIXORTHOEXTPROC sf_glad_glMatrixOrthoEXT = NULL;
PFNGLMATRIXPOPEXTPROC sf_glad_glMatrixPopEXT = NULL;
PFNGLMATRIXPUSHEXTPROC sf_glad_glMatrixPushEXT = NULL;
PFNGLMATRIXROTATEDEXTPROC sf_glad_glMatrixRotatedEXT = NULL;
PFNGLMATRIXROTATEFEXTPROC sf_glad_glMatrixRotatefEXT = NULL;
PFNGLMATRIXSCALEDEXTPROC sf_glad_glMatrixScaledEXT = NULL;
PFNGLMATRIXSCALEFEXTPROC sf_glad_glMatrixScalefEXT = NULL;
PFNGLMATRIXTRANSLATEDEXTPROC sf_glad_glMatrixTranslatedEXT = NULL;
PFNGLMATRIXTRANSLATEFEXTPROC sf_glad_glMatrixTranslatefEXT = NULL;
PFNGLMINSAMPLESHADINGPROC sf_glad_glMinSampleShading = NULL;
PFNGLMINSAMPLESHADINGARBPROC sf_glad_glMinSampleShadingARB = NULL;
PFNGLMULTIDRAWARRAYSPROC sf_glad_glMultiDrawArrays = NULL;
PFNGLMULTIDRAWARRAYSEXTPROC sf_glad_glMultiDrawArraysEXT = NULL;
PFNGLMULTIDRAWELEMENTSPROC sf_glad_glMultiDrawElements = NULL;
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC sf_glad_glMultiDrawElementsBaseVertex = NULL;
PFNGLMULTIDRAWELEMENTSEXTPROC sf_glad_glMultiDrawElementsEXT = NULL;
PFNGLMULTITEXBUFFEREXTPROC sf_glad_glMultiTexBufferEXT = NULL;
PFNGLMULTITEXCOORD1DARBPROC sf_glad_glMultiTexCoord1dARB = NULL;
PFNGLMULTITEXCOORD1DVARBPROC sf_glad_glMultiTexCoord1dvARB = NULL;
PFNGLMULTITEXCOORD1FARBPROC sf_glad_glMultiTexCoord1fARB = NULL;
PFNGLMULTITEXCOORD1FVARBPROC sf_glad_glMultiTexCoord1fvARB = NULL;
PFNGLMULTITEXCOORD1IARBPROC sf_glad_glMultiTexCoord1iARB = NULL;
PFNGLMULTITEXCOORD1IVARBPROC sf_glad_glMultiTexCoord1ivARB = NULL;
PFNGLMULTITEXCOORD1SARBPROC sf_glad_glMultiTexCoord1sARB = NULL;
PFNGLMULTITEXCOORD1SVARBPROC sf_glad_glMultiTexCoord1svARB = NULL;
PFNGLMULTITEXCOORD2DARBPROC sf_glad_glMultiTexCoord2dARB = NULL;
PFNGLMULTITEXCOORD2DVARBPROC sf_glad_glMultiTexCoord2dvARB = NULL;
PFNGLMULTITEXCOORD2FARBPROC sf_glad_glMultiTexCoord2fARB = NULL;
PFNGLMULTITEXCOORD2FVARBPROC sf_glad_glMultiTexCoord2fvARB = NULL;
PFNGLMULTITEXCOORD2IARBPROC sf_glad_glMultiTexCoord2iARB = NULL;
PFNGLMULTITEXCOORD2IVARBPROC sf_glad_glMultiTexCoord2ivARB = NULL;
PFNGLMULTITEXCOORD2SARBPROC sf_glad_glMultiTexCoord2sARB = NULL;
PFNGLMULTITEXCOORD2SVARBPROC sf_glad_glMultiTexCoord2svARB = NULL;
PFNGLMULTITEXCOORD3DARBPROC sf_glad_glMultiTexCoord3dARB = NULL;
PFNGLMULTITEXCOORD3DVARBPROC sf_glad_glMultiTexCoord3dvARB = NULL;
PFNGLMULTITEXCOORD3FARBPROC sf_glad_glMultiTexCoord3fARB = NULL;
PFNGLMULTITEXCOORD3FVARBPROC sf_glad_glMultiTexCoord3fvARB = NULL;
PFNGLMULTITEXCOORD3IARBPROC sf_glad_glMultiTexCoord3iARB = NULL;
PFNGLMULTITEXCOORD3IVARBPROC sf_glad_glMultiTexCoord3ivARB = NULL;
PFNGLMULTITEXCOORD3SARBPROC sf_glad_glMultiTexCoord3sARB = NULL;
PFNGLMULTITEXCOORD3SVARBPROC sf_glad_glMultiTexCoord3svARB = NULL;
PFNGLMULTITEXCOORD4DARBPROC sf_glad_glMultiTexCoord4dARB = NULL;
PFNGLMULTITEXCOORD4DVARBPROC sf_glad_glMultiTexCoord4dvARB = NULL;
PFNGLMULTITEXCOORD4FARBPROC sf_glad_glMultiTexCoord4fARB = NULL;
PFNGLMULTITEXCOORD4FVARBPROC sf_glad_glMultiTexCoord4fvARB = NULL;
PFNGLMULTITEXCOORD4IARBPROC sf_glad_glMultiTexCoord4iARB = NULL;
PFNGLMULTITEXCOORD4IVARBPROC sf_glad_glMultiTexCoord4ivARB = NULL;
PFNGLMULTITEXCOORD4SARBPROC sf_glad_glMultiTexCoord4sARB = NULL;
PFNGLMULTITEXCOORD4SVARBPROC sf_glad_glMultiTexCoord4svARB = NULL;
PFNGLMULTITEXCOORDPOINTEREXTPROC sf_glad_glMultiTexCoordPointerEXT = NULL;
PFNGLMULTITEXENVFEXTPROC sf_glad_glMultiTexEnvfEXT = NULL;
PFNGLMULTITEXENVFVEXTPROC sf_glad_glMultiTexEnvfvEXT = NULL;
PFNGLMULTITEXENVIEXTPROC sf_glad_glMultiTexEnviEXT = NULL;
PFNGLMULTITEXENVIVEXTPROC sf_glad_glMultiTexEnvivEXT = NULL;
PFNGLMULTITEXGENDEXTPROC sf_glad_glMultiTexGendEXT = NULL;
PFNGLMULTITEXGENDVEXTPROC sf_glad_glMultiTexGendvEXT = NULL;
PFNGLMULTITEXGENFEXTPROC sf_glad_glMultiTexGenfEXT = NULL;
PFNGLMULTITEXGENFVEXTPROC sf_glad_glMultiTexGenfvEXT = NULL;
PFNGLMULTITEXGENIEXTPROC sf_glad_glMultiTexGeniEXT = NULL;
PFNGLMULTITEXGENIVEXTPROC sf_glad_glMultiTexGenivEXT = NULL;
PFNGLMULTITEXIMAGE1DEXTPROC sf_glad_glMultiTexImage1DEXT = NULL;
PFNGLMULTITEXIMAGE2DEXTPROC sf_glad_glMultiTexImage2DEXT = NULL;
PFNGLMULTITEXIMAGE3DEXTPROC sf_glad_glMultiTexImage3DEXT = NULL;
PFNGLMULTITEXPARAMETERIIVEXTPROC sf_glad_glMultiTexParameterIivEXT = NULL;
PFNGLMULTITEXPARAMETERIUIVEXTPROC sf_glad_glMultiTexParameterIuivEXT = NULL;
PFNGLMULTITEXPARAMETERFEXTPROC sf_glad_glMultiTexParameterfEXT = NULL;
PFNGLMULTITEXPARAMETERFVEXTPROC sf_glad_glMultiTexParameterfvEXT = NULL;
PFNGLMULTITEXPARAMETERIEXTPROC sf_glad_glMultiTexParameteriEXT = NULL;
PFNGLMULTITEXPARAMETERIVEXTPROC sf_glad_glMultiTexParameterivEXT = NULL;
PFNGLMULTITEXRENDERBUFFEREXTPROC sf_glad_glMultiTexRenderbufferEXT = NULL;
PFNGLMULTITEXSUBIMAGE1DEXTPROC sf_glad_glMultiTexSubImage1DEXT = NULL;
PFNGLMULTITEXSUBIMAGE2DEXTPROC sf_glad_glMultiTexSubImage2DEXT = NULL;
PFNGLMULTITEXSUBIMAGE3DEXTPROC sf_glad_glMultiTexSubImage3DEXT = NULL;
PFNGLNAMEDBUFFERDATAEXTPROC sf_glad_glNamedBufferDataEXT = NULL;
PFNGLNAMEDBUFFERSTORAGEEXTPROC sf_glad_glNamedBufferStorageEXT = NULL;
PFNGLNAMEDBUFFERSUBDATAEXTPROC sf_glad_glNamedBufferSubDataEXT = NULL;
PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC sf_glad_glNamedCopyBufferSubDataEXT = NULL;
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC sf_glad_glNamedFramebufferParameteriEXT = NULL;
PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC sf_glad_glNamedFramebufferRenderbufferEXT = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC sf_glad_glNamedFramebufferTexture1DEXT = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC sf_glad_glNamedFramebufferTexture2DEXT = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC sf_glad_glNamedFramebufferTexture3DEXT = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC sf_glad_glNamedFramebufferTextureEXT = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC sf_glad_glNamedFramebufferTextureFaceEXT = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC sf_glad_glNamedFramebufferTextureLayerEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC sf_glad_glNamedProgramLocalParameter4dEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC sf_glad_glNamedProgramLocalParameter4dvEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC sf_glad_glNamedProgramLocalParameter4fEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC sf_glad_glNamedProgramLocalParameter4fvEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC sf_glad_glNamedProgramLocalParameterI4iEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC sf_glad_glNamedProgramLocalParameterI4ivEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC sf_glad_glNamedProgramLocalParameterI4uiEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC sf_glad_glNamedProgramLocalParameterI4uivEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC sf_glad_glNamedProgramLocalParameters4fvEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC sf_glad_glNamedProgramLocalParametersI4ivEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC sf_glad_glNamedProgramLocalParametersI4uivEXT = NULL;
PFNGLNAMEDPROGRAMSTRINGEXTPROC sf_glad_glNamedProgramStringEXT = NULL;
PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC sf_glad_glNamedRenderbufferStorageEXT = NULL;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC sf_glad_glNamedRenderbufferStorageMultisampleCoverageEXT = NULL;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC sf_glad_glNamedRenderbufferStorageMultisampleEXT = NULL;
PFNGLNORMALPOINTEREXTPROC sf_glad_glNormalPointerEXT = NULL;
PFNGLORTHOFOESPROC sf_glad_glOrthofOES = NULL;
PFNGLPATCHPARAMETERFVPROC sf_glad_glPatchParameterfv = NULL;
PFNGLPATCHPARAMETERIPROC sf_glad_glPatchParameteri = NULL;
PFNGLPAUSETRANSFORMFEEDBACKPROC sf_glad_glPauseTransformFeedback = NULL;
PFNGLPAUSETRANSFORMFEEDBACKNVPROC sf_glad_glPauseTransformFeedbackNV = NULL;
PFNGLPIXELSTOREFPROC sf_glad_glPixelStoref = NULL;
PFNGLPIXELSTOREIPROC sf_glad_glPixelStorei = NULL;
PFNGLPOINTPARAMETERFPROC sf_glad_glPointParameterf = NULL;
PFNGLPOINTPARAMETERFARBPROC sf_glad_glPointParameterfARB = NULL;
PFNGLPOINTPARAMETERFEXTPROC sf_glad_glPointParameterfEXT = NULL;
PFNGLPOINTPARAMETERFSGISPROC sf_glad_glPointParameterfSGIS = NULL;
PFNGLPOINTPARAMETERFVPROC sf_glad_glPointParameterfv = NULL;
PFNGLPOINTPARAMETERFVARBPROC sf_glad_glPointParameterfvARB = NULL;
PFNGLPOINTPARAMETERFVEXTPROC sf_glad_glPointParameterfvEXT = NULL;
PFNGLPOINTPARAMETERFVSGISPROC sf_glad_glPointParameterfvSGIS = NULL;
PFNGLPOINTPARAMETERIPROC sf_glad_glPointParameteri = NULL;
PFNGLPOINTPARAMETERINVPROC sf_glad_glPointParameteriNV = NULL;
PFNGLPOINTPARAMETERIVPROC sf_glad_glPointParameteriv = NULL;
PFNGLPOINTPARAMETERIVNVPROC sf_glad_glPointParameterivNV = NULL;
PFNGLPOINTSIZEPROC sf_glad_glPointSize = NULL;
PFNGLPOLYGONMODEPROC sf_glad_glPolygonMode = NULL;
PFNGLPOLYGONOFFSETPROC sf_glad_glPolygonOffset = NULL;
PFNGLPRIMITIVERESTARTINDEXPROC sf_glad_glPrimitiveRestartIndex = NULL;
PFNGLPRIORITIZETEXTURESEXTPROC sf_glad_glPrioritizeTexturesEXT = NULL;
PFNGLPROGRAMBINARYPROC sf_glad_glProgramBinary = NULL;
PFNGLPROGRAMENVPARAMETER4DARBPROC sf_glad_glProgramEnvParameter4dARB = NULL;
PFNGLPROGRAMENVPARAMETER4DVARBPROC sf_glad_glProgramEnvParameter4dvARB = NULL;
PFNGLPROGRAMENVPARAMETER4FARBPROC sf_glad_glProgramEnvParameter4fARB = NULL;
PFNGLPROGRAMENVPARAMETER4FVARBPROC sf_glad_glProgramEnvParameter4fvARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4DARBPROC sf_glad_glProgramLocalParameter4dARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4DVARBPROC sf_glad_glProgramLocalParameter4dvARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4FARBPROC sf_glad_glProgramLocalParameter4fARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4FVARBPROC sf_glad_glProgramLocalParameter4fvARB = NULL;
PFNGLPROGRAMPARAMETER4DNVPROC sf_glad_glProgramParameter4dNV = NULL;
PFNGLPROGRAMPARAMETER4DVNVPROC sf_glad_glProgramParameter4dvNV = NULL;
PFNGLPROGRAMPARAMETER4FNVPROC sf_glad_glProgramParameter4fNV = NULL;
PFNGLPROGRAMPARAMETER4FVNVPROC sf_glad_glProgramParameter4fvNV = NULL;
PFNGLPROGRAMPARAMETERIPROC sf_glad_glProgramParameteri = NULL;
PFNGLPROGRAMPARAMETERIARBPROC sf_glad_glProgramParameteriARB = NULL;
PFNGLPROGRAMPARAMETERIEXTPROC sf_glad_glProgramParameteriEXT = NULL;
PFNGLPROGRAMPARAMETERS4DVNVPROC sf_glad_glProgramParameters4dvNV = NULL;
PFNGLPROGRAMPARAMETERS4FVNVPROC sf_glad_glProgramParameters4fvNV = NULL;
PFNGLPROGRAMSTRINGARBPROC sf_glad_glProgramStringARB = NULL;
PFNGLPROGRAMUNIFORM1DPROC sf_glad_glProgramUniform1d = NULL;
PFNGLPROGRAMUNIFORM1DEXTPROC sf_glad_glProgramUniform1dEXT = NULL;
PFNGLPROGRAMUNIFORM1DVPROC sf_glad_glProgramUniform1dv = NULL;
PFNGLPROGRAMUNIFORM1DVEXTPROC sf_glad_glProgramUniform1dvEXT = NULL;
PFNGLPROGRAMUNIFORM1FPROC sf_glad_glProgramUniform1f = NULL;
PFNGLPROGRAMUNIFORM1FEXTPROC sf_glad_glProgramUniform1fEXT = NULL;
PFNGLPROGRAMUNIFORM1FVPROC sf_glad_glProgramUniform1fv = NULL;
PFNGLPROGRAMUNIFORM1FVEXTPROC sf_glad_glProgramUniform1fvEXT = NULL;
PFNGLPROGRAMUNIFORM1IPROC sf_glad_glProgramUniform1i = NULL;
PFNGLPROGRAMUNIFORM1IEXTPROC sf_glad_glProgramUniform1iEXT = NULL;
PFNGLPROGRAMUNIFORM1IVPROC sf_glad_glProgramUniform1iv = NULL;
PFNGLPROGRAMUNIFORM1IVEXTPROC sf_glad_glProgramUniform1ivEXT = NULL;
PFNGLPROGRAMUNIFORM1UIPROC sf_glad_glProgramUniform1ui = NULL;
PFNGLPROGRAMUNIFORM1UIEXTPROC sf_glad_glProgramUniform1uiEXT = NULL;
PFNGLPROGRAMUNIFORM1UIVPROC sf_glad_glProgramUniform1uiv = NULL;
PFNGLPROGRAMUNIFORM1UIVEXTPROC sf_glad_glProgramUniform1uivEXT = NULL;
PFNGLPROGRAMUNIFORM2DPROC sf_glad_glProgramUniform2d = NULL;
PFNGLPROGRAMUNIFORM2DEXTPROC sf_glad_glProgramUniform2dEXT = NULL;
PFNGLPROGRAMUNIFORM2DVPROC sf_glad_glProgramUniform2dv = NULL;
PFNGLPROGRAMUNIFORM2DVEXTPROC sf_glad_glProgramUniform2dvEXT = NULL;
PFNGLPROGRAMUNIFORM2FPROC sf_glad_glProgramUniform2f = NULL;
PFNGLPROGRAMUNIFORM2FEXTPROC sf_glad_glProgramUniform2fEXT = NULL;
PFNGLPROGRAMUNIFORM2FVPROC sf_glad_glProgramUniform2fv = NULL;
PFNGLPROGRAMUNIFORM2FVEXTPROC sf_glad_glProgramUniform2fvEXT = NULL;
PFNGLPROGRAMUNIFORM2IPROC sf_glad_glProgramUniform2i = NULL;
PFNGLPROGRAMUNIFORM2IEXTPROC sf_glad_glProgramUniform2iEXT = NULL;
PFNGLPROGRAMUNIFORM2IVPROC sf_glad_glProgramUniform2iv = NULL;
PFNGLPROGRAMUNIFORM2IVEXTPROC sf_glad_glProgramUniform2ivEXT = NULL;
PFNGLPROGRAMUNIFORM2UIPROC sf_glad_glProgramUniform2ui = NULL;
PFNGLPROGRAMUNIFORM2UIEXTPROC sf_glad_glProgramUniform2uiEXT = NULL;
PFNGLPROGRAMUNIFORM2UIVPROC sf_glad_glProgramUniform2uiv = NULL;
PFNGLPROGRAMUNIFORM2UIVEXTPROC sf_glad_glProgramUniform2uivEXT = NULL;
PFNGLPROGRAMUNIFORM3DPROC sf_glad_glProgramUniform3d = NULL;
PFNGLPROGRAMUNIFORM3DEXTPROC sf_glad_glProgramUniform3dEXT = NULL;
PFNGLPROGRAMUNIFORM3DVPROC sf_glad_glProgramUniform3dv = NULL;
PFNGLPROGRAMUNIFORM3DVEXTPROC sf_glad_glProgramUniform3dvEXT = NULL;
PFNGLPROGRAMUNIFORM3FPROC sf_glad_glProgramUniform3f = NULL;
PFNGLPROGRAMUNIFORM3FEXTPROC sf_glad_glProgramUniform3fEXT = NULL;
PFNGLPROGRAMUNIFORM3FVPROC sf_glad_glProgramUniform3fv = NULL;
PFNGLPROGRAMUNIFORM3FVEXTPROC sf_glad_glProgramUniform3fvEXT = NULL;
PFNGLPROGRAMUNIFORM3IPROC sf_glad_glProgramUniform3i = NULL;
PFNGLPROGRAMUNIFORM3IEXTPROC sf_glad_glProgramUniform3iEXT = NULL;
PFNGLPROGRAMUNIFORM3IVPROC sf_glad_glProgramUniform3iv = NULL;
PFNGLPROGRAMUNIFORM3IVEXTPROC sf_glad_glProgramUniform3ivEXT = NULL;
PFNGLPROGRAMUNIFORM3UIPROC sf_glad_glProgramUniform3ui = NULL;
PFNGLPROGRAMUNIFORM3UIEXTPROC sf_glad_glProgramUniform3uiEXT = NULL;
PFNGLPROGRAMUNIFORM3UIVPROC sf_glad_glProgramUniform3uiv = NULL;
PFNGLPROGRAMUNIFORM3UIVEXTPROC sf_glad_glProgramUniform3uivEXT = NULL;
PFNGLPROGRAMUNIFORM4DPROC sf_glad_glProgramUniform4d = NULL;
PFNGLPROGRAMUNIFORM4DEXTPROC sf_glad_glProgramUniform4dEXT = NULL;
PFNGLPROGRAMUNIFORM4DVPROC sf_glad_glProgramUniform4dv = NULL;
PFNGLPROGRAMUNIFORM4DVEXTPROC sf_glad_glProgramUniform4dvEXT = NULL;
PFNGLPROGRAMUNIFORM4FPROC sf_glad_glProgramUniform4f = NULL;
PFNGLPROGRAMUNIFORM4FEXTPROC sf_glad_glProgramUniform4fEXT = NULL;
PFNGLPROGRAMUNIFORM4FVPROC sf_glad_glProgramUniform4fv = NULL;
PFNGLPROGRAMUNIFORM4FVEXTPROC sf_glad_glProgramUniform4fvEXT = NULL;
PFNGLPROGRAMUNIFORM4IPROC sf_glad_glProgramUniform4i = NULL;
PFNGLPROGRAMUNIFORM4IEXTPROC sf_glad_glProgramUniform4iEXT = NULL;
PFNGLPROGRAMUNIFORM4IVPROC sf_glad_glProgramUniform4iv = NULL;
PFNGLPROGRAMUNIFORM4IVEXTPROC sf_glad_glProgramUniform4ivEXT = NULL;
PFNGLPROGRAMUNIFORM4UIPROC sf_glad_glProgramUniform4ui = NULL;
PFNGLPROGRAMUNIFORM4UIEXTPROC sf_glad_glProgramUniform4uiEXT = NULL;
PFNGLPROGRAMUNIFORM4UIVPROC sf_glad_glProgramUniform4uiv = NULL;
PFNGLPROGRAMUNIFORM4UIVEXTPROC sf_glad_glProgramUniform4uivEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX2DVPROC sf_glad_glProgramUniformMatrix2dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC sf_glad_glProgramUniformMatrix2dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC sf_glad_glProgramUniformMatrix2fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC sf_glad_glProgramUniformMatrix2fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC sf_glad_glProgramUniformMatrix2x3dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC sf_glad_glProgramUniformMatrix2x3dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC sf_glad_glProgramUniformMatrix2x3fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC sf_glad_glProgramUniformMatrix2x3fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC sf_glad_glProgramUniformMatrix2x4dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC sf_glad_glProgramUniformMatrix2x4dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC sf_glad_glProgramUniformMatrix2x4fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC sf_glad_glProgramUniformMatrix2x4fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX3DVPROC sf_glad_glProgramUniformMatrix3dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC sf_glad_glProgramUniformMatrix3dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC sf_glad_glProgramUniformMatrix3fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC sf_glad_glProgramUniformMatrix3fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC sf_glad_glProgramUniformMatrix3x2dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC sf_glad_glProgramUniformMatrix3x2dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC sf_glad_glProgramUniformMatrix3x2fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC sf_glad_glProgramUniformMatrix3x2fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC sf_glad_glProgramUniformMatrix3x4dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC sf_glad_glProgramUniformMatrix3x4dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC sf_glad_glProgramUniformMatrix3x4fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC sf_glad_glProgramUniformMatrix3x4fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX4DVPROC sf_glad_glProgramUniformMatrix4dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC sf_glad_glProgramUniformMatrix4dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC sf_glad_glProgramUniformMatrix4fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC sf_glad_glProgramUniformMatrix4fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC sf_glad_glProgramUniformMatrix4x2dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC sf_glad_glProgramUniformMatrix4x2dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC sf_glad_glProgramUniformMatrix4x2fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC sf_glad_glProgramUniformMatrix4x2fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC sf_glad_glProgramUniformMatrix4x3dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC sf_glad_glProgramUniformMatrix4x3dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC sf_glad_glProgramUniformMatrix4x3fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC sf_glad_glProgramUniformMatrix4x3fvEXT = NULL;
PFNGLPROGRAMVERTEXLIMITNVPROC sf_glad_glProgramVertexLimitNV = NULL;
PFNGLPROVOKINGVERTEXPROC sf_glad_glProvokingVertex = NULL;
PFNGLPROVOKINGVERTEXEXTPROC sf_glad_glProvokingVertexEXT = NULL;
PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC sf_glad_glPushClientAttribDefaultEXT = NULL;
PFNGLQUERYCOUNTERPROC sf_glad_glQueryCounter = NULL;
PFNGLREADBUFFERPROC sf_glad_glReadBuffer = NULL;
PFNGLREADPIXELSPROC sf_glad_glReadPixels = NULL;
PFNGLRELEASESHADERCOMPILERPROC sf_glad_glReleaseShaderCompiler = NULL;
PFNGLRENDERBUFFERSTORAGEPROC sf_glad_glRenderbufferStorage = NULL;
PFNGLRENDERBUFFERSTORAGEEXTPROC sf_glad_glRenderbufferStorageEXT = NULL;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC sf_glad_glRenderbufferStorageMultisample = NULL;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC sf_glad_glRenderbufferStorageMultisampleEXT = NULL;
PFNGLREQUESTRESIDENTPROGRAMSNVPROC sf_glad_glRequestResidentProgramsNV = NULL;
PFNGLRESUMETRANSFORMFEEDBACKPROC sf_glad_glResumeTransformFeedback = NULL;
PFNGLRESUMETRANSFORMFEEDBACKNVPROC sf_glad_glResumeTransformFeedbackNV = NULL;
PFNGLSAMPLECOVERAGEPROC sf_glad_glSampleCoverage = NULL;
PFNGLSAMPLECOVERAGEARBPROC sf_glad_glSampleCoverageARB = NULL;
PFNGLSAMPLEMASKINDEXEDNVPROC sf_glad_glSampleMaskIndexedNV = NULL;
PFNGLSAMPLEMASKIPROC sf_glad_glSampleMaski = NULL;
PFNGLSAMPLERPARAMETERIIVPROC sf_glad_glSamplerParameterIiv = NULL;
PFNGLSAMPLERPARAMETERIUIVPROC sf_glad_glSamplerParameterIuiv = NULL;
PFNGLSAMPLERPARAMETERFPROC sf_glad_glSamplerParameterf = NULL;
PFNGLSAMPLERPARAMETERFVPROC sf_glad_glSamplerParameterfv = NULL;
PFNGLSAMPLERPARAMETERIPROC sf_glad_glSamplerParameteri = NULL;
PFNGLSAMPLERPARAMETERIVPROC sf_glad_glSamplerParameteriv = NULL;
PFNGLSCISSORPROC sf_glad_glScissor = NULL;
PFNGLSCISSORARRAYVPROC sf_glad_glScissorArrayv = NULL;
PFNGLSCISSORINDEXEDPROC sf_glad_glScissorIndexed = NULL;
PFNGLSCISSORINDEXEDVPROC sf_glad_glScissorIndexedv = NULL;
PFNGLSHADERBINARYPROC sf_glad_glShaderBinary = NULL;
PFNGLSHADERSOURCEPROC sf_glad_glShaderSource = NULL;
PFNGLSHADERSOURCEARBPROC sf_glad_glShaderSourceARB = NULL;
PFNGLSTENCILFUNCPROC sf_glad_glStencilFunc = NULL;
PFNGLSTENCILFUNCSEPARATEPROC sf_glad_glStencilFuncSeparate = NULL;
PFNGLSTENCILFUNCSEPARATEATIPROC sf_glad_glStencilFuncSeparateATI = NULL;
PFNGLSTENCILMASKPROC sf_glad_glStencilMask = NULL;
PFNGLSTENCILMASKSEPARATEPROC sf_glad_glStencilMaskSeparate = NULL;
PFNGLSTENCILOPPROC sf_glad_glStencilOp = NULL;
PFNGLSTENCILOPSEPARATEPROC sf_glad_glStencilOpSeparate = NULL;
PFNGLSTENCILOPSEPARATEATIPROC sf_glad_glStencilOpSeparateATI = NULL;
PFNGLTEXBUFFERPROC sf_glad_glTexBuffer = NULL;
PFNGLTEXBUFFERARBPROC sf_glad_glTexBufferARB = NULL;
PFNGLTEXBUFFEREXTPROC sf_glad_glTexBufferEXT = NULL;
PFNGLTEXCOORDPOINTEREXTPROC sf_glad_glTexCoordPointerEXT = NULL;
PFNGLTEXIMAGE1DPROC sf_glad_glTexImage1D = NULL;
PFNGLTEXIMAGE2DPROC sf_glad_glTexImage2D = NULL;
PFNGLTEXIMAGE2DMULTISAMPLEPROC sf_glad_glTexImage2DMultisample = NULL;
PFNGLTEXIMAGE3DPROC sf_glad_glTexImage3D = NULL;
PFNGLTEXIMAGE3DEXTPROC sf_glad_glTexImage3DEXT = NULL;
PFNGLTEXIMAGE3DMULTISAMPLEPROC sf_glad_glTexImage3DMultisample = NULL;
PFNGLTEXPARAMETERIIVPROC sf_glad_glTexParameterIiv = NULL;
PFNGLTEXPARAMETERIIVEXTPROC sf_glad_glTexParameterIivEXT = NULL;
PFNGLTEXPARAMETERIUIVPROC sf_glad_glTexParameterIuiv = NULL;
PFNGLTEXPARAMETERIUIVEXTPROC sf_glad_glTexParameterIuivEXT = NULL;
PFNGLTEXPARAMETERFPROC sf_glad_glTexParameterf = NULL;
PFNGLTEXPARAMETERFVPROC sf_glad_glTexParameterfv = NULL;
PFNGLTEXPARAMETERIPROC sf_glad_glTexParameteri = NULL;
PFNGLTEXPARAMETERIVPROC sf_glad_glTexParameteriv = NULL;
PFNGLTEXRENDERBUFFERNVPROC sf_glad_glTexRenderbufferNV = NULL;
PFNGLTEXSUBIMAGE1DPROC sf_glad_glTexSubImage1D = NULL;
PFNGLTEXSUBIMAGE1DEXTPROC sf_glad_glTexSubImage1DEXT = NULL;
PFNGLTEXSUBIMAGE2DPROC sf_glad_glTexSubImage2D = NULL;
PFNGLTEXSUBIMAGE2DEXTPROC sf_glad_glTexSubImage2DEXT = NULL;
PFNGLTEXSUBIMAGE3DPROC sf_glad_glTexSubImage3D = NULL;
PFNGLTEXSUBIMAGE3DEXTPROC sf_glad_glTexSubImage3DEXT = NULL;
PFNGLTEXTUREBUFFEREXTPROC sf_glad_glTextureBufferEXT = NULL;
PFNGLTEXTUREBUFFERRANGEEXTPROC sf_glad_glTextureBufferRangeEXT = NULL;
PFNGLTEXTUREIMAGE1DEXTPROC sf_glad_glTextureImage1DEXT = NULL;
PFNGLTEXTUREIMAGE2DEXTPROC sf_glad_glTextureImage2DEXT = NULL;
PFNGLTEXTUREIMAGE3DEXTPROC sf_glad_glTextureImage3DEXT = NULL;
PFNGLTEXTUREPAGECOMMITMENTEXTPROC sf_glad_glTexturePageCommitmentEXT = NULL;
PFNGLTEXTUREPARAMETERIIVEXTPROC sf_glad_glTextureParameterIivEXT = NULL;
PFNGLTEXTUREPARAMETERIUIVEXTPROC sf_glad_glTextureParameterIuivEXT = NULL;
PFNGLTEXTUREPARAMETERFEXTPROC sf_glad_glTextureParameterfEXT = NULL;
PFNGLTEXTUREPARAMETERFVEXTPROC sf_glad_glTextureParameterfvEXT = NULL;
PFNGLTEXTUREPARAMETERIEXTPROC sf_glad_glTextureParameteriEXT = NULL;
PFNGLTEXTUREPARAMETERIVEXTPROC sf_glad_glTextureParameterivEXT = NULL;
PFNGLTEXTURERENDERBUFFEREXTPROC sf_glad_glTextureRenderbufferEXT = NULL;
PFNGLTEXTURESTORAGE1DEXTPROC sf_glad_glTextureStorage1DEXT = NULL;
PFNGLTEXTURESTORAGE2DEXTPROC sf_glad_glTextureStorage2DEXT = NULL;
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC sf_glad_glTextureStorage2DMultisampleEXT = NULL;
PFNGLTEXTURESTORAGE3DEXTPROC sf_glad_glTextureStorage3DEXT = NULL;
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC sf_glad_glTextureStorage3DMultisampleEXT = NULL;
PFNGLTEXTURESUBIMAGE1DEXTPROC sf_glad_glTextureSubImage1DEXT = NULL;
PFNGLTEXTURESUBIMAGE2DEXTPROC sf_glad_glTextureSubImage2DEXT = NULL;
PFNGLTEXTURESUBIMAGE3DEXTPROC sf_glad_glTextureSubImage3DEXT = NULL;
PFNGLTRACKMATRIXNVPROC sf_glad_glTrackMatrixNV = NULL;
PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC sf_glad_glTransformFeedbackAttribsNV = NULL;
PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC sf_glad_glTransformFeedbackStreamAttribsNV = NULL;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC sf_glad_glTransformFeedbackVaryings = NULL;
PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC sf_glad_glTransformFeedbackVaryingsEXT = NULL;
PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC sf_glad_glTransformFeedbackVaryingsNV = NULL;
PFNGLUNIFORM1DPROC sf_glad_glUniform1d = NULL;
PFNGLUNIFORM1DVPROC sf_glad_glUniform1dv = NULL;
PFNGLUNIFORM1FPROC sf_glad_glUniform1f = NULL;
PFNGLUNIFORM1FARBPROC sf_glad_glUniform1fARB = NULL;
PFNGLUNIFORM1FVPROC sf_glad_glUniform1fv = NULL;
PFNGLUNIFORM1FVARBPROC sf_glad_glUniform1fvARB = NULL;
PFNGLUNIFORM1IPROC sf_glad_glUniform1i = NULL;
PFNGLUNIFORM1IARBPROC sf_glad_glUniform1iARB = NULL;
PFNGLUNIFORM1IVPROC sf_glad_glUniform1iv = NULL;
PFNGLUNIFORM1IVARBPROC sf_glad_glUniform1ivARB = NULL;
PFNGLUNIFORM1UIPROC sf_glad_glUniform1ui = NULL;
PFNGLUNIFORM1UIEXTPROC sf_glad_glUniform1uiEXT = NULL;
PFNGLUNIFORM1UIVPROC sf_glad_glUniform1uiv = NULL;
PFNGLUNIFORM1UIVEXTPROC sf_glad_glUniform1uivEXT = NULL;
PFNGLUNIFORM2DPROC sf_glad_glUniform2d = NULL;
PFNGLUNIFORM2DVPROC sf_glad_glUniform2dv = NULL;
PFNGLUNIFORM2FPROC sf_glad_glUniform2f = NULL;
PFNGLUNIFORM2FARBPROC sf_glad_glUniform2fARB = NULL;
PFNGLUNIFORM2FVPROC sf_glad_glUniform2fv = NULL;
PFNGLUNIFORM2FVARBPROC sf_glad_glUniform2fvARB = NULL;
PFNGLUNIFORM2IPROC sf_glad_glUniform2i = NULL;
PFNGLUNIFORM2IARBPROC sf_glad_glUniform2iARB = NULL;
PFNGLUNIFORM2IVPROC sf_glad_glUniform2iv = NULL;
PFNGLUNIFORM2IVARBPROC sf_glad_glUniform2ivARB = NULL;
PFNGLUNIFORM2UIPROC sf_glad_glUniform2ui = NULL;
PFNGLUNIFORM2UIEXTPROC sf_glad_glUniform2uiEXT = NULL;
PFNGLUNIFORM2UIVPROC sf_glad_glUniform2uiv = NULL;
PFNGLUNIFORM2UIVEXTPROC sf_glad_glUniform2uivEXT = NULL;
PFNGLUNIFORM3DPROC sf_glad_glUniform3d = NULL;
PFNGLUNIFORM3DVPROC sf_glad_glUniform3dv = NULL;
PFNGLUNIFORM3FPROC sf_glad_glUniform3f = NULL;
PFNGLUNIFORM3FARBPROC sf_glad_glUniform3fARB = NULL;
PFNGLUNIFORM3FVPROC sf_glad_glUniform3fv = NULL;
PFNGLUNIFORM3FVARBPROC sf_glad_glUniform3fvARB = NULL;
PFNGLUNIFORM3IPROC sf_glad_glUniform3i = NULL;
PFNGLUNIFORM3IARBPROC sf_glad_glUniform3iARB = NULL;
PFNGLUNIFORM3IVPROC sf_glad_glUniform3iv = NULL;
PFNGLUNIFORM3IVARBPROC sf_glad_glUniform3ivARB = NULL;
PFNGLUNIFORM3UIPROC sf_glad_glUniform3ui = NULL;
PFNGLUNIFORM3UIEXTPROC sf_glad_glUniform3uiEXT = NULL;
PFNGLUNIFORM3UIVPROC sf_glad_glUniform3uiv = NULL;
PFNGLUNIFORM3UIVEXTPROC sf_glad_glUniform3uivEXT = NULL;
PFNGLUNIFORM4DPROC sf_glad_glUniform4d = NULL;
PFNGLUNIFORM4DVPROC sf_glad_glUniform4dv = NULL;
PFNGLUNIFORM4FPROC sf_glad_glUniform4f = NULL;
PFNGLUNIFORM4FARBPROC sf_glad_glUniform4fARB = NULL;
PFNGLUNIFORM4FVPROC sf_glad_glUniform4fv = NULL;
PFNGLUNIFORM4FVARBPROC sf_glad_glUniform4fvARB = NULL;
PFNGLUNIFORM4IPROC sf_glad_glUniform4i = NULL;
PFNGLUNIFORM4IARBPROC sf_glad_glUniform4iARB = NULL;
PFNGLUNIFORM4IVPROC sf_glad_glUniform4iv = NULL;
PFNGLUNIFORM4IVARBPROC sf_glad_glUniform4ivARB = NULL;
PFNGLUNIFORM4UIPROC sf_glad_glUniform4ui = NULL;
PFNGLUNIFORM4UIEXTPROC sf_glad_glUniform4uiEXT = NULL;
PFNGLUNIFORM4UIVPROC sf_glad_glUniform4uiv = NULL;
PFNGLUNIFORM4UIVEXTPROC sf_glad_glUniform4uivEXT = NULL;
PFNGLUNIFORMBLOCKBINDINGPROC sf_glad_glUniformBlockBinding = NULL;
PFNGLUNIFORMMATRIX2DVPROC sf_glad_glUniformMatrix2dv = NULL;
PFNGLUNIFORMMATRIX2FVPROC sf_glad_glUniformMatrix2fv = NULL;
PFNGLUNIFORMMATRIX2FVARBPROC sf_glad_glUniformMatrix2fvARB = NULL;
PFNGLUNIFORMMATRIX2X3DVPROC sf_glad_glUniformMatrix2x3dv = NULL;
PFNGLUNIFORMMATRIX2X3FVPROC sf_glad_glUniformMatrix2x3fv = NULL;
PFNGLUNIFORMMATRIX2X4DVPROC sf_glad_glUniformMatrix2x4dv = NULL;
PFNGLUNIFORMMATRIX2X4FVPROC sf_glad_glUniformMatrix2x4fv = NULL;
PFNGLUNIFORMMATRIX3DVPROC sf_glad_glUniformMatrix3dv = NULL;
PFNGLUNIFORMMATRIX3FVPROC sf_glad_glUniformMatrix3fv = NULL;
PFNGLUNIFORMMATRIX3FVARBPROC sf_glad_glUniformMatrix3fvARB = NULL;
PFNGLUNIFORMMATRIX3X2DVPROC sf_glad_glUniformMatrix3x2dv = NULL;
PFNGLUNIFORMMATRIX3X2FVPROC sf_glad_glUniformMatrix3x2fv = NULL;
PFNGLUNIFORMMATRIX3X4DVPROC sf_glad_glUniformMatrix3x4dv = NULL;
PFNGLUNIFORMMATRIX3X4FVPROC sf_glad_glUniformMatrix3x4fv = NULL;
PFNGLUNIFORMMATRIX4DVPROC sf_glad_glUniformMatrix4dv = NULL;
PFNGLUNIFORMMATRIX4FVPROC sf_glad_glUniformMatrix4fv = NULL;
PFNGLUNIFORMMATRIX4FVARBPROC sf_glad_glUniformMatrix4fvARB = NULL;
PFNGLUNIFORMMATRIX4X2DVPROC sf_glad_glUniformMatrix4x2dv = NULL;
PFNGLUNIFORMMATRIX4X2FVPROC sf_glad_glUniformMatrix4x2fv = NULL;
PFNGLUNIFORMMATRIX4X3DVPROC sf_glad_glUniformMatrix4x3dv = NULL;
PFNGLUNIFORMMATRIX4X3FVPROC sf_glad_glUniformMatrix4x3fv = NULL;
PFNGLUNIFORMSUBROUTINESUIVPROC sf_glad_glUniformSubroutinesuiv = NULL;
PFNGLUNMAPBUFFERPROC sf_glad_glUnmapBuffer = NULL;
PFNGLUNMAPBUFFERARBPROC sf_glad_glUnmapBufferARB = NULL;
PFNGLUNMAPNAMEDBUFFEREXTPROC sf_glad_glUnmapNamedBufferEXT = NULL;
PFNGLUSEPROGRAMPROC sf_glad_glUseProgram = NULL;
PFNGLUSEPROGRAMOBJECTARBPROC sf_glad_glUseProgramObjectARB = NULL;
PFNGLUSEPROGRAMSTAGESPROC sf_glad_glUseProgramStages = NULL;
PFNGLVALIDATEPROGRAMPROC sf_glad_glValidateProgram = NULL;
PFNGLVALIDATEPROGRAMARBPROC sf_glad_glValidateProgramARB = NULL;
PFNGLVALIDATEPROGRAMPIPELINEPROC sf_glad_glValidateProgramPipeline = NULL;
PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC sf_glad_glVertexArrayBindVertexBufferEXT = NULL;
PFNGLVERTEXARRAYCOLOROFFSETEXTPROC sf_glad_glVertexArrayColorOffsetEXT = NULL;
PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC sf_glad_glVertexArrayEdgeFlagOffsetEXT = NULL;
PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC sf_glad_glVertexArrayFogCoordOffsetEXT = NULL;
PFNGLVERTEXARRAYINDEXOFFSETEXTPROC sf_glad_glVertexArrayIndexOffsetEXT = NULL;
PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC sf_glad_glVertexArrayMultiTexCoordOffsetEXT = NULL;
PFNGLVERTEXARRAYNORMALOFFSETEXTPROC sf_glad_glVertexArrayNormalOffsetEXT = NULL;
PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC sf_glad_glVertexArraySecondaryColorOffsetEXT = NULL;
PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC sf_glad_glVertexArrayTexCoordOffsetEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC sf_glad_glVertexArrayVertexAttribBindingEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC sf_glad_glVertexArrayVertexAttribDivisorEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC sf_glad_glVertexArrayVertexAttribFormatEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC sf_glad_glVertexArrayVertexAttribIFormatEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC sf_glad_glVertexArrayVertexAttribIOffsetEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC sf_glad_glVertexArrayVertexAttribLFormatEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC sf_glad_glVertexArrayVertexAttribLOffsetEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC sf_glad_glVertexArrayVertexAttribOffsetEXT = NULL;
PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC sf_glad_glVertexArrayVertexBindingDivisorEXT = NULL;
PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC sf_glad_glVertexArrayVertexOffsetEXT = NULL;
PFNGLVERTEXATTRIB1DPROC sf_glad_glVertexAttrib1d = NULL;
PFNGLVERTEXATTRIB1DARBPROC sf_glad_glVertexAttrib1dARB = NULL;
PFNGLVERTEXATTRIB1DNVPROC sf_glad_glVertexAttrib1dNV = NULL;
PFNGLVERTEXATTRIB1DVPROC sf_glad_glVertexAttrib1dv = NULL;
PFNGLVERTEXATTRIB1DVARBPROC sf_glad_glVertexAttrib1dvARB = NULL;
PFNGLVERTEXATTRIB1DVNVPROC sf_glad_glVertexAttrib1dvNV = NULL;
PFNGLVERTEXATTRIB1FPROC sf_glad_glVertexAttrib1f = NULL;
PFNGLVERTEXATTRIB1FARBPROC sf_glad_glVertexAttrib1fARB = NULL;
PFNGLVERTEXATTRIB1FNVPROC sf_glad_glVertexAttrib1fNV = NULL;
PFNGLVERTEXATTRIB1FVPROC sf_glad_glVertexAttrib1fv = NULL;
PFNGLVERTEXATTRIB1FVARBPROC sf_glad_glVertexAttrib1fvARB = NULL;
PFNGLVERTEXATTRIB1FVNVPROC sf_glad_glVertexAttrib1fvNV = NULL;
PFNGLVERTEXATTRIB1SPROC sf_glad_glVertexAttrib1s = NULL;
PFNGLVERTEXATTRIB1SARBPROC sf_glad_glVertexAttrib1sARB = NULL;
PFNGLVERTEXATTRIB1SNVPROC sf_glad_glVertexAttrib1sNV = NULL;
PFNGLVERTEXATTRIB1SVPROC sf_glad_glVertexAttrib1sv = NULL;
PFNGLVERTEXATTRIB1SVARBPROC sf_glad_glVertexAttrib1svARB = NULL;
PFNGLVERTEXATTRIB1SVNVPROC sf_glad_glVertexAttrib1svNV = NULL;
PFNGLVERTEXATTRIB2DPROC sf_glad_glVertexAttrib2d = NULL;
PFNGLVERTEXATTRIB2DARBPROC sf_glad_glVertexAttrib2dARB = NULL;
PFNGLVERTEXATTRIB2DNVPROC sf_glad_glVertexAttrib2dNV = NULL;
PFNGLVERTEXATTRIB2DVPROC sf_glad_glVertexAttrib2dv = NULL;
PFNGLVERTEXATTRIB2DVARBPROC sf_glad_glVertexAttrib2dvARB = NULL;
PFNGLVERTEXATTRIB2DVNVPROC sf_glad_glVertexAttrib2dvNV = NULL;
PFNGLVERTEXATTRIB2FPROC sf_glad_glVertexAttrib2f = NULL;
PFNGLVERTEXATTRIB2FARBPROC sf_glad_glVertexAttrib2fARB = NULL;
PFNGLVERTEXATTRIB2FNVPROC sf_glad_glVertexAttrib2fNV = NULL;
PFNGLVERTEXATTRIB2FVPROC sf_glad_glVertexAttrib2fv = NULL;
PFNGLVERTEXATTRIB2FVARBPROC sf_glad_glVertexAttrib2fvARB = NULL;
PFNGLVERTEXATTRIB2FVNVPROC sf_glad_glVertexAttrib2fvNV = NULL;
PFNGLVERTEXATTRIB2SPROC sf_glad_glVertexAttrib2s = NULL;
PFNGLVERTEXATTRIB2SARBPROC sf_glad_glVertexAttrib2sARB = NULL;
PFNGLVERTEXATTRIB2SNVPROC sf_glad_glVertexAttrib2sNV = NULL;
PFNGLVERTEXATTRIB2SVPROC sf_glad_glVertexAttrib2sv = NULL;
PFNGLVERTEXATTRIB2SVARBPROC sf_glad_glVertexAttrib2svARB = NULL;
PFNGLVERTEXATTRIB2SVNVPROC sf_glad_glVertexAttrib2svNV = NULL;
PFNGLVERTEXATTRIB3DPROC sf_glad_glVertexAttrib3d = NULL;
PFNGLVERTEXATTRIB3DARBPROC sf_glad_glVertexAttrib3dARB = NULL;
PFNGLVERTEXATTRIB3DNVPROC sf_glad_glVertexAttrib3dNV = NULL;
PFNGLVERTEXATTRIB3DVPROC sf_glad_glVertexAttrib3dv = NULL;
PFNGLVERTEXATTRIB3DVARBPROC sf_glad_glVertexAttrib3dvARB = NULL;
PFNGLVERTEXATTRIB3DVNVPROC sf_glad_glVertexAttrib3dvNV = NULL;
PFNGLVERTEXATTRIB3FPROC sf_glad_glVertexAttrib3f = NULL;
PFNGLVERTEXATTRIB3FARBPROC sf_glad_glVertexAttrib3fARB = NULL;
PFNGLVERTEXATTRIB3FNVPROC sf_glad_glVertexAttrib3fNV = NULL;
PFNGLVERTEXATTRIB3FVPROC sf_glad_glVertexAttrib3fv = NULL;
PFNGLVERTEXATTRIB3FVARBPROC sf_glad_glVertexAttrib3fvARB = NULL;
PFNGLVERTEXATTRIB3FVNVPROC sf_glad_glVertexAttrib3fvNV = NULL;
PFNGLVERTEXATTRIB3SPROC sf_glad_glVertexAttrib3s = NULL;
PFNGLVERTEXATTRIB3SARBPROC sf_glad_glVertexAttrib3sARB = NULL;
PFNGLVERTEXATTRIB3SNVPROC sf_glad_glVertexAttrib3sNV = NULL;
PFNGLVERTEXATTRIB3SVPROC sf_glad_glVertexAttrib3sv = NULL;
PFNGLVERTEXATTRIB3SVARBPROC sf_glad_glVertexAttrib3svARB = NULL;
PFNGLVERTEXATTRIB3SVNVPROC sf_glad_glVertexAttrib3svNV = NULL;
PFNGLVERTEXATTRIB4NBVPROC sf_glad_glVertexAttrib4Nbv = NULL;
PFNGLVERTEXATTRIB4NBVARBPROC sf_glad_glVertexAttrib4NbvARB = NULL;
PFNGLVERTEXATTRIB4NIVPROC sf_glad_glVertexAttrib4Niv = NULL;
PFNGLVERTEXATTRIB4NIVARBPROC sf_glad_glVertexAttrib4NivARB = NULL;
PFNGLVERTEXATTRIB4NSVPROC sf_glad_glVertexAttrib4Nsv = NULL;
PFNGLVERTEXATTRIB4NSVARBPROC sf_glad_glVertexAttrib4NsvARB = NULL;
PFNGLVERTEXATTRIB4NUBPROC sf_glad_glVertexAttrib4Nub = NULL;
PFNGLVERTEXATTRIB4NUBARBPROC sf_glad_glVertexAttrib4NubARB = NULL;
PFNGLVERTEXATTRIB4NUBVPROC sf_glad_glVertexAttrib4Nubv = NULL;
PFNGLVERTEXATTRIB4NUBVARBPROC sf_glad_glVertexAttrib4NubvARB = NULL;
PFNGLVERTEXATTRIB4NUIVPROC sf_glad_glVertexAttrib4Nuiv = NULL;
PFNGLVERTEXATTRIB4NUIVARBPROC sf_glad_glVertexAttrib4NuivARB = NULL;
PFNGLVERTEXATTRIB4NUSVPROC sf_glad_glVertexAttrib4Nusv = NULL;
PFNGLVERTEXATTRIB4NUSVARBPROC sf_glad_glVertexAttrib4NusvARB = NULL;
PFNGLVERTEXATTRIB4BVPROC sf_glad_glVertexAttrib4bv = NULL;
PFNGLVERTEXATTRIB4BVARBPROC sf_glad_glVertexAttrib4bvARB = NULL;
PFNGLVERTEXATTRIB4DPROC sf_glad_glVertexAttrib4d = NULL;
PFNGLVERTEXATTRIB4DARBPROC sf_glad_glVertexAttrib4dARB = NULL;
PFNGLVERTEXATTRIB4DNVPROC sf_glad_glVertexAttrib4dNV = NULL;
PFNGLVERTEXATTRIB4DVPROC sf_glad_glVertexAttrib4dv = NULL;
PFNGLVERTEXATTRIB4DVARBPROC sf_glad_glVertexAttrib4dvARB = NULL;
PFNGLVERTEXATTRIB4DVNVPROC sf_glad_glVertexAttrib4dvNV = NULL;
PFNGLVERTEXATTRIB4FPROC sf_glad_glVertexAttrib4f = NULL;
PFNGLVERTEXATTRIB4FARBPROC sf_glad_glVertexAttrib4fARB = NULL;
PFNGLVERTEXATTRIB4FNVPROC sf_glad_glVertexAttrib4fNV = NULL;
PFNGLVERTEXATTRIB4FVPROC sf_glad_glVertexAttrib4fv = NULL;
PFNGLVERTEXATTRIB4FVARBPROC sf_glad_glVertexAttrib4fvARB = NULL;
PFNGLVERTEXATTRIB4FVNVPROC sf_glad_glVertexAttrib4fvNV = NULL;
PFNGLVERTEXATTRIB4IVPROC sf_glad_glVertexAttrib4iv = NULL;
PFNGLVERTEXATTRIB4IVARBPROC sf_glad_glVertexAttrib4ivARB = NULL;
PFNGLVERTEXATTRIB4SPROC sf_glad_glVertexAttrib4s = NULL;
PFNGLVERTEXATTRIB4SARBPROC sf_glad_glVertexAttrib4sARB = NULL;
PFNGLVERTEXATTRIB4SNVPROC sf_glad_glVertexAttrib4sNV = NULL;
PFNGLVERTEXATTRIB4SVPROC sf_glad_glVertexAttrib4sv = NULL;
PFNGLVERTEXATTRIB4SVARBPROC sf_glad_glVertexAttrib4svARB = NULL;
PFNGLVERTEXATTRIB4SVNVPROC sf_glad_glVertexAttrib4svNV = NULL;
PFNGLVERTEXATTRIB4UBNVPROC sf_glad_glVertexAttrib4ubNV = NULL;
PFNGLVERTEXATTRIB4UBVPROC sf_glad_glVertexAttrib4ubv = NULL;
PFNGLVERTEXATTRIB4UBVARBPROC sf_glad_glVertexAttrib4ubvARB = NULL;
PFNGLVERTEXATTRIB4UBVNVPROC sf_glad_glVertexAttrib4ubvNV = NULL;
PFNGLVERTEXATTRIB4UIVPROC sf_glad_glVertexAttrib4uiv = NULL;
PFNGLVERTEXATTRIB4UIVARBPROC sf_glad_glVertexAttrib4uivARB = NULL;
PFNGLVERTEXATTRIB4USVPROC sf_glad_glVertexAttrib4usv = NULL;
PFNGLVERTEXATTRIB4USVARBPROC sf_glad_glVertexAttrib4usvARB = NULL;
PFNGLVERTEXATTRIBDIVISORPROC sf_glad_glVertexAttribDivisor = NULL;
PFNGLVERTEXATTRIBDIVISORARBPROC sf_glad_glVertexAttribDivisorARB = NULL;
PFNGLVERTEXATTRIBI1IPROC sf_glad_glVertexAttribI1i = NULL;
PFNGLVERTEXATTRIBI1IEXTPROC sf_glad_glVertexAttribI1iEXT = NULL;
PFNGLVERTEXATTRIBI1IVPROC sf_glad_glVertexAttribI1iv = NULL;
PFNGLVERTEXATTRIBI1IVEXTPROC sf_glad_glVertexAttribI1ivEXT = NULL;
PFNGLVERTEXATTRIBI1UIPROC sf_glad_glVertexAttribI1ui = NULL;
PFNGLVERTEXATTRIBI1UIEXTPROC sf_glad_glVertexAttribI1uiEXT = NULL;
PFNGLVERTEXATTRIBI1UIVPROC sf_glad_glVertexAttribI1uiv = NULL;
PFNGLVERTEXATTRIBI1UIVEXTPROC sf_glad_glVertexAttribI1uivEXT = NULL;
PFNGLVERTEXATTRIBI2IPROC sf_glad_glVertexAttribI2i = NULL;
PFNGLVERTEXATTRIBI2IEXTPROC sf_glad_glVertexAttribI2iEXT = NULL;
PFNGLVERTEXATTRIBI2IVPROC sf_glad_glVertexAttribI2iv = NULL;
PFNGLVERTEXATTRIBI2IVEXTPROC sf_glad_glVertexAttribI2ivEXT = NULL;
PFNGLVERTEXATTRIBI2UIPROC sf_glad_glVertexAttribI2ui = NULL;
PFNGLVERTEXATTRIBI2UIEXTPROC sf_glad_glVertexAttribI2uiEXT = NULL;
PFNGLVERTEXATTRIBI2UIVPROC sf_glad_glVertexAttribI2uiv = NULL;
PFNGLVERTEXATTRIBI2UIVEXTPROC sf_glad_glVertexAttribI2uivEXT = NULL;
PFNGLVERTEXATTRIBI3IPROC sf_glad_glVertexAttribI3i = NULL;
PFNGLVERTEXATTRIBI3IEXTPROC sf_glad_glVertexAttribI3iEXT = NULL;
PFNGLVERTEXATTRIBI3IVPROC sf_glad_glVertexAttribI3iv = NULL;
PFNGLVERTEXATTRIBI3IVEXTPROC sf_glad_glVertexAttribI3ivEXT = NULL;
PFNGLVERTEXATTRIBI3UIPROC sf_glad_glVertexAttribI3ui = NULL;
PFNGLVERTEXATTRIBI3UIEXTPROC sf_glad_glVertexAttribI3uiEXT = NULL;
PFNGLVERTEXATTRIBI3UIVPROC sf_glad_glVertexAttribI3uiv = NULL;
PFNGLVERTEXATTRIBI3UIVEXTPROC sf_glad_glVertexAttribI3uivEXT = NULL;
PFNGLVERTEXATTRIBI4BVPROC sf_glad_glVertexAttribI4bv = NULL;
PFNGLVERTEXATTRIBI4BVEXTPROC sf_glad_glVertexAttribI4bvEXT = NULL;
PFNGLVERTEXATTRIBI4IPROC sf_glad_glVertexAttribI4i = NULL;
PFNGLVERTEXATTRIBI4IEXTPROC sf_glad_glVertexAttribI4iEXT = NULL;
PFNGLVERTEXATTRIBI4IVPROC sf_glad_glVertexAttribI4iv = NULL;
PFNGLVERTEXATTRIBI4IVEXTPROC sf_glad_glVertexAttribI4ivEXT = NULL;
PFNGLVERTEXATTRIBI4SVPROC sf_glad_glVertexAttribI4sv = NULL;
PFNGLVERTEXATTRIBI4SVEXTPROC sf_glad_glVertexAttribI4svEXT = NULL;
PFNGLVERTEXATTRIBI4UBVPROC sf_glad_glVertexAttribI4ubv = NULL;
PFNGLVERTEXATTRIBI4UBVEXTPROC sf_glad_glVertexAttribI4ubvEXT = NULL;
PFNGLVERTEXATTRIBI4UIPROC sf_glad_glVertexAttribI4ui = NULL;
PFNGLVERTEXATTRIBI4UIEXTPROC sf_glad_glVertexAttribI4uiEXT = NULL;
PFNGLVERTEXATTRIBI4UIVPROC sf_glad_glVertexAttribI4uiv = NULL;
PFNGLVERTEXATTRIBI4UIVEXTPROC sf_glad_glVertexAttribI4uivEXT = NULL;
PFNGLVERTEXATTRIBI4USVPROC sf_glad_glVertexAttribI4usv = NULL;
PFNGLVERTEXATTRIBI4USVEXTPROC sf_glad_glVertexAttribI4usvEXT = NULL;
PFNGLVERTEXATTRIBIPOINTERPROC sf_glad_glVertexAttribIPointer = NULL;
PFNGLVERTEXATTRIBIPOINTEREXTPROC sf_glad_glVertexAttribIPointerEXT = NULL;
PFNGLVERTEXATTRIBL1DPROC sf_glad_glVertexAttribL1d = NULL;
PFNGLVERTEXATTRIBL1DEXTPROC sf_glad_glVertexAttribL1dEXT = NULL;
PFNGLVERTEXATTRIBL1DVPROC sf_glad_glVertexAttribL1dv = NULL;
PFNGLVERTEXATTRIBL1DVEXTPROC sf_glad_glVertexAttribL1dvEXT = NULL;
PFNGLVERTEXATTRIBL2DPROC sf_glad_glVertexAttribL2d = NULL;
PFNGLVERTEXATTRIBL2DEXTPROC sf_glad_glVertexAttribL2dEXT = NULL;
PFNGLVERTEXATTRIBL2DVPROC sf_glad_glVertexAttribL2dv = NULL;
PFNGLVERTEXATTRIBL2DVEXTPROC sf_glad_glVertexAttribL2dvEXT = NULL;
PFNGLVERTEXATTRIBL3DPROC sf_glad_glVertexAttribL3d = NULL;
PFNGLVERTEXATTRIBL3DEXTPROC sf_glad_glVertexAttribL3dEXT = NULL;
PFNGLVERTEXATTRIBL3DVPROC sf_glad_glVertexAttribL3dv = NULL;
PFNGLVERTEXATTRIBL3DVEXTPROC sf_glad_glVertexAttribL3dvEXT = NULL;
PFNGLVERTEXATTRIBL4DPROC sf_glad_glVertexAttribL4d = NULL;
PFNGLVERTEXATTRIBL4DEXTPROC sf_glad_glVertexAttribL4dEXT = NULL;
PFNGLVERTEXATTRIBL4DVPROC sf_glad_glVertexAttribL4dv = NULL;
PFNGLVERTEXATTRIBL4DVEXTPROC sf_glad_glVertexAttribL4dvEXT = NULL;
PFNGLVERTEXATTRIBLPOINTERPROC sf_glad_glVertexAttribLPointer = NULL;
PFNGLVERTEXATTRIBLPOINTEREXTPROC sf_glad_glVertexAttribLPointerEXT = NULL;
PFNGLVERTEXATTRIBP1UIPROC sf_glad_glVertexAttribP1ui = NULL;
PFNGLVERTEXATTRIBP1UIVPROC sf_glad_glVertexAttribP1uiv = NULL;
PFNGLVERTEXATTRIBP2UIPROC sf_glad_glVertexAttribP2ui = NULL;
PFNGLVERTEXATTRIBP2UIVPROC sf_glad_glVertexAttribP2uiv = NULL;
PFNGLVERTEXATTRIBP3UIPROC sf_glad_glVertexAttribP3ui = NULL;
PFNGLVERTEXATTRIBP3UIVPROC sf_glad_glVertexAttribP3uiv = NULL;
PFNGLVERTEXATTRIBP4UIPROC sf_glad_glVertexAttribP4ui = NULL;
PFNGLVERTEXATTRIBP4UIVPROC sf_glad_glVertexAttribP4uiv = NULL;
PFNGLVERTEXATTRIBPOINTERPROC sf_glad_glVertexAttribPointer = NULL;
PFNGLVERTEXATTRIBPOINTERARBPROC sf_glad_glVertexAttribPointerARB = NULL;
PFNGLVERTEXATTRIBPOINTERNVPROC sf_glad_glVertexAttribPointerNV = NULL;
PFNGLVERTEXATTRIBS1DVNVPROC sf_glad_glVertexAttribs1dvNV = NULL;
PFNGLVERTEXATTRIBS1FVNVPROC sf_glad_glVertexAttribs1fvNV = NULL;
PFNGLVERTEXATTRIBS1SVNVPROC sf_glad_glVertexAttribs1svNV = NULL;
PFNGLVERTEXATTRIBS2DVNVPROC sf_glad_glVertexAttribs2dvNV = NULL;
PFNGLVERTEXATTRIBS2FVNVPROC sf_glad_glVertexAttribs2fvNV = NULL;
PFNGLVERTEXATTRIBS2SVNVPROC sf_glad_glVertexAttribs2svNV = NULL;
PFNGLVERTEXATTRIBS3DVNVPROC sf_glad_glVertexAttribs3dvNV = NULL;
PFNGLVERTEXATTRIBS3FVNVPROC sf_glad_glVertexAttribs3fvNV = NULL;
PFNGLVERTEXATTRIBS3SVNVPROC sf_glad_glVertexAttribs3svNV = NULL;
PFNGLVERTEXATTRIBS4DVNVPROC sf_glad_glVertexAttribs4dvNV = NULL;
PFNGLVERTEXATTRIBS4FVNVPROC sf_glad_glVertexAttribs4fvNV = NULL;
PFNGLVERTEXATTRIBS4SVNVPROC sf_glad_glVertexAttribs4svNV = NULL;
PFNGLVERTEXATTRIBS4UBVNVPROC sf_glad_glVertexAttribs4ubvNV = NULL;
PFNGLVERTEXPOINTEREXTPROC sf_glad_glVertexPointerEXT = NULL;
PFNGLVIEWPORTPROC sf_glad_glViewport = NULL;
PFNGLVIEWPORTARRAYVPROC sf_glad_glViewportArrayv = NULL;
PFNGLVIEWPORTINDEXEDFPROC sf_glad_glViewportIndexedf = NULL;
PFNGLVIEWPORTINDEXEDFVPROC sf_glad_glViewportIndexedfv = NULL;
PFNGLWAITSYNCPROC sf_glad_glWaitSync = NULL;


static void sf_glad_gl_load_GL_VERSION_1_0( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_1_0) return;
    sf_glad_glBlendFunc = (PFNGLBLENDFUNCPROC) load(userptr, "glBlendFunc");
    sf_glad_glClear = (PFNGLCLEARPROC) load(userptr, "glClear");
    sf_glad_glClearColor = (PFNGLCLEARCOLORPROC) load(userptr, "glClearColor");
    sf_glad_glClearDepth = (PFNGLCLEARDEPTHPROC) load(userptr, "glClearDepth");
    sf_glad_glClearStencil = (PFNGLCLEARSTENCILPROC) load(userptr, "glClearStencil");
    sf_glad_glColorMask = (PFNGLCOLORMASKPROC) load(userptr, "glColorMask");
    sf_glad_glCullFace = (PFNGLCULLFACEPROC) load(userptr, "glCullFace");
    sf_glad_glDepthFunc = (PFNGLDEPTHFUNCPROC) load(userptr, "glDepthFunc");
    sf_glad_glDepthMask = (PFNGLDEPTHMASKPROC) load(userptr, "glDepthMask");
    sf_glad_glDepthRange = (PFNGLDEPTHRANGEPROC) load(userptr, "glDepthRange");
    sf_glad_glDisable = (PFNGLDISABLEPROC) load(userptr, "glDisable");
    sf_glad_glDrawBuffer = (PFNGLDRAWBUFFERPROC) load(userptr, "glDrawBuffer");
    sf_glad_glEnable = (PFNGLENABLEPROC) load(userptr, "glEnable");
    sf_glad_glFinish = (PFNGLFINISHPROC) load(userptr, "glFinish");
    sf_glad_glFlush = (PFNGLFLUSHPROC) load(userptr, "glFlush");
    sf_glad_glFrontFace = (PFNGLFRONTFACEPROC) load(userptr, "glFrontFace");
    sf_glad_glGetBooleanv = (PFNGLGETBOOLEANVPROC) load(userptr, "glGetBooleanv");
    sf_glad_glGetDoublev = (PFNGLGETDOUBLEVPROC) load(userptr, "glGetDoublev");
    sf_glad_glGetError = (PFNGLGETERRORPROC) load(userptr, "glGetError");
    sf_glad_glGetFloatv = (PFNGLGETFLOATVPROC) load(userptr, "glGetFloatv");
    sf_glad_glGetIntegerv = (PFNGLGETINTEGERVPROC) load(userptr, "glGetIntegerv");
    sf_glad_glGetString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    sf_glad_glGetTexImage = (PFNGLGETTEXIMAGEPROC) load(userptr, "glGetTexImage");
    sf_glad_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC) load(userptr, "glGetTexLevelParameterfv");
    sf_glad_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC) load(userptr, "glGetTexLevelParameteriv");
    sf_glad_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC) load(userptr, "glGetTexParameterfv");
    sf_glad_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC) load(userptr, "glGetTexParameteriv");
    sf_glad_glHint = (PFNGLHINTPROC) load(userptr, "glHint");
    sf_glad_glIsEnabled = (PFNGLISENABLEDPROC) load(userptr, "glIsEnabled");
    sf_glad_glLineWidth = (PFNGLLINEWIDTHPROC) load(userptr, "glLineWidth");
    sf_glad_glLogicOp = (PFNGLLOGICOPPROC) load(userptr, "glLogicOp");
    sf_glad_glPixelStoref = (PFNGLPIXELSTOREFPROC) load(userptr, "glPixelStoref");
    sf_glad_glPixelStorei = (PFNGLPIXELSTOREIPROC) load(userptr, "glPixelStorei");
    sf_glad_glPointSize = (PFNGLPOINTSIZEPROC) load(userptr, "glPointSize");
    sf_glad_glPolygonMode = (PFNGLPOLYGONMODEPROC) load(userptr, "glPolygonMode");
    sf_glad_glReadBuffer = (PFNGLREADBUFFERPROC) load(userptr, "glReadBuffer");
    sf_glad_glReadPixels = (PFNGLREADPIXELSPROC) load(userptr, "glReadPixels");
    sf_glad_glScissor = (PFNGLSCISSORPROC) load(userptr, "glScissor");
    sf_glad_glStencilFunc = (PFNGLSTENCILFUNCPROC) load(userptr, "glStencilFunc");
    sf_glad_glStencilMask = (PFNGLSTENCILMASKPROC) load(userptr, "glStencilMask");
    sf_glad_glStencilOp = (PFNGLSTENCILOPPROC) load(userptr, "glStencilOp");
    sf_glad_glTexImage1D = (PFNGLTEXIMAGE1DPROC) load(userptr, "glTexImage1D");
    sf_glad_glTexImage2D = (PFNGLTEXIMAGE2DPROC) load(userptr, "glTexImage2D");
    sf_glad_glTexParameterf = (PFNGLTEXPARAMETERFPROC) load(userptr, "glTexParameterf");
    sf_glad_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC) load(userptr, "glTexParameterfv");
    sf_glad_glTexParameteri = (PFNGLTEXPARAMETERIPROC) load(userptr, "glTexParameteri");
    sf_glad_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC) load(userptr, "glTexParameteriv");
    sf_glad_glViewport = (PFNGLVIEWPORTPROC) load(userptr, "glViewport");
}
static void sf_glad_gl_load_GL_VERSION_1_1( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_1_1) return;
    sf_glad_glBindTexture = (PFNGLBINDTEXTUREPROC) load(userptr, "glBindTexture");
    sf_glad_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC) load(userptr, "glCopyTexImage1D");
    sf_glad_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) load(userptr, "glCopyTexImage2D");
    sf_glad_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC) load(userptr, "glCopyTexSubImage1D");
    sf_glad_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) load(userptr, "glCopyTexSubImage2D");
    sf_glad_glDeleteTextures = (PFNGLDELETETEXTURESPROC) load(userptr, "glDeleteTextures");
    sf_glad_glDrawArrays = (PFNGLDRAWARRAYSPROC) load(userptr, "glDrawArrays");
    sf_glad_glDrawElements = (PFNGLDRAWELEMENTSPROC) load(userptr, "glDrawElements");
    sf_glad_glGenTextures = (PFNGLGENTEXTURESPROC) load(userptr, "glGenTextures");
    sf_glad_glIsTexture = (PFNGLISTEXTUREPROC) load(userptr, "glIsTexture");
    sf_glad_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC) load(userptr, "glPolygonOffset");
    sf_glad_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC) load(userptr, "glTexSubImage1D");
    sf_glad_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) load(userptr, "glTexSubImage2D");
}
static void sf_glad_gl_load_GL_VERSION_1_2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_1_2) return;
    sf_glad_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC) load(userptr, "glCopyTexSubImage3D");
    sf_glad_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC) load(userptr, "glDrawRangeElements");
    sf_glad_glTexImage3D = (PFNGLTEXIMAGE3DPROC) load(userptr, "glTexImage3D");
    sf_glad_glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC) load(userptr, "glTexSubImage3D");
}
static void sf_glad_gl_load_GL_VERSION_1_3( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_1_3) return;
    sf_glad_glActiveTexture = (PFNGLACTIVETEXTUREPROC) load(userptr, "glActiveTexture");
    sf_glad_glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC) load(userptr, "glCompressedTexImage1D");
    sf_glad_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC) load(userptr, "glCompressedTexImage2D");
    sf_glad_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC) load(userptr, "glCompressedTexImage3D");
    sf_glad_glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) load(userptr, "glCompressedTexSubImage1D");
    sf_glad_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) load(userptr, "glCompressedTexSubImage2D");
    sf_glad_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) load(userptr, "glCompressedTexSubImage3D");
    sf_glad_glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC) load(userptr, "glGetCompressedTexImage");
    sf_glad_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC) load(userptr, "glSampleCoverage");
}
static void sf_glad_gl_load_GL_VERSION_1_4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_1_4) return;
    sf_glad_glBlendColor = (PFNGLBLENDCOLORPROC) load(userptr, "glBlendColor");
    sf_glad_glBlendEquation = (PFNGLBLENDEQUATIONPROC) load(userptr, "glBlendEquation");
    sf_glad_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC) load(userptr, "glBlendFuncSeparate");
    sf_glad_glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC) load(userptr, "glMultiDrawArrays");
    sf_glad_glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC) load(userptr, "glMultiDrawElements");
    sf_glad_glPointParameterf = (PFNGLPOINTPARAMETERFPROC) load(userptr, "glPointParameterf");
    sf_glad_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC) load(userptr, "glPointParameterfv");
    sf_glad_glPointParameteri = (PFNGLPOINTPARAMETERIPROC) load(userptr, "glPointParameteri");
    sf_glad_glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC) load(userptr, "glPointParameteriv");
}
static void sf_glad_gl_load_GL_VERSION_1_5( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_1_5) return;
    sf_glad_glBeginQuery = (PFNGLBEGINQUERYPROC) load(userptr, "glBeginQuery");
    sf_glad_glBindBuffer = (PFNGLBINDBUFFERPROC) load(userptr, "glBindBuffer");
    sf_glad_glBufferData = (PFNGLBUFFERDATAPROC) load(userptr, "glBufferData");
    sf_glad_glBufferSubData = (PFNGLBUFFERSUBDATAPROC) load(userptr, "glBufferSubData");
    sf_glad_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC) load(userptr, "glDeleteBuffers");
    sf_glad_glDeleteQueries = (PFNGLDELETEQUERIESPROC) load(userptr, "glDeleteQueries");
    sf_glad_glEndQuery = (PFNGLENDQUERYPROC) load(userptr, "glEndQuery");
    sf_glad_glGenBuffers = (PFNGLGENBUFFERSPROC) load(userptr, "glGenBuffers");
    sf_glad_glGenQueries = (PFNGLGENQUERIESPROC) load(userptr, "glGenQueries");
    sf_glad_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC) load(userptr, "glGetBufferParameteriv");
    sf_glad_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC) load(userptr, "glGetBufferPointerv");
    sf_glad_glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC) load(userptr, "glGetBufferSubData");
    sf_glad_glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC) load(userptr, "glGetQueryObjectiv");
    sf_glad_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC) load(userptr, "glGetQueryObjectuiv");
    sf_glad_glGetQueryiv = (PFNGLGETQUERYIVPROC) load(userptr, "glGetQueryiv");
    sf_glad_glIsBuffer = (PFNGLISBUFFERPROC) load(userptr, "glIsBuffer");
    sf_glad_glIsQuery = (PFNGLISQUERYPROC) load(userptr, "glIsQuery");
    sf_glad_glMapBuffer = (PFNGLMAPBUFFERPROC) load(userptr, "glMapBuffer");
    sf_glad_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC) load(userptr, "glUnmapBuffer");
}
static void sf_glad_gl_load_GL_VERSION_2_0( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_2_0) return;
    sf_glad_glAttachShader = (PFNGLATTACHSHADERPROC) load(userptr, "glAttachShader");
    sf_glad_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC) load(userptr, "glBindAttribLocation");
    sf_glad_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC) load(userptr, "glBlendEquationSeparate");
    sf_glad_glCompileShader = (PFNGLCOMPILESHADERPROC) load(userptr, "glCompileShader");
    sf_glad_glCreateProgram = (PFNGLCREATEPROGRAMPROC) load(userptr, "glCreateProgram");
    sf_glad_glCreateShader = (PFNGLCREATESHADERPROC) load(userptr, "glCreateShader");
    sf_glad_glDeleteProgram = (PFNGLDELETEPROGRAMPROC) load(userptr, "glDeleteProgram");
    sf_glad_glDeleteShader = (PFNGLDELETESHADERPROC) load(userptr, "glDeleteShader");
    sf_glad_glDetachShader = (PFNGLDETACHSHADERPROC) load(userptr, "glDetachShader");
    sf_glad_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC) load(userptr, "glDisableVertexAttribArray");
    sf_glad_glDrawBuffers = (PFNGLDRAWBUFFERSPROC) load(userptr, "glDrawBuffers");
    sf_glad_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC) load(userptr, "glEnableVertexAttribArray");
    sf_glad_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC) load(userptr, "glGetActiveAttrib");
    sf_glad_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC) load(userptr, "glGetActiveUniform");
    sf_glad_glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC) load(userptr, "glGetAttachedShaders");
    sf_glad_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC) load(userptr, "glGetAttribLocation");
    sf_glad_glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC) load(userptr, "glGetProgramInfoLog");
    sf_glad_glGetProgramiv = (PFNGLGETPROGRAMIVPROC) load(userptr, "glGetProgramiv");
    sf_glad_glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC) load(userptr, "glGetShaderInfoLog");
    sf_glad_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC) load(userptr, "glGetShaderSource");
    sf_glad_glGetShaderiv = (PFNGLGETSHADERIVPROC) load(userptr, "glGetShaderiv");
    sf_glad_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC) load(userptr, "glGetUniformLocation");
    sf_glad_glGetUniformfv = (PFNGLGETUNIFORMFVPROC) load(userptr, "glGetUniformfv");
    sf_glad_glGetUniformiv = (PFNGLGETUNIFORMIVPROC) load(userptr, "glGetUniformiv");
    sf_glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) load(userptr, "glGetVertexAttribPointerv");
    sf_glad_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC) load(userptr, "glGetVertexAttribdv");
    sf_glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) load(userptr, "glGetVertexAttribfv");
    sf_glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) load(userptr, "glGetVertexAttribiv");
    sf_glad_glIsProgram = (PFNGLISPROGRAMPROC) load(userptr, "glIsProgram");
    sf_glad_glIsShader = (PFNGLISSHADERPROC) load(userptr, "glIsShader");
    sf_glad_glLinkProgram = (PFNGLLINKPROGRAMPROC) load(userptr, "glLinkProgram");
    sf_glad_glShaderSource = (PFNGLSHADERSOURCEPROC) load(userptr, "glShaderSource");
    sf_glad_glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC) load(userptr, "glStencilFuncSeparate");
    sf_glad_glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC) load(userptr, "glStencilMaskSeparate");
    sf_glad_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC) load(userptr, "glStencilOpSeparate");
    sf_glad_glUniform1f = (PFNGLUNIFORM1FPROC) load(userptr, "glUniform1f");
    sf_glad_glUniform1fv = (PFNGLUNIFORM1FVPROC) load(userptr, "glUniform1fv");
    sf_glad_glUniform1i = (PFNGLUNIFORM1IPROC) load(userptr, "glUniform1i");
    sf_glad_glUniform1iv = (PFNGLUNIFORM1IVPROC) load(userptr, "glUniform1iv");
    sf_glad_glUniform2f = (PFNGLUNIFORM2FPROC) load(userptr, "glUniform2f");
    sf_glad_glUniform2fv = (PFNGLUNIFORM2FVPROC) load(userptr, "glUniform2fv");
    sf_glad_glUniform2i = (PFNGLUNIFORM2IPROC) load(userptr, "glUniform2i");
    sf_glad_glUniform2iv = (PFNGLUNIFORM2IVPROC) load(userptr, "glUniform2iv");
    sf_glad_glUniform3f = (PFNGLUNIFORM3FPROC) load(userptr, "glUniform3f");
    sf_glad_glUniform3fv = (PFNGLUNIFORM3FVPROC) load(userptr, "glUniform3fv");
    sf_glad_glUniform3i = (PFNGLUNIFORM3IPROC) load(userptr, "glUniform3i");
    sf_glad_glUniform3iv = (PFNGLUNIFORM3IVPROC) load(userptr, "glUniform3iv");
    sf_glad_glUniform4f = (PFNGLUNIFORM4FPROC) load(userptr, "glUniform4f");
    sf_glad_glUniform4fv = (PFNGLUNIFORM4FVPROC) load(userptr, "glUniform4fv");
    sf_glad_glUniform4i = (PFNGLUNIFORM4IPROC) load(userptr, "glUniform4i");
    sf_glad_glUniform4iv = (PFNGLUNIFORM4IVPROC) load(userptr, "glUniform4iv");
    sf_glad_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC) load(userptr, "glUniformMatrix2fv");
    sf_glad_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC) load(userptr, "glUniformMatrix3fv");
    sf_glad_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC) load(userptr, "glUniformMatrix4fv");
    sf_glad_glUseProgram = (PFNGLUSEPROGRAMPROC) load(userptr, "glUseProgram");
    sf_glad_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC) load(userptr, "glValidateProgram");
    sf_glad_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC) load(userptr, "glVertexAttrib1d");
    sf_glad_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC) load(userptr, "glVertexAttrib1dv");
    sf_glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) load(userptr, "glVertexAttrib1f");
    sf_glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) load(userptr, "glVertexAttrib1fv");
    sf_glad_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC) load(userptr, "glVertexAttrib1s");
    sf_glad_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC) load(userptr, "glVertexAttrib1sv");
    sf_glad_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC) load(userptr, "glVertexAttrib2d");
    sf_glad_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC) load(userptr, "glVertexAttrib2dv");
    sf_glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) load(userptr, "glVertexAttrib2f");
    sf_glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) load(userptr, "glVertexAttrib2fv");
    sf_glad_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC) load(userptr, "glVertexAttrib2s");
    sf_glad_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC) load(userptr, "glVertexAttrib2sv");
    sf_glad_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC) load(userptr, "glVertexAttrib3d");
    sf_glad_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC) load(userptr, "glVertexAttrib3dv");
    sf_glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) load(userptr, "glVertexAttrib3f");
    sf_glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) load(userptr, "glVertexAttrib3fv");
    sf_glad_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC) load(userptr, "glVertexAttrib3s");
    sf_glad_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC) load(userptr, "glVertexAttrib3sv");
    sf_glad_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC) load(userptr, "glVertexAttrib4Nbv");
    sf_glad_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC) load(userptr, "glVertexAttrib4Niv");
    sf_glad_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC) load(userptr, "glVertexAttrib4Nsv");
    sf_glad_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC) load(userptr, "glVertexAttrib4Nub");
    sf_glad_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC) load(userptr, "glVertexAttrib4Nubv");
    sf_glad_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC) load(userptr, "glVertexAttrib4Nuiv");
    sf_glad_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC) load(userptr, "glVertexAttrib4Nusv");
    sf_glad_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC) load(userptr, "glVertexAttrib4bv");
    sf_glad_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC) load(userptr, "glVertexAttrib4d");
    sf_glad_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC) load(userptr, "glVertexAttrib4dv");
    sf_glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) load(userptr, "glVertexAttrib4f");
    sf_glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) load(userptr, "glVertexAttrib4fv");
    sf_glad_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC) load(userptr, "glVertexAttrib4iv");
    sf_glad_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC) load(userptr, "glVertexAttrib4s");
    sf_glad_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC) load(userptr, "glVertexAttrib4sv");
    sf_glad_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC) load(userptr, "glVertexAttrib4ubv");
    sf_glad_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC) load(userptr, "glVertexAttrib4uiv");
    sf_glad_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC) load(userptr, "glVertexAttrib4usv");
    sf_glad_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC) load(userptr, "glVertexAttribPointer");
}
static void sf_glad_gl_load_GL_VERSION_2_1( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_2_1) return;
    sf_glad_glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC) load(userptr, "glUniformMatrix2x3fv");
    sf_glad_glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC) load(userptr, "glUniformMatrix2x4fv");
    sf_glad_glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC) load(userptr, "glUniformMatrix3x2fv");
    sf_glad_glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC) load(userptr, "glUniformMatrix3x4fv");
    sf_glad_glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC) load(userptr, "glUniformMatrix4x2fv");
    sf_glad_glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC) load(userptr, "glUniformMatrix4x3fv");
}
static void sf_glad_gl_load_GL_VERSION_3_0( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_3_0) return;
    sf_glad_glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC) load(userptr, "glBeginConditionalRender");
    sf_glad_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC) load(userptr, "glBeginTransformFeedback");
    sf_glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) load(userptr, "glBindBufferBase");
    sf_glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load(userptr, "glBindBufferRange");
    sf_glad_glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC) load(userptr, "glBindFragDataLocation");
    sf_glad_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) load(userptr, "glBindFramebuffer");
    sf_glad_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) load(userptr, "glBindRenderbuffer");
    sf_glad_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC) load(userptr, "glBindVertexArray");
    sf_glad_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) load(userptr, "glBlitFramebuffer");
    sf_glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) load(userptr, "glCheckFramebufferStatus");
    sf_glad_glClampColor = (PFNGLCLAMPCOLORPROC) load(userptr, "glClampColor");
    sf_glad_glClearBufferfi = (PFNGLCLEARBUFFERFIPROC) load(userptr, "glClearBufferfi");
    sf_glad_glClearBufferfv = (PFNGLCLEARBUFFERFVPROC) load(userptr, "glClearBufferfv");
    sf_glad_glClearBufferiv = (PFNGLCLEARBUFFERIVPROC) load(userptr, "glClearBufferiv");
    sf_glad_glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC) load(userptr, "glClearBufferuiv");
    sf_glad_glColorMaski = (PFNGLCOLORMASKIPROC) load(userptr, "glColorMaski");
    sf_glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) load(userptr, "glDeleteFramebuffers");
    sf_glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) load(userptr, "glDeleteRenderbuffers");
    sf_glad_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) load(userptr, "glDeleteVertexArrays");
    sf_glad_glDisablei = (PFNGLDISABLEIPROC) load(userptr, "glDisablei");
    sf_glad_glEnablei = (PFNGLENABLEIPROC) load(userptr, "glEnablei");
    sf_glad_glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC) load(userptr, "glEndConditionalRender");
    sf_glad_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC) load(userptr, "glEndTransformFeedback");
    sf_glad_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) load(userptr, "glFlushMappedBufferRange");
    sf_glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) load(userptr, "glFramebufferRenderbuffer");
    sf_glad_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC) load(userptr, "glFramebufferTexture1D");
    sf_glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) load(userptr, "glFramebufferTexture2D");
    sf_glad_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC) load(userptr, "glFramebufferTexture3D");
    sf_glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) load(userptr, "glFramebufferTextureLayer");
    sf_glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) load(userptr, "glGenFramebuffers");
    sf_glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) load(userptr, "glGenRenderbuffers");
    sf_glad_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC) load(userptr, "glGenVertexArrays");
    sf_glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) load(userptr, "glGenerateMipmap");
    sf_glad_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC) load(userptr, "glGetBooleani_v");
    sf_glad_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC) load(userptr, "glGetFragDataLocation");
    sf_glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load(userptr, "glGetFramebufferAttachmentParameteriv");
    sf_glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) load(userptr, "glGetIntegeri_v");
    sf_glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) load(userptr, "glGetRenderbufferParameteriv");
    sf_glad_glGetStringi = (PFNGLGETSTRINGIPROC) load(userptr, "glGetStringi");
    sf_glad_glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC) load(userptr, "glGetTexParameterIiv");
    sf_glad_glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC) load(userptr, "glGetTexParameterIuiv");
    sf_glad_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) load(userptr, "glGetTransformFeedbackVarying");
    sf_glad_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC) load(userptr, "glGetUniformuiv");
    sf_glad_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC) load(userptr, "glGetVertexAttribIiv");
    sf_glad_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC) load(userptr, "glGetVertexAttribIuiv");
    sf_glad_glIsEnabledi = (PFNGLISENABLEDIPROC) load(userptr, "glIsEnabledi");
    sf_glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) load(userptr, "glIsFramebuffer");
    sf_glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) load(userptr, "glIsRenderbuffer");
    sf_glad_glIsVertexArray = (PFNGLISVERTEXARRAYPROC) load(userptr, "glIsVertexArray");
    sf_glad_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC) load(userptr, "glMapBufferRange");
    sf_glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) load(userptr, "glRenderbufferStorage");
    sf_glad_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) load(userptr, "glRenderbufferStorageMultisample");
    sf_glad_glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC) load(userptr, "glTexParameterIiv");
    sf_glad_glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC) load(userptr, "glTexParameterIuiv");
    sf_glad_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC) load(userptr, "glTransformFeedbackVaryings");
    sf_glad_glUniform1ui = (PFNGLUNIFORM1UIPROC) load(userptr, "glUniform1ui");
    sf_glad_glUniform1uiv = (PFNGLUNIFORM1UIVPROC) load(userptr, "glUniform1uiv");
    sf_glad_glUniform2ui = (PFNGLUNIFORM2UIPROC) load(userptr, "glUniform2ui");
    sf_glad_glUniform2uiv = (PFNGLUNIFORM2UIVPROC) load(userptr, "glUniform2uiv");
    sf_glad_glUniform3ui = (PFNGLUNIFORM3UIPROC) load(userptr, "glUniform3ui");
    sf_glad_glUniform3uiv = (PFNGLUNIFORM3UIVPROC) load(userptr, "glUniform3uiv");
    sf_glad_glUniform4ui = (PFNGLUNIFORM4UIPROC) load(userptr, "glUniform4ui");
    sf_glad_glUniform4uiv = (PFNGLUNIFORM4UIVPROC) load(userptr, "glUniform4uiv");
    sf_glad_glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC) load(userptr, "glVertexAttribI1i");
    sf_glad_glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC) load(userptr, "glVertexAttribI1iv");
    sf_glad_glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC) load(userptr, "glVertexAttribI1ui");
    sf_glad_glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC) load(userptr, "glVertexAttribI1uiv");
    sf_glad_glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC) load(userptr, "glVertexAttribI2i");
    sf_glad_glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC) load(userptr, "glVertexAttribI2iv");
    sf_glad_glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC) load(userptr, "glVertexAttribI2ui");
    sf_glad_glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC) load(userptr, "glVertexAttribI2uiv");
    sf_glad_glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC) load(userptr, "glVertexAttribI3i");
    sf_glad_glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC) load(userptr, "glVertexAttribI3iv");
    sf_glad_glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC) load(userptr, "glVertexAttribI3ui");
    sf_glad_glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC) load(userptr, "glVertexAttribI3uiv");
    sf_glad_glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC) load(userptr, "glVertexAttribI4bv");
    sf_glad_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC) load(userptr, "glVertexAttribI4i");
    sf_glad_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC) load(userptr, "glVertexAttribI4iv");
    sf_glad_glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC) load(userptr, "glVertexAttribI4sv");
    sf_glad_glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC) load(userptr, "glVertexAttribI4ubv");
    sf_glad_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC) load(userptr, "glVertexAttribI4ui");
    sf_glad_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC) load(userptr, "glVertexAttribI4uiv");
    sf_glad_glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC) load(userptr, "glVertexAttribI4usv");
    sf_glad_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC) load(userptr, "glVertexAttribIPointer");
}
static void sf_glad_gl_load_GL_VERSION_3_1( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_3_1) return;
    sf_glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) load(userptr, "glBindBufferBase");
    sf_glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load(userptr, "glBindBufferRange");
    sf_glad_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) load(userptr, "glCopyBufferSubData");
    sf_glad_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC) load(userptr, "glDrawArraysInstanced");
    sf_glad_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC) load(userptr, "glDrawElementsInstanced");
    sf_glad_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) load(userptr, "glGetActiveUniformBlockName");
    sf_glad_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) load(userptr, "glGetActiveUniformBlockiv");
    sf_glad_glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC) load(userptr, "glGetActiveUniformName");
    sf_glad_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) load(userptr, "glGetActiveUniformsiv");
    sf_glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) load(userptr, "glGetIntegeri_v");
    sf_glad_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) load(userptr, "glGetUniformBlockIndex");
    sf_glad_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC) load(userptr, "glGetUniformIndices");
    sf_glad_glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC) load(userptr, "glPrimitiveRestartIndex");
    sf_glad_glTexBuffer = (PFNGLTEXBUFFERPROC) load(userptr, "glTexBuffer");
    sf_glad_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) load(userptr, "glUniformBlockBinding");
}
static void sf_glad_gl_load_GL_VERSION_3_2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_3_2) return;
    sf_glad_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC) load(userptr, "glClientWaitSync");
    sf_glad_glDeleteSync = (PFNGLDELETESYNCPROC) load(userptr, "glDeleteSync");
    sf_glad_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glDrawElementsBaseVertex");
    sf_glad_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) load(userptr, "glDrawElementsInstancedBaseVertex");
    sf_glad_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) load(userptr, "glDrawRangeElementsBaseVertex");
    sf_glad_glFenceSync = (PFNGLFENCESYNCPROC) load(userptr, "glFenceSync");
    sf_glad_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC) load(userptr, "glFramebufferTexture");
    sf_glad_glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC) load(userptr, "glGetBufferParameteri64v");
    sf_glad_glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC) load(userptr, "glGetInteger64i_v");
    sf_glad_glGetInteger64v = (PFNGLGETINTEGER64VPROC) load(userptr, "glGetInteger64v");
    sf_glad_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) load(userptr, "glGetMultisamplefv");
    sf_glad_glGetSynciv = (PFNGLGETSYNCIVPROC) load(userptr, "glGetSynciv");
    sf_glad_glIsSync = (PFNGLISSYNCPROC) load(userptr, "glIsSync");
    sf_glad_glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glMultiDrawElementsBaseVertex");
    sf_glad_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC) load(userptr, "glProvokingVertex");
    sf_glad_glSampleMaski = (PFNGLSAMPLEMASKIPROC) load(userptr, "glSampleMaski");
    sf_glad_glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC) load(userptr, "glTexImage2DMultisample");
    sf_glad_glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC) load(userptr, "glTexImage3DMultisample");
    sf_glad_glWaitSync = (PFNGLWAITSYNCPROC) load(userptr, "glWaitSync");
}
static void sf_glad_gl_load_GL_VERSION_3_3( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_3_3) return;
    sf_glad_glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) load(userptr, "glBindFragDataLocationIndexed");
    sf_glad_glBindSampler = (PFNGLBINDSAMPLERPROC) load(userptr, "glBindSampler");
    sf_glad_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC) load(userptr, "glDeleteSamplers");
    sf_glad_glGenSamplers = (PFNGLGENSAMPLERSPROC) load(userptr, "glGenSamplers");
    sf_glad_glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC) load(userptr, "glGetFragDataIndex");
    sf_glad_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC) load(userptr, "glGetQueryObjecti64v");
    sf_glad_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC) load(userptr, "glGetQueryObjectui64v");
    sf_glad_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC) load(userptr, "glGetSamplerParameterIiv");
    sf_glad_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC) load(userptr, "glGetSamplerParameterIuiv");
    sf_glad_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC) load(userptr, "glGetSamplerParameterfv");
    sf_glad_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC) load(userptr, "glGetSamplerParameteriv");
    sf_glad_glIsSampler = (PFNGLISSAMPLERPROC) load(userptr, "glIsSampler");
    sf_glad_glQueryCounter = (PFNGLQUERYCOUNTERPROC) load(userptr, "glQueryCounter");
    sf_glad_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC) load(userptr, "glSamplerParameterIiv");
    sf_glad_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC) load(userptr, "glSamplerParameterIuiv");
    sf_glad_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC) load(userptr, "glSamplerParameterf");
    sf_glad_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC) load(userptr, "glSamplerParameterfv");
    sf_glad_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC) load(userptr, "glSamplerParameteri");
    sf_glad_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC) load(userptr, "glSamplerParameteriv");
    sf_glad_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC) load(userptr, "glVertexAttribDivisor");
    sf_glad_glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC) load(userptr, "glVertexAttribP1ui");
    sf_glad_glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC) load(userptr, "glVertexAttribP1uiv");
    sf_glad_glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC) load(userptr, "glVertexAttribP2ui");
    sf_glad_glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC) load(userptr, "glVertexAttribP2uiv");
    sf_glad_glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC) load(userptr, "glVertexAttribP3ui");
    sf_glad_glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC) load(userptr, "glVertexAttribP3uiv");
    sf_glad_glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC) load(userptr, "glVertexAttribP4ui");
    sf_glad_glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC) load(userptr, "glVertexAttribP4uiv");
}
static void sf_glad_gl_load_GL_VERSION_4_0( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_4_0) return;
    sf_glad_glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC) load(userptr, "glBeginQueryIndexed");
    sf_glad_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC) load(userptr, "glBindTransformFeedback");
    sf_glad_glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC) load(userptr, "glBlendEquationSeparatei");
    sf_glad_glBlendEquationi = (PFNGLBLENDEQUATIONIPROC) load(userptr, "glBlendEquationi");
    sf_glad_glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC) load(userptr, "glBlendFuncSeparatei");
    sf_glad_glBlendFunci = (PFNGLBLENDFUNCIPROC) load(userptr, "glBlendFunci");
    sf_glad_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC) load(userptr, "glDeleteTransformFeedbacks");
    sf_glad_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC) load(userptr, "glDrawArraysIndirect");
    sf_glad_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC) load(userptr, "glDrawElementsIndirect");
    sf_glad_glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC) load(userptr, "glDrawTransformFeedback");
    sf_glad_glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) load(userptr, "glDrawTransformFeedbackStream");
    sf_glad_glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC) load(userptr, "glEndQueryIndexed");
    sf_glad_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC) load(userptr, "glGenTransformFeedbacks");
    sf_glad_glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC) load(userptr, "glGetActiveSubroutineName");
    sf_glad_glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) load(userptr, "glGetActiveSubroutineUniformName");
    sf_glad_glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) load(userptr, "glGetActiveSubroutineUniformiv");
    sf_glad_glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC) load(userptr, "glGetProgramStageiv");
    sf_glad_glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC) load(userptr, "glGetQueryIndexediv");
    sf_glad_glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC) load(userptr, "glGetSubroutineIndex");
    sf_glad_glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) load(userptr, "glGetSubroutineUniformLocation");
    sf_glad_glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC) load(userptr, "glGetUniformSubroutineuiv");
    sf_glad_glGetUniformdv = (PFNGLGETUNIFORMDVPROC) load(userptr, "glGetUniformdv");
    sf_glad_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC) load(userptr, "glIsTransformFeedback");
    sf_glad_glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC) load(userptr, "glMinSampleShading");
    sf_glad_glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC) load(userptr, "glPatchParameterfv");
    sf_glad_glPatchParameteri = (PFNGLPATCHPARAMETERIPROC) load(userptr, "glPatchParameteri");
    sf_glad_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC) load(userptr, "glPauseTransformFeedback");
    sf_glad_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC) load(userptr, "glResumeTransformFeedback");
    sf_glad_glUniform1d = (PFNGLUNIFORM1DPROC) load(userptr, "glUniform1d");
    sf_glad_glUniform1dv = (PFNGLUNIFORM1DVPROC) load(userptr, "glUniform1dv");
    sf_glad_glUniform2d = (PFNGLUNIFORM2DPROC) load(userptr, "glUniform2d");
    sf_glad_glUniform2dv = (PFNGLUNIFORM2DVPROC) load(userptr, "glUniform2dv");
    sf_glad_glUniform3d = (PFNGLUNIFORM3DPROC) load(userptr, "glUniform3d");
    sf_glad_glUniform3dv = (PFNGLUNIFORM3DVPROC) load(userptr, "glUniform3dv");
    sf_glad_glUniform4d = (PFNGLUNIFORM4DPROC) load(userptr, "glUniform4d");
    sf_glad_glUniform4dv = (PFNGLUNIFORM4DVPROC) load(userptr, "glUniform4dv");
    sf_glad_glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC) load(userptr, "glUniformMatrix2dv");
    sf_glad_glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC) load(userptr, "glUniformMatrix2x3dv");
    sf_glad_glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC) load(userptr, "glUniformMatrix2x4dv");
    sf_glad_glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC) load(userptr, "glUniformMatrix3dv");
    sf_glad_glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC) load(userptr, "glUniformMatrix3x2dv");
    sf_glad_glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC) load(userptr, "glUniformMatrix3x4dv");
    sf_glad_glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC) load(userptr, "glUniformMatrix4dv");
    sf_glad_glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC) load(userptr, "glUniformMatrix4x2dv");
    sf_glad_glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC) load(userptr, "glUniformMatrix4x3dv");
    sf_glad_glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC) load(userptr, "glUniformSubroutinesuiv");
}
static void sf_glad_gl_load_GL_VERSION_4_1( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_4_1) return;
    sf_glad_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC) load(userptr, "glActiveShaderProgram");
    sf_glad_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC) load(userptr, "glBindProgramPipeline");
    sf_glad_glClearDepthf = (PFNGLCLEARDEPTHFPROC) load(userptr, "glClearDepthf");
    sf_glad_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC) load(userptr, "glCreateShaderProgramv");
    sf_glad_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC) load(userptr, "glDeleteProgramPipelines");
    sf_glad_glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC) load(userptr, "glDepthRangeArrayv");
    sf_glad_glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC) load(userptr, "glDepthRangeIndexed");
    sf_glad_glDepthRangef = (PFNGLDEPTHRANGEFPROC) load(userptr, "glDepthRangef");
    sf_glad_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC) load(userptr, "glGenProgramPipelines");
    sf_glad_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC) load(userptr, "glGetDoublei_v");
    sf_glad_glGetFloati_v = (PFNGLGETFLOATI_VPROC) load(userptr, "glGetFloati_v");
    sf_glad_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC) load(userptr, "glGetProgramBinary");
    sf_glad_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) load(userptr, "glGetProgramPipelineInfoLog");
    sf_glad_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC) load(userptr, "glGetProgramPipelineiv");
    sf_glad_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC) load(userptr, "glGetShaderPrecisionFormat");
    sf_glad_glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC) load(userptr, "glGetVertexAttribLdv");
    sf_glad_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC) load(userptr, "glIsProgramPipeline");
    sf_glad_glProgramBinary = (PFNGLPROGRAMBINARYPROC) load(userptr, "glProgramBinary");
    sf_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) load(userptr, "glProgramParameteri");
    sf_glad_glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC) load(userptr, "glProgramUniform1d");
    sf_glad_glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC) load(userptr, "glProgramUniform1dv");
    sf_glad_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC) load(userptr, "glProgramUniform1f");
    sf_glad_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC) load(userptr, "glProgramUniform1fv");
    sf_glad_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC) load(userptr, "glProgramUniform1i");
    sf_glad_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC) load(userptr, "glProgramUniform1iv");
    sf_glad_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC) load(userptr, "glProgramUniform1ui");
    sf_glad_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC) load(userptr, "glProgramUniform1uiv");
    sf_glad_glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC) load(userptr, "glProgramUniform2d");
    sf_glad_glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC) load(userptr, "glProgramUniform2dv");
    sf_glad_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC) load(userptr, "glProgramUniform2f");
    sf_glad_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC) load(userptr, "glProgramUniform2fv");
    sf_glad_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC) load(userptr, "glProgramUniform2i");
    sf_glad_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC) load(userptr, "glProgramUniform2iv");
    sf_glad_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC) load(userptr, "glProgramUniform2ui");
    sf_glad_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC) load(userptr, "glProgramUniform2uiv");
    sf_glad_glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC) load(userptr, "glProgramUniform3d");
    sf_glad_glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC) load(userptr, "glProgramUniform3dv");
    sf_glad_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC) load(userptr, "glProgramUniform3f");
    sf_glad_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC) load(userptr, "glProgramUniform3fv");
    sf_glad_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC) load(userptr, "glProgramUniform3i");
    sf_glad_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC) load(userptr, "glProgramUniform3iv");
    sf_glad_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC) load(userptr, "glProgramUniform3ui");
    sf_glad_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC) load(userptr, "glProgramUniform3uiv");
    sf_glad_glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC) load(userptr, "glProgramUniform4d");
    sf_glad_glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC) load(userptr, "glProgramUniform4dv");
    sf_glad_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC) load(userptr, "glProgramUniform4f");
    sf_glad_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC) load(userptr, "glProgramUniform4fv");
    sf_glad_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC) load(userptr, "glProgramUniform4i");
    sf_glad_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC) load(userptr, "glProgramUniform4iv");
    sf_glad_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC) load(userptr, "glProgramUniform4ui");
    sf_glad_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC) load(userptr, "glProgramUniform4uiv");
    sf_glad_glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC) load(userptr, "glProgramUniformMatrix2dv");
    sf_glad_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC) load(userptr, "glProgramUniformMatrix2fv");
    sf_glad_glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) load(userptr, "glProgramUniformMatrix2x3dv");
    sf_glad_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) load(userptr, "glProgramUniformMatrix2x3fv");
    sf_glad_glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) load(userptr, "glProgramUniformMatrix2x4dv");
    sf_glad_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) load(userptr, "glProgramUniformMatrix2x4fv");
    sf_glad_glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC) load(userptr, "glProgramUniformMatrix3dv");
    sf_glad_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC) load(userptr, "glProgramUniformMatrix3fv");
    sf_glad_glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) load(userptr, "glProgramUniformMatrix3x2dv");
    sf_glad_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) load(userptr, "glProgramUniformMatrix3x2fv");
    sf_glad_glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) load(userptr, "glProgramUniformMatrix3x4dv");
    sf_glad_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) load(userptr, "glProgramUniformMatrix3x4fv");
    sf_glad_glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC) load(userptr, "glProgramUniformMatrix4dv");
    sf_glad_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC) load(userptr, "glProgramUniformMatrix4fv");
    sf_glad_glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) load(userptr, "glProgramUniformMatrix4x2dv");
    sf_glad_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) load(userptr, "glProgramUniformMatrix4x2fv");
    sf_glad_glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) load(userptr, "glProgramUniformMatrix4x3dv");
    sf_glad_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) load(userptr, "glProgramUniformMatrix4x3fv");
    sf_glad_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC) load(userptr, "glReleaseShaderCompiler");
    sf_glad_glScissorArrayv = (PFNGLSCISSORARRAYVPROC) load(userptr, "glScissorArrayv");
    sf_glad_glScissorIndexed = (PFNGLSCISSORINDEXEDPROC) load(userptr, "glScissorIndexed");
    sf_glad_glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC) load(userptr, "glScissorIndexedv");
    sf_glad_glShaderBinary = (PFNGLSHADERBINARYPROC) load(userptr, "glShaderBinary");
    sf_glad_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC) load(userptr, "glUseProgramStages");
    sf_glad_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC) load(userptr, "glValidateProgramPipeline");
    sf_glad_glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC) load(userptr, "glVertexAttribL1d");
    sf_glad_glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC) load(userptr, "glVertexAttribL1dv");
    sf_glad_glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC) load(userptr, "glVertexAttribL2d");
    sf_glad_glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC) load(userptr, "glVertexAttribL2dv");
    sf_glad_glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC) load(userptr, "glVertexAttribL3d");
    sf_glad_glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC) load(userptr, "glVertexAttribL3dv");
    sf_glad_glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC) load(userptr, "glVertexAttribL4d");
    sf_glad_glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC) load(userptr, "glVertexAttribL4dv");
    sf_glad_glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC) load(userptr, "glVertexAttribLPointer");
    sf_glad_glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC) load(userptr, "glViewportArrayv");
    sf_glad_glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC) load(userptr, "glViewportIndexedf");
    sf_glad_glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC) load(userptr, "glViewportIndexedfv");
}
static void sf_glad_gl_load_GL_ES_VERSION_2_0( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ES_VERSION_2_0) return;
    sf_glad_glActiveTexture = (PFNGLACTIVETEXTUREPROC) load(userptr, "glActiveTexture");
    sf_glad_glAttachShader = (PFNGLATTACHSHADERPROC) load(userptr, "glAttachShader");
    sf_glad_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC) load(userptr, "glBindAttribLocation");
    sf_glad_glBindBuffer = (PFNGLBINDBUFFERPROC) load(userptr, "glBindBuffer");
    sf_glad_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) load(userptr, "glBindFramebuffer");
    sf_glad_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) load(userptr, "glBindRenderbuffer");
    sf_glad_glBindTexture = (PFNGLBINDTEXTUREPROC) load(userptr, "glBindTexture");
    sf_glad_glBlendColor = (PFNGLBLENDCOLORPROC) load(userptr, "glBlendColor");
    sf_glad_glBlendEquation = (PFNGLBLENDEQUATIONPROC) load(userptr, "glBlendEquation");
    sf_glad_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC) load(userptr, "glBlendEquationSeparate");
    sf_glad_glBlendFunc = (PFNGLBLENDFUNCPROC) load(userptr, "glBlendFunc");
    sf_glad_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC) load(userptr, "glBlendFuncSeparate");
    sf_glad_glBufferData = (PFNGLBUFFERDATAPROC) load(userptr, "glBufferData");
    sf_glad_glBufferSubData = (PFNGLBUFFERSUBDATAPROC) load(userptr, "glBufferSubData");
    sf_glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) load(userptr, "glCheckFramebufferStatus");
    sf_glad_glClear = (PFNGLCLEARPROC) load(userptr, "glClear");
    sf_glad_glClearColor = (PFNGLCLEARCOLORPROC) load(userptr, "glClearColor");
    sf_glad_glClearDepthf = (PFNGLCLEARDEPTHFPROC) load(userptr, "glClearDepthf");
    sf_glad_glClearStencil = (PFNGLCLEARSTENCILPROC) load(userptr, "glClearStencil");
    sf_glad_glColorMask = (PFNGLCOLORMASKPROC) load(userptr, "glColorMask");
    sf_glad_glCompileShader = (PFNGLCOMPILESHADERPROC) load(userptr, "glCompileShader");
    sf_glad_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC) load(userptr, "glCompressedTexImage2D");
    sf_glad_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) load(userptr, "glCompressedTexSubImage2D");
    sf_glad_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) load(userptr, "glCopyTexImage2D");
    sf_glad_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) load(userptr, "glCopyTexSubImage2D");
    sf_glad_glCreateProgram = (PFNGLCREATEPROGRAMPROC) load(userptr, "glCreateProgram");
    sf_glad_glCreateShader = (PFNGLCREATESHADERPROC) load(userptr, "glCreateShader");
    sf_glad_glCullFace = (PFNGLCULLFACEPROC) load(userptr, "glCullFace");
    sf_glad_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC) load(userptr, "glDeleteBuffers");
    sf_glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) load(userptr, "glDeleteFramebuffers");
    sf_glad_glDeleteProgram = (PFNGLDELETEPROGRAMPROC) load(userptr, "glDeleteProgram");
    sf_glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) load(userptr, "glDeleteRenderbuffers");
    sf_glad_glDeleteShader = (PFNGLDELETESHADERPROC) load(userptr, "glDeleteShader");
    sf_glad_glDeleteTextures = (PFNGLDELETETEXTURESPROC) load(userptr, "glDeleteTextures");
    sf_glad_glDepthFunc = (PFNGLDEPTHFUNCPROC) load(userptr, "glDepthFunc");
    sf_glad_glDepthMask = (PFNGLDEPTHMASKPROC) load(userptr, "glDepthMask");
    sf_glad_glDepthRangef = (PFNGLDEPTHRANGEFPROC) load(userptr, "glDepthRangef");
    sf_glad_glDetachShader = (PFNGLDETACHSHADERPROC) load(userptr, "glDetachShader");
    sf_glad_glDisable = (PFNGLDISABLEPROC) load(userptr, "glDisable");
    sf_glad_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC) load(userptr, "glDisableVertexAttribArray");
    sf_glad_glDrawArrays = (PFNGLDRAWARRAYSPROC) load(userptr, "glDrawArrays");
    sf_glad_glDrawElements = (PFNGLDRAWELEMENTSPROC) load(userptr, "glDrawElements");
    sf_glad_glEnable = (PFNGLENABLEPROC) load(userptr, "glEnable");
    sf_glad_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC) load(userptr, "glEnableVertexAttribArray");
    sf_glad_glFinish = (PFNGLFINISHPROC) load(userptr, "glFinish");
    sf_glad_glFlush = (PFNGLFLUSHPROC) load(userptr, "glFlush");
    sf_glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) load(userptr, "glFramebufferRenderbuffer");
    sf_glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) load(userptr, "glFramebufferTexture2D");
    sf_glad_glFrontFace = (PFNGLFRONTFACEPROC) load(userptr, "glFrontFace");
    sf_glad_glGenBuffers = (PFNGLGENBUFFERSPROC) load(userptr, "glGenBuffers");
    sf_glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) load(userptr, "glGenFramebuffers");
    sf_glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) load(userptr, "glGenRenderbuffers");
    sf_glad_glGenTextures = (PFNGLGENTEXTURESPROC) load(userptr, "glGenTextures");
    sf_glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) load(userptr, "glGenerateMipmap");
    sf_glad_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC) load(userptr, "glGetActiveAttrib");
    sf_glad_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC) load(userptr, "glGetActiveUniform");
    sf_glad_glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC) load(userptr, "glGetAttachedShaders");
    sf_glad_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC) load(userptr, "glGetAttribLocation");
    sf_glad_glGetBooleanv = (PFNGLGETBOOLEANVPROC) load(userptr, "glGetBooleanv");
    sf_glad_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC) load(userptr, "glGetBufferParameteriv");
    sf_glad_glGetError = (PFNGLGETERRORPROC) load(userptr, "glGetError");
    sf_glad_glGetFloatv = (PFNGLGETFLOATVPROC) load(userptr, "glGetFloatv");
    sf_glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load(userptr, "glGetFramebufferAttachmentParameteriv");
    sf_glad_glGetIntegerv = (PFNGLGETINTEGERVPROC) load(userptr, "glGetIntegerv");
    sf_glad_glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC) load(userptr, "glGetProgramInfoLog");
    sf_glad_glGetProgramiv = (PFNGLGETPROGRAMIVPROC) load(userptr, "glGetProgramiv");
    sf_glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) load(userptr, "glGetRenderbufferParameteriv");
    sf_glad_glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC) load(userptr, "glGetShaderInfoLog");
    sf_glad_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC) load(userptr, "glGetShaderPrecisionFormat");
    sf_glad_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC) load(userptr, "glGetShaderSource");
    sf_glad_glGetShaderiv = (PFNGLGETSHADERIVPROC) load(userptr, "glGetShaderiv");
    sf_glad_glGetString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    sf_glad_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC) load(userptr, "glGetTexParameterfv");
    sf_glad_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC) load(userptr, "glGetTexParameteriv");
    sf_glad_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC) load(userptr, "glGetUniformLocation");
    sf_glad_glGetUniformfv = (PFNGLGETUNIFORMFVPROC) load(userptr, "glGetUniformfv");
    sf_glad_glGetUniformiv = (PFNGLGETUNIFORMIVPROC) load(userptr, "glGetUniformiv");
    sf_glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) load(userptr, "glGetVertexAttribPointerv");
    sf_glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) load(userptr, "glGetVertexAttribfv");
    sf_glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) load(userptr, "glGetVertexAttribiv");
    sf_glad_glHint = (PFNGLHINTPROC) load(userptr, "glHint");
    sf_glad_glIsBuffer = (PFNGLISBUFFERPROC) load(userptr, "glIsBuffer");
    sf_glad_glIsEnabled = (PFNGLISENABLEDPROC) load(userptr, "glIsEnabled");
    sf_glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) load(userptr, "glIsFramebuffer");
    sf_glad_glIsProgram = (PFNGLISPROGRAMPROC) load(userptr, "glIsProgram");
    sf_glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) load(userptr, "glIsRenderbuffer");
    sf_glad_glIsShader = (PFNGLISSHADERPROC) load(userptr, "glIsShader");
    sf_glad_glIsTexture = (PFNGLISTEXTUREPROC) load(userptr, "glIsTexture");
    sf_glad_glLineWidth = (PFNGLLINEWIDTHPROC) load(userptr, "glLineWidth");
    sf_glad_glLinkProgram = (PFNGLLINKPROGRAMPROC) load(userptr, "glLinkProgram");
    sf_glad_glPixelStorei = (PFNGLPIXELSTOREIPROC) load(userptr, "glPixelStorei");
    sf_glad_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC) load(userptr, "glPolygonOffset");
    sf_glad_glReadPixels = (PFNGLREADPIXELSPROC) load(userptr, "glReadPixels");
    sf_glad_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC) load(userptr, "glReleaseShaderCompiler");
    sf_glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) load(userptr, "glRenderbufferStorage");
    sf_glad_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC) load(userptr, "glSampleCoverage");
    sf_glad_glScissor = (PFNGLSCISSORPROC) load(userptr, "glScissor");
    sf_glad_glShaderBinary = (PFNGLSHADERBINARYPROC) load(userptr, "glShaderBinary");
    sf_glad_glShaderSource = (PFNGLSHADERSOURCEPROC) load(userptr, "glShaderSource");
    sf_glad_glStencilFunc = (PFNGLSTENCILFUNCPROC) load(userptr, "glStencilFunc");
    sf_glad_glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC) load(userptr, "glStencilFuncSeparate");
    sf_glad_glStencilMask = (PFNGLSTENCILMASKPROC) load(userptr, "glStencilMask");
    sf_glad_glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC) load(userptr, "glStencilMaskSeparate");
    sf_glad_glStencilOp = (PFNGLSTENCILOPPROC) load(userptr, "glStencilOp");
    sf_glad_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC) load(userptr, "glStencilOpSeparate");
    sf_glad_glTexImage2D = (PFNGLTEXIMAGE2DPROC) load(userptr, "glTexImage2D");
    sf_glad_glTexParameterf = (PFNGLTEXPARAMETERFPROC) load(userptr, "glTexParameterf");
    sf_glad_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC) load(userptr, "glTexParameterfv");
    sf_glad_glTexParameteri = (PFNGLTEXPARAMETERIPROC) load(userptr, "glTexParameteri");
    sf_glad_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC) load(userptr, "glTexParameteriv");
    sf_glad_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) load(userptr, "glTexSubImage2D");
    sf_glad_glUniform1f = (PFNGLUNIFORM1FPROC) load(userptr, "glUniform1f");
    sf_glad_glUniform1fv = (PFNGLUNIFORM1FVPROC) load(userptr, "glUniform1fv");
    sf_glad_glUniform1i = (PFNGLUNIFORM1IPROC) load(userptr, "glUniform1i");
    sf_glad_glUniform1iv = (PFNGLUNIFORM1IVPROC) load(userptr, "glUniform1iv");
    sf_glad_glUniform2f = (PFNGLUNIFORM2FPROC) load(userptr, "glUniform2f");
    sf_glad_glUniform2fv = (PFNGLUNIFORM2FVPROC) load(userptr, "glUniform2fv");
    sf_glad_glUniform2i = (PFNGLUNIFORM2IPROC) load(userptr, "glUniform2i");
    sf_glad_glUniform2iv = (PFNGLUNIFORM2IVPROC) load(userptr, "glUniform2iv");
    sf_glad_glUniform3f = (PFNGLUNIFORM3FPROC) load(userptr, "glUniform3f");
    sf_glad_glUniform3fv = (PFNGLUNIFORM3FVPROC) load(userptr, "glUniform3fv");
    sf_glad_glUniform3i = (PFNGLUNIFORM3IPROC) load(userptr, "glUniform3i");
    sf_glad_glUniform3iv = (PFNGLUNIFORM3IVPROC) load(userptr, "glUniform3iv");
    sf_glad_glUniform4f = (PFNGLUNIFORM4FPROC) load(userptr, "glUniform4f");
    sf_glad_glUniform4fv = (PFNGLUNIFORM4FVPROC) load(userptr, "glUniform4fv");
    sf_glad_glUniform4i = (PFNGLUNIFORM4IPROC) load(userptr, "glUniform4i");
    sf_glad_glUniform4iv = (PFNGLUNIFORM4IVPROC) load(userptr, "glUniform4iv");
    sf_glad_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC) load(userptr, "glUniformMatrix2fv");
    sf_glad_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC) load(userptr, "glUniformMatrix3fv");
    sf_glad_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC) load(userptr, "glUniformMatrix4fv");
    sf_glad_glUseProgram = (PFNGLUSEPROGRAMPROC) load(userptr, "glUseProgram");
    sf_glad_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC) load(userptr, "glValidateProgram");
    sf_glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) load(userptr, "glVertexAttrib1f");
    sf_glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) load(userptr, "glVertexAttrib1fv");
    sf_glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) load(userptr, "glVertexAttrib2f");
    sf_glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) load(userptr, "glVertexAttrib2fv");
    sf_glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) load(userptr, "glVertexAttrib3f");
    sf_glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) load(userptr, "glVertexAttrib3fv");
    sf_glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) load(userptr, "glVertexAttrib4f");
    sf_glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) load(userptr, "glVertexAttrib4fv");
    sf_glad_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC) load(userptr, "glVertexAttribPointer");
    sf_glad_glViewport = (PFNGLVIEWPORTPROC) load(userptr, "glViewport");
}
static void sf_glad_gl_load_GL_AMD_draw_buffers_blend( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_AMD_draw_buffers_blend) return;
    sf_glad_glBlendEquationIndexedAMD = (PFNGLBLENDEQUATIONINDEXEDAMDPROC) load(userptr, "glBlendEquationIndexedAMD");
    sf_glad_glBlendEquationSeparateIndexedAMD = (PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) load(userptr, "glBlendEquationSeparateIndexedAMD");
    sf_glad_glBlendFuncIndexedAMD = (PFNGLBLENDFUNCINDEXEDAMDPROC) load(userptr, "glBlendFuncIndexedAMD");
    sf_glad_glBlendFuncSeparateIndexedAMD = (PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) load(userptr, "glBlendFuncSeparateIndexedAMD");
}
static void sf_glad_gl_load_GL_APPLE_flush_buffer_range( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_APPLE_flush_buffer_range) return;
    sf_glad_glBufferParameteriAPPLE = (PFNGLBUFFERPARAMETERIAPPLEPROC) load(userptr, "glBufferParameteriAPPLE");
    sf_glad_glFlushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) load(userptr, "glFlushMappedBufferRangeAPPLE");
}
static void sf_glad_gl_load_GL_APPLE_vertex_array_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_APPLE_vertex_array_object) return;
    sf_glad_glBindVertexArrayAPPLE = (PFNGLBINDVERTEXARRAYAPPLEPROC) load(userptr, "glBindVertexArrayAPPLE");
    sf_glad_glDeleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC) load(userptr, "glDeleteVertexArraysAPPLE");
    sf_glad_glGenVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC) load(userptr, "glGenVertexArraysAPPLE");
    sf_glad_glIsVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC) load(userptr, "glIsVertexArrayAPPLE");
}
static void sf_glad_gl_load_GL_ARB_ES2_compatibility( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_ES2_compatibility) return;
    sf_glad_glClearDepthf = (PFNGLCLEARDEPTHFPROC) load(userptr, "glClearDepthf");
    sf_glad_glDepthRangef = (PFNGLDEPTHRANGEFPROC) load(userptr, "glDepthRangef");
    sf_glad_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC) load(userptr, "glGetShaderPrecisionFormat");
    sf_glad_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC) load(userptr, "glReleaseShaderCompiler");
    sf_glad_glShaderBinary = (PFNGLSHADERBINARYPROC) load(userptr, "glShaderBinary");
}
static void sf_glad_gl_load_GL_ARB_blend_func_extended( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_blend_func_extended) return;
    sf_glad_glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) load(userptr, "glBindFragDataLocationIndexed");
    sf_glad_glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC) load(userptr, "glGetFragDataIndex");
}
static void sf_glad_gl_load_GL_ARB_color_buffer_float( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_color_buffer_float) return;
    sf_glad_glClampColorARB = (PFNGLCLAMPCOLORARBPROC) load(userptr, "glClampColorARB");
}
static void sf_glad_gl_load_GL_ARB_copy_buffer( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_copy_buffer) return;
    sf_glad_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) load(userptr, "glCopyBufferSubData");
}
static void sf_glad_gl_load_GL_ARB_draw_buffers( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_draw_buffers) return;
    sf_glad_glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC) load(userptr, "glDrawBuffersARB");
}
static void sf_glad_gl_load_GL_ARB_draw_buffers_blend( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_draw_buffers_blend) return;
    sf_glad_glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC) load(userptr, "glBlendEquationSeparateiARB");
    sf_glad_glBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC) load(userptr, "glBlendEquationiARB");
    sf_glad_glBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC) load(userptr, "glBlendFuncSeparateiARB");
    sf_glad_glBlendFunciARB = (PFNGLBLENDFUNCIARBPROC) load(userptr, "glBlendFunciARB");
}
static void sf_glad_gl_load_GL_ARB_draw_elements_base_vertex( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_draw_elements_base_vertex) return;
    sf_glad_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glDrawElementsBaseVertex");
    sf_glad_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) load(userptr, "glDrawElementsInstancedBaseVertex");
    sf_glad_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) load(userptr, "glDrawRangeElementsBaseVertex");
    sf_glad_glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glMultiDrawElementsBaseVertex");
}
static void sf_glad_gl_load_GL_ARB_draw_indirect( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_draw_indirect) return;
    sf_glad_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC) load(userptr, "glDrawArraysIndirect");
    sf_glad_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC) load(userptr, "glDrawElementsIndirect");
}
static void sf_glad_gl_load_GL_ARB_draw_instanced( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_draw_instanced) return;
    sf_glad_glDrawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC) load(userptr, "glDrawArraysInstancedARB");
    sf_glad_glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC) load(userptr, "glDrawElementsInstancedARB");
}
static void sf_glad_gl_load_GL_ARB_framebuffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_framebuffer_object) return;
    sf_glad_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) load(userptr, "glBindFramebuffer");
    sf_glad_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) load(userptr, "glBindRenderbuffer");
    sf_glad_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) load(userptr, "glBlitFramebuffer");
    sf_glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) load(userptr, "glCheckFramebufferStatus");
    sf_glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) load(userptr, "glDeleteFramebuffers");
    sf_glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) load(userptr, "glDeleteRenderbuffers");
    sf_glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) load(userptr, "glFramebufferRenderbuffer");
    sf_glad_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC) load(userptr, "glFramebufferTexture1D");
    sf_glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) load(userptr, "glFramebufferTexture2D");
    sf_glad_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC) load(userptr, "glFramebufferTexture3D");
    sf_glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) load(userptr, "glFramebufferTextureLayer");
    sf_glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) load(userptr, "glGenFramebuffers");
    sf_glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) load(userptr, "glGenRenderbuffers");
    sf_glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) load(userptr, "glGenerateMipmap");
    sf_glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load(userptr, "glGetFramebufferAttachmentParameteriv");
    sf_glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) load(userptr, "glGetRenderbufferParameteriv");
    sf_glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) load(userptr, "glIsFramebuffer");
    sf_glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) load(userptr, "glIsRenderbuffer");
    sf_glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) load(userptr, "glRenderbufferStorage");
    sf_glad_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) load(userptr, "glRenderbufferStorageMultisample");
}
static void sf_glad_gl_load_GL_ARB_geometry_shader4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_geometry_shader4) return;
    sf_glad_glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC) load(userptr, "glFramebufferTextureARB");
    sf_glad_glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) load(userptr, "glFramebufferTextureFaceARB");
    sf_glad_glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) load(userptr, "glFramebufferTextureLayerARB");
    sf_glad_glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC) load(userptr, "glProgramParameteriARB");
}
static void sf_glad_gl_load_GL_ARB_get_program_binary( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_get_program_binary) return;
    sf_glad_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC) load(userptr, "glGetProgramBinary");
    sf_glad_glProgramBinary = (PFNGLPROGRAMBINARYPROC) load(userptr, "glProgramBinary");
    sf_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) load(userptr, "glProgramParameteri");
}
static void sf_glad_gl_load_GL_ARB_gpu_shader_fp64( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_gpu_shader_fp64) return;
    sf_glad_glGetUniformdv = (PFNGLGETUNIFORMDVPROC) load(userptr, "glGetUniformdv");
    sf_glad_glUniform1d = (PFNGLUNIFORM1DPROC) load(userptr, "glUniform1d");
    sf_glad_glUniform1dv = (PFNGLUNIFORM1DVPROC) load(userptr, "glUniform1dv");
    sf_glad_glUniform2d = (PFNGLUNIFORM2DPROC) load(userptr, "glUniform2d");
    sf_glad_glUniform2dv = (PFNGLUNIFORM2DVPROC) load(userptr, "glUniform2dv");
    sf_glad_glUniform3d = (PFNGLUNIFORM3DPROC) load(userptr, "glUniform3d");
    sf_glad_glUniform3dv = (PFNGLUNIFORM3DVPROC) load(userptr, "glUniform3dv");
    sf_glad_glUniform4d = (PFNGLUNIFORM4DPROC) load(userptr, "glUniform4d");
    sf_glad_glUniform4dv = (PFNGLUNIFORM4DVPROC) load(userptr, "glUniform4dv");
    sf_glad_glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC) load(userptr, "glUniformMatrix2dv");
    sf_glad_glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC) load(userptr, "glUniformMatrix2x3dv");
    sf_glad_glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC) load(userptr, "glUniformMatrix2x4dv");
    sf_glad_glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC) load(userptr, "glUniformMatrix3dv");
    sf_glad_glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC) load(userptr, "glUniformMatrix3x2dv");
    sf_glad_glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC) load(userptr, "glUniformMatrix3x4dv");
    sf_glad_glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC) load(userptr, "glUniformMatrix4dv");
    sf_glad_glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC) load(userptr, "glUniformMatrix4x2dv");
    sf_glad_glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC) load(userptr, "glUniformMatrix4x3dv");
}
static void sf_glad_gl_load_GL_ARB_imaging( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_imaging) return;
    sf_glad_glBlendColor = (PFNGLBLENDCOLORPROC) load(userptr, "glBlendColor");
    sf_glad_glBlendEquation = (PFNGLBLENDEQUATIONPROC) load(userptr, "glBlendEquation");
}
static void sf_glad_gl_load_GL_ARB_instanced_arrays( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_instanced_arrays) return;
    sf_glad_glVertexAttribDivisorARB = (PFNGLVERTEXATTRIBDIVISORARBPROC) load(userptr, "glVertexAttribDivisorARB");
}
static void sf_glad_gl_load_GL_ARB_map_buffer_range( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_map_buffer_range) return;
    sf_glad_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) load(userptr, "glFlushMappedBufferRange");
    sf_glad_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC) load(userptr, "glMapBufferRange");
}
static void sf_glad_gl_load_GL_ARB_multisample( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_multisample) return;
    sf_glad_glSampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC) load(userptr, "glSampleCoverageARB");
}
static void sf_glad_gl_load_GL_ARB_multitexture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_multitexture) return;
    sf_glad_glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC) load(userptr, "glActiveTextureARB");
    sf_glad_glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC) load(userptr, "glClientActiveTextureARB");
    sf_glad_glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC) load(userptr, "glMultiTexCoord1dARB");
    sf_glad_glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC) load(userptr, "glMultiTexCoord1dvARB");
    sf_glad_glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC) load(userptr, "glMultiTexCoord1fARB");
    sf_glad_glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC) load(userptr, "glMultiTexCoord1fvARB");
    sf_glad_glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC) load(userptr, "glMultiTexCoord1iARB");
    sf_glad_glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC) load(userptr, "glMultiTexCoord1ivARB");
    sf_glad_glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC) load(userptr, "glMultiTexCoord1sARB");
    sf_glad_glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC) load(userptr, "glMultiTexCoord1svARB");
    sf_glad_glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC) load(userptr, "glMultiTexCoord2dARB");
    sf_glad_glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC) load(userptr, "glMultiTexCoord2dvARB");
    sf_glad_glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC) load(userptr, "glMultiTexCoord2fARB");
    sf_glad_glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC) load(userptr, "glMultiTexCoord2fvARB");
    sf_glad_glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC) load(userptr, "glMultiTexCoord2iARB");
    sf_glad_glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC) load(userptr, "glMultiTexCoord2ivARB");
    sf_glad_glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC) load(userptr, "glMultiTexCoord2sARB");
    sf_glad_glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC) load(userptr, "glMultiTexCoord2svARB");
    sf_glad_glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC) load(userptr, "glMultiTexCoord3dARB");
    sf_glad_glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC) load(userptr, "glMultiTexCoord3dvARB");
    sf_glad_glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC) load(userptr, "glMultiTexCoord3fARB");
    sf_glad_glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC) load(userptr, "glMultiTexCoord3fvARB");
    sf_glad_glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC) load(userptr, "glMultiTexCoord3iARB");
    sf_glad_glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC) load(userptr, "glMultiTexCoord3ivARB");
    sf_glad_glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC) load(userptr, "glMultiTexCoord3sARB");
    sf_glad_glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC) load(userptr, "glMultiTexCoord3svARB");
    sf_glad_glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC) load(userptr, "glMultiTexCoord4dARB");
    sf_glad_glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC) load(userptr, "glMultiTexCoord4dvARB");
    sf_glad_glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC) load(userptr, "glMultiTexCoord4fARB");
    sf_glad_glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC) load(userptr, "glMultiTexCoord4fvARB");
    sf_glad_glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC) load(userptr, "glMultiTexCoord4iARB");
    sf_glad_glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC) load(userptr, "glMultiTexCoord4ivARB");
    sf_glad_glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC) load(userptr, "glMultiTexCoord4sARB");
    sf_glad_glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC) load(userptr, "glMultiTexCoord4svARB");
}
static void sf_glad_gl_load_GL_ARB_occlusion_query( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_occlusion_query) return;
    sf_glad_glBeginQueryARB = (PFNGLBEGINQUERYARBPROC) load(userptr, "glBeginQueryARB");
    sf_glad_glDeleteQueriesARB = (PFNGLDELETEQUERIESARBPROC) load(userptr, "glDeleteQueriesARB");
    sf_glad_glEndQueryARB = (PFNGLENDQUERYARBPROC) load(userptr, "glEndQueryARB");
    sf_glad_glGenQueriesARB = (PFNGLGENQUERIESARBPROC) load(userptr, "glGenQueriesARB");
    sf_glad_glGetQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC) load(userptr, "glGetQueryObjectivARB");
    sf_glad_glGetQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC) load(userptr, "glGetQueryObjectuivARB");
    sf_glad_glGetQueryivARB = (PFNGLGETQUERYIVARBPROC) load(userptr, "glGetQueryivARB");
    sf_glad_glIsQueryARB = (PFNGLISQUERYARBPROC) load(userptr, "glIsQueryARB");
}
static void sf_glad_gl_load_GL_ARB_point_parameters( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_point_parameters) return;
    sf_glad_glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC) load(userptr, "glPointParameterfARB");
    sf_glad_glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC) load(userptr, "glPointParameterfvARB");
}
static void sf_glad_gl_load_GL_ARB_provoking_vertex( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_provoking_vertex) return;
    sf_glad_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC) load(userptr, "glProvokingVertex");
}
static void sf_glad_gl_load_GL_ARB_sample_shading( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_sample_shading) return;
    sf_glad_glMinSampleShadingARB = (PFNGLMINSAMPLESHADINGARBPROC) load(userptr, "glMinSampleShadingARB");
}
static void sf_glad_gl_load_GL_ARB_sampler_objects( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_sampler_objects) return;
    sf_glad_glBindSampler = (PFNGLBINDSAMPLERPROC) load(userptr, "glBindSampler");
    sf_glad_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC) load(userptr, "glDeleteSamplers");
    sf_glad_glGenSamplers = (PFNGLGENSAMPLERSPROC) load(userptr, "glGenSamplers");
    sf_glad_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC) load(userptr, "glGetSamplerParameterIiv");
    sf_glad_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC) load(userptr, "glGetSamplerParameterIuiv");
    sf_glad_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC) load(userptr, "glGetSamplerParameterfv");
    sf_glad_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC) load(userptr, "glGetSamplerParameteriv");
    sf_glad_glIsSampler = (PFNGLISSAMPLERPROC) load(userptr, "glIsSampler");
    sf_glad_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC) load(userptr, "glSamplerParameterIiv");
    sf_glad_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC) load(userptr, "glSamplerParameterIuiv");
    sf_glad_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC) load(userptr, "glSamplerParameterf");
    sf_glad_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC) load(userptr, "glSamplerParameterfv");
    sf_glad_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC) load(userptr, "glSamplerParameteri");
    sf_glad_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC) load(userptr, "glSamplerParameteriv");
}
static void sf_glad_gl_load_GL_ARB_separate_shader_objects( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_separate_shader_objects) return;
    sf_glad_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC) load(userptr, "glActiveShaderProgram");
    sf_glad_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC) load(userptr, "glBindProgramPipeline");
    sf_glad_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC) load(userptr, "glCreateShaderProgramv");
    sf_glad_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC) load(userptr, "glDeleteProgramPipelines");
    sf_glad_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC) load(userptr, "glGenProgramPipelines");
    sf_glad_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) load(userptr, "glGetProgramPipelineInfoLog");
    sf_glad_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC) load(userptr, "glGetProgramPipelineiv");
    sf_glad_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC) load(userptr, "glIsProgramPipeline");
    sf_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) load(userptr, "glProgramParameteri");
    sf_glad_glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC) load(userptr, "glProgramUniform1d");
    sf_glad_glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC) load(userptr, "glProgramUniform1dv");
    sf_glad_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC) load(userptr, "glProgramUniform1f");
    sf_glad_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC) load(userptr, "glProgramUniform1fv");
    sf_glad_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC) load(userptr, "glProgramUniform1i");
    sf_glad_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC) load(userptr, "glProgramUniform1iv");
    sf_glad_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC) load(userptr, "glProgramUniform1ui");
    sf_glad_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC) load(userptr, "glProgramUniform1uiv");
    sf_glad_glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC) load(userptr, "glProgramUniform2d");
    sf_glad_glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC) load(userptr, "glProgramUniform2dv");
    sf_glad_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC) load(userptr, "glProgramUniform2f");
    sf_glad_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC) load(userptr, "glProgramUniform2fv");
    sf_glad_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC) load(userptr, "glProgramUniform2i");
    sf_glad_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC) load(userptr, "glProgramUniform2iv");
    sf_glad_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC) load(userptr, "glProgramUniform2ui");
    sf_glad_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC) load(userptr, "glProgramUniform2uiv");
    sf_glad_glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC) load(userptr, "glProgramUniform3d");
    sf_glad_glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC) load(userptr, "glProgramUniform3dv");
    sf_glad_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC) load(userptr, "glProgramUniform3f");
    sf_glad_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC) load(userptr, "glProgramUniform3fv");
    sf_glad_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC) load(userptr, "glProgramUniform3i");
    sf_glad_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC) load(userptr, "glProgramUniform3iv");
    sf_glad_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC) load(userptr, "glProgramUniform3ui");
    sf_glad_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC) load(userptr, "glProgramUniform3uiv");
    sf_glad_glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC) load(userptr, "glProgramUniform4d");
    sf_glad_glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC) load(userptr, "glProgramUniform4dv");
    sf_glad_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC) load(userptr, "glProgramUniform4f");
    sf_glad_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC) load(userptr, "glProgramUniform4fv");
    sf_glad_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC) load(userptr, "glProgramUniform4i");
    sf_glad_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC) load(userptr, "glProgramUniform4iv");
    sf_glad_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC) load(userptr, "glProgramUniform4ui");
    sf_glad_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC) load(userptr, "glProgramUniform4uiv");
    sf_glad_glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC) load(userptr, "glProgramUniformMatrix2dv");
    sf_glad_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC) load(userptr, "glProgramUniformMatrix2fv");
    sf_glad_glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) load(userptr, "glProgramUniformMatrix2x3dv");
    sf_glad_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) load(userptr, "glProgramUniformMatrix2x3fv");
    sf_glad_glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) load(userptr, "glProgramUniformMatrix2x4dv");
    sf_glad_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) load(userptr, "glProgramUniformMatrix2x4fv");
    sf_glad_glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC) load(userptr, "glProgramUniformMatrix3dv");
    sf_glad_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC) load(userptr, "glProgramUniformMatrix3fv");
    sf_glad_glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) load(userptr, "glProgramUniformMatrix3x2dv");
    sf_glad_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) load(userptr, "glProgramUniformMatrix3x2fv");
    sf_glad_glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) load(userptr, "glProgramUniformMatrix3x4dv");
    sf_glad_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) load(userptr, "glProgramUniformMatrix3x4fv");
    sf_glad_glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC) load(userptr, "glProgramUniformMatrix4dv");
    sf_glad_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC) load(userptr, "glProgramUniformMatrix4fv");
    sf_glad_glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) load(userptr, "glProgramUniformMatrix4x2dv");
    sf_glad_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) load(userptr, "glProgramUniformMatrix4x2fv");
    sf_glad_glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) load(userptr, "glProgramUniformMatrix4x3dv");
    sf_glad_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) load(userptr, "glProgramUniformMatrix4x3fv");
    sf_glad_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC) load(userptr, "glUseProgramStages");
    sf_glad_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC) load(userptr, "glValidateProgramPipeline");
}
static void sf_glad_gl_load_GL_ARB_shader_objects( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_shader_objects) return;
    sf_glad_glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC) load(userptr, "glAttachObjectARB");
    sf_glad_glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC) load(userptr, "glCompileShaderARB");
    sf_glad_glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC) load(userptr, "glCreateProgramObjectARB");
    sf_glad_glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC) load(userptr, "glCreateShaderObjectARB");
    sf_glad_glDeleteObjectARB = (PFNGLDELETEOBJECTARBPROC) load(userptr, "glDeleteObjectARB");
    sf_glad_glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC) load(userptr, "glDetachObjectARB");
    sf_glad_glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC) load(userptr, "glGetActiveUniformARB");
    sf_glad_glGetAttachedObjectsARB = (PFNGLGETATTACHEDOBJECTSARBPROC) load(userptr, "glGetAttachedObjectsARB");
    sf_glad_glGetHandleARB = (PFNGLGETHANDLEARBPROC) load(userptr, "glGetHandleARB");
    sf_glad_glGetInfoLogARB = (PFNGLGETINFOLOGARBPROC) load(userptr, "glGetInfoLogARB");
    sf_glad_glGetObjectParameterfvARB = (PFNGLGETOBJECTPARAMETERFVARBPROC) load(userptr, "glGetObjectParameterfvARB");
    sf_glad_glGetObjectParameterivARB = (PFNGLGETOBJECTPARAMETERIVARBPROC) load(userptr, "glGetObjectParameterivARB");
    sf_glad_glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC) load(userptr, "glGetShaderSourceARB");
    sf_glad_glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC) load(userptr, "glGetUniformLocationARB");
    sf_glad_glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC) load(userptr, "glGetUniformfvARB");
    sf_glad_glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC) load(userptr, "glGetUniformivARB");
    sf_glad_glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC) load(userptr, "glLinkProgramARB");
    sf_glad_glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC) load(userptr, "glShaderSourceARB");
    sf_glad_glUniform1fARB = (PFNGLUNIFORM1FARBPROC) load(userptr, "glUniform1fARB");
    sf_glad_glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC) load(userptr, "glUniform1fvARB");
    sf_glad_glUniform1iARB = (PFNGLUNIFORM1IARBPROC) load(userptr, "glUniform1iARB");
    sf_glad_glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC) load(userptr, "glUniform1ivARB");
    sf_glad_glUniform2fARB = (PFNGLUNIFORM2FARBPROC) load(userptr, "glUniform2fARB");
    sf_glad_glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC) load(userptr, "glUniform2fvARB");
    sf_glad_glUniform2iARB = (PFNGLUNIFORM2IARBPROC) load(userptr, "glUniform2iARB");
    sf_glad_glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC) load(userptr, "glUniform2ivARB");
    sf_glad_glUniform3fARB = (PFNGLUNIFORM3FARBPROC) load(userptr, "glUniform3fARB");
    sf_glad_glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC) load(userptr, "glUniform3fvARB");
    sf_glad_glUniform3iARB = (PFNGLUNIFORM3IARBPROC) load(userptr, "glUniform3iARB");
    sf_glad_glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC) load(userptr, "glUniform3ivARB");
    sf_glad_glUniform4fARB = (PFNGLUNIFORM4FARBPROC) load(userptr, "glUniform4fARB");
    sf_glad_glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC) load(userptr, "glUniform4fvARB");
    sf_glad_glUniform4iARB = (PFNGLUNIFORM4IARBPROC) load(userptr, "glUniform4iARB");
    sf_glad_glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC) load(userptr, "glUniform4ivARB");
    sf_glad_glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC) load(userptr, "glUniformMatrix2fvARB");
    sf_glad_glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC) load(userptr, "glUniformMatrix3fvARB");
    sf_glad_glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC) load(userptr, "glUniformMatrix4fvARB");
    sf_glad_glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC) load(userptr, "glUseProgramObjectARB");
    sf_glad_glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC) load(userptr, "glValidateProgramARB");
}
static void sf_glad_gl_load_GL_ARB_shader_subroutine( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_shader_subroutine) return;
    sf_glad_glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC) load(userptr, "glGetActiveSubroutineName");
    sf_glad_glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) load(userptr, "glGetActiveSubroutineUniformName");
    sf_glad_glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) load(userptr, "glGetActiveSubroutineUniformiv");
    sf_glad_glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC) load(userptr, "glGetProgramStageiv");
    sf_glad_glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC) load(userptr, "glGetSubroutineIndex");
    sf_glad_glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) load(userptr, "glGetSubroutineUniformLocation");
    sf_glad_glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC) load(userptr, "glGetUniformSubroutineuiv");
    sf_glad_glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC) load(userptr, "glUniformSubroutinesuiv");
}
static void sf_glad_gl_load_GL_ARB_sync( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_sync) return;
    sf_glad_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC) load(userptr, "glClientWaitSync");
    sf_glad_glDeleteSync = (PFNGLDELETESYNCPROC) load(userptr, "glDeleteSync");
    sf_glad_glFenceSync = (PFNGLFENCESYNCPROC) load(userptr, "glFenceSync");
    sf_glad_glGetInteger64v = (PFNGLGETINTEGER64VPROC) load(userptr, "glGetInteger64v");
    sf_glad_glGetSynciv = (PFNGLGETSYNCIVPROC) load(userptr, "glGetSynciv");
    sf_glad_glIsSync = (PFNGLISSYNCPROC) load(userptr, "glIsSync");
    sf_glad_glWaitSync = (PFNGLWAITSYNCPROC) load(userptr, "glWaitSync");
}
static void sf_glad_gl_load_GL_ARB_tessellation_shader( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_tessellation_shader) return;
    sf_glad_glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC) load(userptr, "glPatchParameterfv");
    sf_glad_glPatchParameteri = (PFNGLPATCHPARAMETERIPROC) load(userptr, "glPatchParameteri");
}
static void sf_glad_gl_load_GL_ARB_texture_buffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_texture_buffer_object) return;
    sf_glad_glTexBufferARB = (PFNGLTEXBUFFERARBPROC) load(userptr, "glTexBufferARB");
}
static void sf_glad_gl_load_GL_ARB_texture_compression( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_texture_compression) return;
    sf_glad_glCompressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) load(userptr, "glCompressedTexImage1DARB");
    sf_glad_glCompressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) load(userptr, "glCompressedTexImage2DARB");
    sf_glad_glCompressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) load(userptr, "glCompressedTexImage3DARB");
    sf_glad_glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) load(userptr, "glCompressedTexSubImage1DARB");
    sf_glad_glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) load(userptr, "glCompressedTexSubImage2DARB");
    sf_glad_glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) load(userptr, "glCompressedTexSubImage3DARB");
    sf_glad_glGetCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) load(userptr, "glGetCompressedTexImageARB");
}
static void sf_glad_gl_load_GL_ARB_texture_multisample( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_texture_multisample) return;
    sf_glad_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) load(userptr, "glGetMultisamplefv");
    sf_glad_glSampleMaski = (PFNGLSAMPLEMASKIPROC) load(userptr, "glSampleMaski");
    sf_glad_glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC) load(userptr, "glTexImage2DMultisample");
    sf_glad_glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC) load(userptr, "glTexImage3DMultisample");
}
static void sf_glad_gl_load_GL_ARB_timer_query( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_timer_query) return;
    sf_glad_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC) load(userptr, "glGetQueryObjecti64v");
    sf_glad_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC) load(userptr, "glGetQueryObjectui64v");
    sf_glad_glQueryCounter = (PFNGLQUERYCOUNTERPROC) load(userptr, "glQueryCounter");
}
static void sf_glad_gl_load_GL_ARB_transform_feedback2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_transform_feedback2) return;
    sf_glad_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC) load(userptr, "glBindTransformFeedback");
    sf_glad_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC) load(userptr, "glDeleteTransformFeedbacks");
    sf_glad_glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC) load(userptr, "glDrawTransformFeedback");
    sf_glad_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC) load(userptr, "glGenTransformFeedbacks");
    sf_glad_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC) load(userptr, "glIsTransformFeedback");
    sf_glad_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC) load(userptr, "glPauseTransformFeedback");
    sf_glad_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC) load(userptr, "glResumeTransformFeedback");
}
static void sf_glad_gl_load_GL_ARB_transform_feedback3( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_transform_feedback3) return;
    sf_glad_glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC) load(userptr, "glBeginQueryIndexed");
    sf_glad_glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) load(userptr, "glDrawTransformFeedbackStream");
    sf_glad_glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC) load(userptr, "glEndQueryIndexed");
    sf_glad_glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC) load(userptr, "glGetQueryIndexediv");
}
static void sf_glad_gl_load_GL_ARB_uniform_buffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_uniform_buffer_object) return;
    sf_glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) load(userptr, "glBindBufferBase");
    sf_glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load(userptr, "glBindBufferRange");
    sf_glad_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) load(userptr, "glGetActiveUniformBlockName");
    sf_glad_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) load(userptr, "glGetActiveUniformBlockiv");
    sf_glad_glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC) load(userptr, "glGetActiveUniformName");
    sf_glad_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) load(userptr, "glGetActiveUniformsiv");
    sf_glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) load(userptr, "glGetIntegeri_v");
    sf_glad_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) load(userptr, "glGetUniformBlockIndex");
    sf_glad_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC) load(userptr, "glGetUniformIndices");
    sf_glad_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) load(userptr, "glUniformBlockBinding");
}
static void sf_glad_gl_load_GL_ARB_vertex_array_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_vertex_array_object) return;
    sf_glad_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC) load(userptr, "glBindVertexArray");
    sf_glad_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) load(userptr, "glDeleteVertexArrays");
    sf_glad_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC) load(userptr, "glGenVertexArrays");
    sf_glad_glIsVertexArray = (PFNGLISVERTEXARRAYPROC) load(userptr, "glIsVertexArray");
}
static void sf_glad_gl_load_GL_ARB_vertex_attrib_64bit( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_vertex_attrib_64bit) return;
    sf_glad_glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC) load(userptr, "glGetVertexAttribLdv");
    sf_glad_glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC) load(userptr, "glVertexAttribL1d");
    sf_glad_glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC) load(userptr, "glVertexAttribL1dv");
    sf_glad_glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC) load(userptr, "glVertexAttribL2d");
    sf_glad_glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC) load(userptr, "glVertexAttribL2dv");
    sf_glad_glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC) load(userptr, "glVertexAttribL3d");
    sf_glad_glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC) load(userptr, "glVertexAttribL3dv");
    sf_glad_glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC) load(userptr, "glVertexAttribL4d");
    sf_glad_glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC) load(userptr, "glVertexAttribL4dv");
    sf_glad_glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC) load(userptr, "glVertexAttribLPointer");
}
static void sf_glad_gl_load_GL_ARB_vertex_buffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_vertex_buffer_object) return;
    sf_glad_glBindBufferARB = (PFNGLBINDBUFFERARBPROC) load(userptr, "glBindBufferARB");
    sf_glad_glBufferDataARB = (PFNGLBUFFERDATAARBPROC) load(userptr, "glBufferDataARB");
    sf_glad_glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC) load(userptr, "glBufferSubDataARB");
    sf_glad_glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC) load(userptr, "glDeleteBuffersARB");
    sf_glad_glGenBuffersARB = (PFNGLGENBUFFERSARBPROC) load(userptr, "glGenBuffersARB");
    sf_glad_glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC) load(userptr, "glGetBufferParameterivARB");
    sf_glad_glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC) load(userptr, "glGetBufferPointervARB");
    sf_glad_glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC) load(userptr, "glGetBufferSubDataARB");
    sf_glad_glIsBufferARB = (PFNGLISBUFFERARBPROC) load(userptr, "glIsBufferARB");
    sf_glad_glMapBufferARB = (PFNGLMAPBUFFERARBPROC) load(userptr, "glMapBufferARB");
    sf_glad_glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC) load(userptr, "glUnmapBufferARB");
}
static void sf_glad_gl_load_GL_ARB_vertex_program( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_vertex_program) return;
    sf_glad_glBindProgramARB = (PFNGLBINDPROGRAMARBPROC) load(userptr, "glBindProgramARB");
    sf_glad_glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC) load(userptr, "glDeleteProgramsARB");
    sf_glad_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glDisableVertexAttribArrayARB");
    sf_glad_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glEnableVertexAttribArrayARB");
    sf_glad_glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC) load(userptr, "glGenProgramsARB");
    sf_glad_glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC) load(userptr, "glGetProgramEnvParameterdvARB");
    sf_glad_glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC) load(userptr, "glGetProgramEnvParameterfvARB");
    sf_glad_glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) load(userptr, "glGetProgramLocalParameterdvARB");
    sf_glad_glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) load(userptr, "glGetProgramLocalParameterfvARB");
    sf_glad_glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC) load(userptr, "glGetProgramStringARB");
    sf_glad_glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC) load(userptr, "glGetProgramivARB");
    sf_glad_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC) load(userptr, "glGetVertexAttribPointervARB");
    sf_glad_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC) load(userptr, "glGetVertexAttribdvARB");
    sf_glad_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC) load(userptr, "glGetVertexAttribfvARB");
    sf_glad_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC) load(userptr, "glGetVertexAttribivARB");
    sf_glad_glIsProgramARB = (PFNGLISPROGRAMARBPROC) load(userptr, "glIsProgramARB");
    sf_glad_glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC) load(userptr, "glProgramEnvParameter4dARB");
    sf_glad_glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC) load(userptr, "glProgramEnvParameter4dvARB");
    sf_glad_glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC) load(userptr, "glProgramEnvParameter4fARB");
    sf_glad_glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC) load(userptr, "glProgramEnvParameter4fvARB");
    sf_glad_glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC) load(userptr, "glProgramLocalParameter4dARB");
    sf_glad_glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) load(userptr, "glProgramLocalParameter4dvARB");
    sf_glad_glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC) load(userptr, "glProgramLocalParameter4fARB");
    sf_glad_glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) load(userptr, "glProgramLocalParameter4fvARB");
    sf_glad_glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC) load(userptr, "glProgramStringARB");
    sf_glad_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC) load(userptr, "glVertexAttrib1dARB");
    sf_glad_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC) load(userptr, "glVertexAttrib1dvARB");
    sf_glad_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC) load(userptr, "glVertexAttrib1fARB");
    sf_glad_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC) load(userptr, "glVertexAttrib1fvARB");
    sf_glad_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC) load(userptr, "glVertexAttrib1sARB");
    sf_glad_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC) load(userptr, "glVertexAttrib1svARB");
    sf_glad_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC) load(userptr, "glVertexAttrib2dARB");
    sf_glad_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC) load(userptr, "glVertexAttrib2dvARB");
    sf_glad_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC) load(userptr, "glVertexAttrib2fARB");
    sf_glad_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC) load(userptr, "glVertexAttrib2fvARB");
    sf_glad_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC) load(userptr, "glVertexAttrib2sARB");
    sf_glad_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC) load(userptr, "glVertexAttrib2svARB");
    sf_glad_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC) load(userptr, "glVertexAttrib3dARB");
    sf_glad_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC) load(userptr, "glVertexAttrib3dvARB");
    sf_glad_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC) load(userptr, "glVertexAttrib3fARB");
    sf_glad_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC) load(userptr, "glVertexAttrib3fvARB");
    sf_glad_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC) load(userptr, "glVertexAttrib3sARB");
    sf_glad_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC) load(userptr, "glVertexAttrib3svARB");
    sf_glad_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC) load(userptr, "glVertexAttrib4NbvARB");
    sf_glad_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC) load(userptr, "glVertexAttrib4NivARB");
    sf_glad_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC) load(userptr, "glVertexAttrib4NsvARB");
    sf_glad_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC) load(userptr, "glVertexAttrib4NubARB");
    sf_glad_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC) load(userptr, "glVertexAttrib4NubvARB");
    sf_glad_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC) load(userptr, "glVertexAttrib4NuivARB");
    sf_glad_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC) load(userptr, "glVertexAttrib4NusvARB");
    sf_glad_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC) load(userptr, "glVertexAttrib4bvARB");
    sf_glad_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC) load(userptr, "glVertexAttrib4dARB");
    sf_glad_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC) load(userptr, "glVertexAttrib4dvARB");
    sf_glad_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC) load(userptr, "glVertexAttrib4fARB");
    sf_glad_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC) load(userptr, "glVertexAttrib4fvARB");
    sf_glad_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC) load(userptr, "glVertexAttrib4ivARB");
    sf_glad_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC) load(userptr, "glVertexAttrib4sARB");
    sf_glad_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC) load(userptr, "glVertexAttrib4svARB");
    sf_glad_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC) load(userptr, "glVertexAttrib4ubvARB");
    sf_glad_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC) load(userptr, "glVertexAttrib4uivARB");
    sf_glad_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC) load(userptr, "glVertexAttrib4usvARB");
    sf_glad_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC) load(userptr, "glVertexAttribPointerARB");
}
static void sf_glad_gl_load_GL_ARB_vertex_shader( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_vertex_shader) return;
    sf_glad_glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC) load(userptr, "glBindAttribLocationARB");
    sf_glad_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glDisableVertexAttribArrayARB");
    sf_glad_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glEnableVertexAttribArrayARB");
    sf_glad_glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC) load(userptr, "glGetActiveAttribARB");
    sf_glad_glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC) load(userptr, "glGetAttribLocationARB");
    sf_glad_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC) load(userptr, "glGetVertexAttribPointervARB");
    sf_glad_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC) load(userptr, "glGetVertexAttribdvARB");
    sf_glad_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC) load(userptr, "glGetVertexAttribfvARB");
    sf_glad_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC) load(userptr, "glGetVertexAttribivARB");
    sf_glad_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC) load(userptr, "glVertexAttrib1dARB");
    sf_glad_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC) load(userptr, "glVertexAttrib1dvARB");
    sf_glad_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC) load(userptr, "glVertexAttrib1fARB");
    sf_glad_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC) load(userptr, "glVertexAttrib1fvARB");
    sf_glad_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC) load(userptr, "glVertexAttrib1sARB");
    sf_glad_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC) load(userptr, "glVertexAttrib1svARB");
    sf_glad_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC) load(userptr, "glVertexAttrib2dARB");
    sf_glad_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC) load(userptr, "glVertexAttrib2dvARB");
    sf_glad_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC) load(userptr, "glVertexAttrib2fARB");
    sf_glad_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC) load(userptr, "glVertexAttrib2fvARB");
    sf_glad_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC) load(userptr, "glVertexAttrib2sARB");
    sf_glad_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC) load(userptr, "glVertexAttrib2svARB");
    sf_glad_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC) load(userptr, "glVertexAttrib3dARB");
    sf_glad_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC) load(userptr, "glVertexAttrib3dvARB");
    sf_glad_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC) load(userptr, "glVertexAttrib3fARB");
    sf_glad_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC) load(userptr, "glVertexAttrib3fvARB");
    sf_glad_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC) load(userptr, "glVertexAttrib3sARB");
    sf_glad_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC) load(userptr, "glVertexAttrib3svARB");
    sf_glad_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC) load(userptr, "glVertexAttrib4NbvARB");
    sf_glad_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC) load(userptr, "glVertexAttrib4NivARB");
    sf_glad_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC) load(userptr, "glVertexAttrib4NsvARB");
    sf_glad_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC) load(userptr, "glVertexAttrib4NubARB");
    sf_glad_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC) load(userptr, "glVertexAttrib4NubvARB");
    sf_glad_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC) load(userptr, "glVertexAttrib4NuivARB");
    sf_glad_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC) load(userptr, "glVertexAttrib4NusvARB");
    sf_glad_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC) load(userptr, "glVertexAttrib4bvARB");
    sf_glad_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC) load(userptr, "glVertexAttrib4dARB");
    sf_glad_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC) load(userptr, "glVertexAttrib4dvARB");
    sf_glad_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC) load(userptr, "glVertexAttrib4fARB");
    sf_glad_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC) load(userptr, "glVertexAttrib4fvARB");
    sf_glad_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC) load(userptr, "glVertexAttrib4ivARB");
    sf_glad_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC) load(userptr, "glVertexAttrib4sARB");
    sf_glad_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC) load(userptr, "glVertexAttrib4svARB");
    sf_glad_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC) load(userptr, "glVertexAttrib4ubvARB");
    sf_glad_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC) load(userptr, "glVertexAttrib4uivARB");
    sf_glad_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC) load(userptr, "glVertexAttrib4usvARB");
    sf_glad_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC) load(userptr, "glVertexAttribPointerARB");
}
static void sf_glad_gl_load_GL_ARB_vertex_type_2_10_10_10_rev( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_vertex_type_2_10_10_10_rev) return;
    sf_glad_glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC) load(userptr, "glVertexAttribP1ui");
    sf_glad_glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC) load(userptr, "glVertexAttribP1uiv");
    sf_glad_glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC) load(userptr, "glVertexAttribP2ui");
    sf_glad_glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC) load(userptr, "glVertexAttribP2uiv");
    sf_glad_glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC) load(userptr, "glVertexAttribP3ui");
    sf_glad_glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC) load(userptr, "glVertexAttribP3uiv");
    sf_glad_glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC) load(userptr, "glVertexAttribP4ui");
    sf_glad_glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC) load(userptr, "glVertexAttribP4uiv");
}
static void sf_glad_gl_load_GL_ARB_viewport_array( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_viewport_array) return;
    sf_glad_glDepthRangeArraydvNV = (PFNGLDEPTHRANGEARRAYDVNVPROC) load(userptr, "glDepthRangeArraydvNV");
    sf_glad_glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC) load(userptr, "glDepthRangeArrayv");
    sf_glad_glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC) load(userptr, "glDepthRangeIndexed");
    sf_glad_glDepthRangeIndexeddNV = (PFNGLDEPTHRANGEINDEXEDDNVPROC) load(userptr, "glDepthRangeIndexeddNV");
    sf_glad_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC) load(userptr, "glGetDoublei_v");
    sf_glad_glGetFloati_v = (PFNGLGETFLOATI_VPROC) load(userptr, "glGetFloati_v");
    sf_glad_glScissorArrayv = (PFNGLSCISSORARRAYVPROC) load(userptr, "glScissorArrayv");
    sf_glad_glScissorIndexed = (PFNGLSCISSORINDEXEDPROC) load(userptr, "glScissorIndexed");
    sf_glad_glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC) load(userptr, "glScissorIndexedv");
    sf_glad_glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC) load(userptr, "glViewportArrayv");
    sf_glad_glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC) load(userptr, "glViewportIndexedf");
    sf_glad_glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC) load(userptr, "glViewportIndexedfv");
}
static void sf_glad_gl_load_GL_ATI_draw_buffers( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ATI_draw_buffers) return;
    sf_glad_glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC) load(userptr, "glDrawBuffersATI");
}
static void sf_glad_gl_load_GL_ATI_separate_stencil( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ATI_separate_stencil) return;
    sf_glad_glStencilFuncSeparateATI = (PFNGLSTENCILFUNCSEPARATEATIPROC) load(userptr, "glStencilFuncSeparateATI");
    sf_glad_glStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC) load(userptr, "glStencilOpSeparateATI");
}
static void sf_glad_gl_load_GL_EXT_blend_color( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_blend_color) return;
    sf_glad_glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC) load(userptr, "glBlendColorEXT");
}
static void sf_glad_gl_load_GL_EXT_blend_equation_separate( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_blend_equation_separate) return;
    sf_glad_glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC) load(userptr, "glBlendEquationSeparateEXT");
}
static void sf_glad_gl_load_GL_EXT_blend_func_separate( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_blend_func_separate) return;
    sf_glad_glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC) load(userptr, "glBlendFuncSeparateEXT");
}
static void sf_glad_gl_load_GL_EXT_blend_minmax( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_blend_minmax) return;
    sf_glad_glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC) load(userptr, "glBlendEquationEXT");
}
static void sf_glad_gl_load_GL_EXT_copy_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_copy_texture) return;
    sf_glad_glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC) load(userptr, "glCopyTexImage1DEXT");
    sf_glad_glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC) load(userptr, "glCopyTexImage2DEXT");
    sf_glad_glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC) load(userptr, "glCopyTexSubImage1DEXT");
    sf_glad_glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC) load(userptr, "glCopyTexSubImage2DEXT");
    sf_glad_glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC) load(userptr, "glCopyTexSubImage3DEXT");
}
static void sf_glad_gl_load_GL_EXT_direct_state_access( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_direct_state_access) return;
    sf_glad_glBindMultiTextureEXT = (PFNGLBINDMULTITEXTUREEXTPROC) load(userptr, "glBindMultiTextureEXT");
    sf_glad_glCheckNamedFramebufferStatusEXT = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) load(userptr, "glCheckNamedFramebufferStatusEXT");
    sf_glad_glClearNamedBufferDataEXT = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC) load(userptr, "glClearNamedBufferDataEXT");
    sf_glad_glClearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) load(userptr, "glClearNamedBufferSubDataEXT");
    sf_glad_glClientAttribDefaultEXT = (PFNGLCLIENTATTRIBDEFAULTEXTPROC) load(userptr, "glClientAttribDefaultEXT");
    sf_glad_glCompressedMultiTexImage1DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) load(userptr, "glCompressedMultiTexImage1DEXT");
    sf_glad_glCompressedMultiTexImage2DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) load(userptr, "glCompressedMultiTexImage2DEXT");
    sf_glad_glCompressedMultiTexImage3DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) load(userptr, "glCompressedMultiTexImage3DEXT");
    sf_glad_glCompressedMultiTexSubImage1DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) load(userptr, "glCompressedMultiTexSubImage1DEXT");
    sf_glad_glCompressedMultiTexSubImage2DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) load(userptr, "glCompressedMultiTexSubImage2DEXT");
    sf_glad_glCompressedMultiTexSubImage3DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) load(userptr, "glCompressedMultiTexSubImage3DEXT");
    sf_glad_glCompressedTextureImage1DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) load(userptr, "glCompressedTextureImage1DEXT");
    sf_glad_glCompressedTextureImage2DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) load(userptr, "glCompressedTextureImage2DEXT");
    sf_glad_glCompressedTextureImage3DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) load(userptr, "glCompressedTextureImage3DEXT");
    sf_glad_glCompressedTextureSubImage1DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) load(userptr, "glCompressedTextureSubImage1DEXT");
    sf_glad_glCompressedTextureSubImage2DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) load(userptr, "glCompressedTextureSubImage2DEXT");
    sf_glad_glCompressedTextureSubImage3DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) load(userptr, "glCompressedTextureSubImage3DEXT");
    sf_glad_glCopyMultiTexImage1DEXT = (PFNGLCOPYMULTITEXIMAGE1DEXTPROC) load(userptr, "glCopyMultiTexImage1DEXT");
    sf_glad_glCopyMultiTexImage2DEXT = (PFNGLCOPYMULTITEXIMAGE2DEXTPROC) load(userptr, "glCopyMultiTexImage2DEXT");
    sf_glad_glCopyMultiTexSubImage1DEXT = (PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) load(userptr, "glCopyMultiTexSubImage1DEXT");
    sf_glad_glCopyMultiTexSubImage2DEXT = (PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) load(userptr, "glCopyMultiTexSubImage2DEXT");
    sf_glad_glCopyMultiTexSubImage3DEXT = (PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) load(userptr, "glCopyMultiTexSubImage3DEXT");
    sf_glad_glCopyTextureImage1DEXT = (PFNGLCOPYTEXTUREIMAGE1DEXTPROC) load(userptr, "glCopyTextureImage1DEXT");
    sf_glad_glCopyTextureImage2DEXT = (PFNGLCOPYTEXTUREIMAGE2DEXTPROC) load(userptr, "glCopyTextureImage2DEXT");
    sf_glad_glCopyTextureSubImage1DEXT = (PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) load(userptr, "glCopyTextureSubImage1DEXT");
    sf_glad_glCopyTextureSubImage2DEXT = (PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) load(userptr, "glCopyTextureSubImage2DEXT");
    sf_glad_glCopyTextureSubImage3DEXT = (PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) load(userptr, "glCopyTextureSubImage3DEXT");
    sf_glad_glDisableClientStateIndexedEXT = (PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) load(userptr, "glDisableClientStateIndexedEXT");
    sf_glad_glDisableClientStateiEXT = (PFNGLDISABLECLIENTSTATEIEXTPROC) load(userptr, "glDisableClientStateiEXT");
    sf_glad_glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC) load(userptr, "glDisableIndexedEXT");
    sf_glad_glDisableVertexArrayAttribEXT = (PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC) load(userptr, "glDisableVertexArrayAttribEXT");
    sf_glad_glDisableVertexArrayEXT = (PFNGLDISABLEVERTEXARRAYEXTPROC) load(userptr, "glDisableVertexArrayEXT");
    sf_glad_glEnableClientStateIndexedEXT = (PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) load(userptr, "glEnableClientStateIndexedEXT");
    sf_glad_glEnableClientStateiEXT = (PFNGLENABLECLIENTSTATEIEXTPROC) load(userptr, "glEnableClientStateiEXT");
    sf_glad_glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC) load(userptr, "glEnableIndexedEXT");
    sf_glad_glEnableVertexArrayAttribEXT = (PFNGLENABLEVERTEXARRAYATTRIBEXTPROC) load(userptr, "glEnableVertexArrayAttribEXT");
    sf_glad_glEnableVertexArrayEXT = (PFNGLENABLEVERTEXARRAYEXTPROC) load(userptr, "glEnableVertexArrayEXT");
    sf_glad_glFlushMappedNamedBufferRangeEXT = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) load(userptr, "glFlushMappedNamedBufferRangeEXT");
    sf_glad_glFramebufferDrawBufferEXT = (PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) load(userptr, "glFramebufferDrawBufferEXT");
    sf_glad_glFramebufferDrawBuffersEXT = (PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) load(userptr, "glFramebufferDrawBuffersEXT");
    sf_glad_glFramebufferReadBufferEXT = (PFNGLFRAMEBUFFERREADBUFFEREXTPROC) load(userptr, "glFramebufferReadBufferEXT");
    sf_glad_glGenerateMultiTexMipmapEXT = (PFNGLGENERATEMULTITEXMIPMAPEXTPROC) load(userptr, "glGenerateMultiTexMipmapEXT");
    sf_glad_glGenerateTextureMipmapEXT = (PFNGLGENERATETEXTUREMIPMAPEXTPROC) load(userptr, "glGenerateTextureMipmapEXT");
    sf_glad_glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC) load(userptr, "glGetBooleanIndexedvEXT");
    sf_glad_glGetCompressedMultiTexImageEXT = (PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) load(userptr, "glGetCompressedMultiTexImageEXT");
    sf_glad_glGetCompressedTextureImageEXT = (PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) load(userptr, "glGetCompressedTextureImageEXT");
    sf_glad_glGetDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC) load(userptr, "glGetDoubleIndexedvEXT");
    sf_glad_glGetDoublei_vEXT = (PFNGLGETDOUBLEI_VEXTPROC) load(userptr, "glGetDoublei_vEXT");
    sf_glad_glGetFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC) load(userptr, "glGetFloatIndexedvEXT");
    sf_glad_glGetFloati_vEXT = (PFNGLGETFLOATI_VEXTPROC) load(userptr, "glGetFloati_vEXT");
    sf_glad_glGetFramebufferParameterivEXT = (PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetFramebufferParameterivEXT");
    sf_glad_glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC) load(userptr, "glGetIntegerIndexedvEXT");
    sf_glad_glGetMultiTexEnvfvEXT = (PFNGLGETMULTITEXENVFVEXTPROC) load(userptr, "glGetMultiTexEnvfvEXT");
    sf_glad_glGetMultiTexEnvivEXT = (PFNGLGETMULTITEXENVIVEXTPROC) load(userptr, "glGetMultiTexEnvivEXT");
    sf_glad_glGetMultiTexGendvEXT = (PFNGLGETMULTITEXGENDVEXTPROC) load(userptr, "glGetMultiTexGendvEXT");
    sf_glad_glGetMultiTexGenfvEXT = (PFNGLGETMULTITEXGENFVEXTPROC) load(userptr, "glGetMultiTexGenfvEXT");
    sf_glad_glGetMultiTexGenivEXT = (PFNGLGETMULTITEXGENIVEXTPROC) load(userptr, "glGetMultiTexGenivEXT");
    sf_glad_glGetMultiTexImageEXT = (PFNGLGETMULTITEXIMAGEEXTPROC) load(userptr, "glGetMultiTexImageEXT");
    sf_glad_glGetMultiTexLevelParameterfvEXT = (PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) load(userptr, "glGetMultiTexLevelParameterfvEXT");
    sf_glad_glGetMultiTexLevelParameterivEXT = (PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) load(userptr, "glGetMultiTexLevelParameterivEXT");
    sf_glad_glGetMultiTexParameterIivEXT = (PFNGLGETMULTITEXPARAMETERIIVEXTPROC) load(userptr, "glGetMultiTexParameterIivEXT");
    sf_glad_glGetMultiTexParameterIuivEXT = (PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) load(userptr, "glGetMultiTexParameterIuivEXT");
    sf_glad_glGetMultiTexParameterfvEXT = (PFNGLGETMULTITEXPARAMETERFVEXTPROC) load(userptr, "glGetMultiTexParameterfvEXT");
    sf_glad_glGetMultiTexParameterivEXT = (PFNGLGETMULTITEXPARAMETERIVEXTPROC) load(userptr, "glGetMultiTexParameterivEXT");
    sf_glad_glGetNamedBufferParameterivEXT = (PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetNamedBufferParameterivEXT");
    sf_glad_glGetNamedBufferPointervEXT = (PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) load(userptr, "glGetNamedBufferPointervEXT");
    sf_glad_glGetNamedBufferSubDataEXT = (PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) load(userptr, "glGetNamedBufferSubDataEXT");
    sf_glad_glGetNamedFramebufferAttachmentParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) load(userptr, "glGetNamedFramebufferAttachmentParameterivEXT");
    sf_glad_glGetNamedFramebufferParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetNamedFramebufferParameterivEXT");
    sf_glad_glGetNamedProgramLocalParameterIivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) load(userptr, "glGetNamedProgramLocalParameterIivEXT");
    sf_glad_glGetNamedProgramLocalParameterIuivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) load(userptr, "glGetNamedProgramLocalParameterIuivEXT");
    sf_glad_glGetNamedProgramLocalParameterdvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) load(userptr, "glGetNamedProgramLocalParameterdvEXT");
    sf_glad_glGetNamedProgramLocalParameterfvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) load(userptr, "glGetNamedProgramLocalParameterfvEXT");
    sf_glad_glGetNamedProgramStringEXT = (PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) load(userptr, "glGetNamedProgramStringEXT");
    sf_glad_glGetNamedProgramivEXT = (PFNGLGETNAMEDPROGRAMIVEXTPROC) load(userptr, "glGetNamedProgramivEXT");
    sf_glad_glGetNamedRenderbufferParameterivEXT = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetNamedRenderbufferParameterivEXT");
    sf_glad_glGetPointerIndexedvEXT = (PFNGLGETPOINTERINDEXEDVEXTPROC) load(userptr, "glGetPointerIndexedvEXT");
    sf_glad_glGetPointeri_vEXT = (PFNGLGETPOINTERI_VEXTPROC) load(userptr, "glGetPointeri_vEXT");
    sf_glad_glGetTextureImageEXT = (PFNGLGETTEXTUREIMAGEEXTPROC) load(userptr, "glGetTextureImageEXT");
    sf_glad_glGetTextureLevelParameterfvEXT = (PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) load(userptr, "glGetTextureLevelParameterfvEXT");
    sf_glad_glGetTextureLevelParameterivEXT = (PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) load(userptr, "glGetTextureLevelParameterivEXT");
    sf_glad_glGetTextureParameterIivEXT = (PFNGLGETTEXTUREPARAMETERIIVEXTPROC) load(userptr, "glGetTextureParameterIivEXT");
    sf_glad_glGetTextureParameterIuivEXT = (PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) load(userptr, "glGetTextureParameterIuivEXT");
    sf_glad_glGetTextureParameterfvEXT = (PFNGLGETTEXTUREPARAMETERFVEXTPROC) load(userptr, "glGetTextureParameterfvEXT");
    sf_glad_glGetTextureParameterivEXT = (PFNGLGETTEXTUREPARAMETERIVEXTPROC) load(userptr, "glGetTextureParameterivEXT");
    sf_glad_glGetVertexArrayIntegeri_vEXT = (PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) load(userptr, "glGetVertexArrayIntegeri_vEXT");
    sf_glad_glGetVertexArrayIntegervEXT = (PFNGLGETVERTEXARRAYINTEGERVEXTPROC) load(userptr, "glGetVertexArrayIntegervEXT");
    sf_glad_glGetVertexArrayPointeri_vEXT = (PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) load(userptr, "glGetVertexArrayPointeri_vEXT");
    sf_glad_glGetVertexArrayPointervEXT = (PFNGLGETVERTEXARRAYPOINTERVEXTPROC) load(userptr, "glGetVertexArrayPointervEXT");
    sf_glad_glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC) load(userptr, "glIsEnabledIndexedEXT");
    sf_glad_glMapNamedBufferEXT = (PFNGLMAPNAMEDBUFFEREXTPROC) load(userptr, "glMapNamedBufferEXT");
    sf_glad_glMapNamedBufferRangeEXT = (PFNGLMAPNAMEDBUFFERRANGEEXTPROC) load(userptr, "glMapNamedBufferRangeEXT");
    sf_glad_glMatrixFrustumEXT = (PFNGLMATRIXFRUSTUMEXTPROC) load(userptr, "glMatrixFrustumEXT");
    sf_glad_glMatrixLoadIdentityEXT = (PFNGLMATRIXLOADIDENTITYEXTPROC) load(userptr, "glMatrixLoadIdentityEXT");
    sf_glad_glMatrixLoadTransposedEXT = (PFNGLMATRIXLOADTRANSPOSEDEXTPROC) load(userptr, "glMatrixLoadTransposedEXT");
    sf_glad_glMatrixLoadTransposefEXT = (PFNGLMATRIXLOADTRANSPOSEFEXTPROC) load(userptr, "glMatrixLoadTransposefEXT");
    sf_glad_glMatrixLoaddEXT = (PFNGLMATRIXLOADDEXTPROC) load(userptr, "glMatrixLoaddEXT");
    sf_glad_glMatrixLoadfEXT = (PFNGLMATRIXLOADFEXTPROC) load(userptr, "glMatrixLoadfEXT");
    sf_glad_glMatrixMultTransposedEXT = (PFNGLMATRIXMULTTRANSPOSEDEXTPROC) load(userptr, "glMatrixMultTransposedEXT");
    sf_glad_glMatrixMultTransposefEXT = (PFNGLMATRIXMULTTRANSPOSEFEXTPROC) load(userptr, "glMatrixMultTransposefEXT");
    sf_glad_glMatrixMultdEXT = (PFNGLMATRIXMULTDEXTPROC) load(userptr, "glMatrixMultdEXT");
    sf_glad_glMatrixMultfEXT = (PFNGLMATRIXMULTFEXTPROC) load(userptr, "glMatrixMultfEXT");
    sf_glad_glMatrixOrthoEXT = (PFNGLMATRIXORTHOEXTPROC) load(userptr, "glMatrixOrthoEXT");
    sf_glad_glMatrixPopEXT = (PFNGLMATRIXPOPEXTPROC) load(userptr, "glMatrixPopEXT");
    sf_glad_glMatrixPushEXT = (PFNGLMATRIXPUSHEXTPROC) load(userptr, "glMatrixPushEXT");
    sf_glad_glMatrixRotatedEXT = (PFNGLMATRIXROTATEDEXTPROC) load(userptr, "glMatrixRotatedEXT");
    sf_glad_glMatrixRotatefEXT = (PFNGLMATRIXROTATEFEXTPROC) load(userptr, "glMatrixRotatefEXT");
    sf_glad_glMatrixScaledEXT = (PFNGLMATRIXSCALEDEXTPROC) load(userptr, "glMatrixScaledEXT");
    sf_glad_glMatrixScalefEXT = (PFNGLMATRIXSCALEFEXTPROC) load(userptr, "glMatrixScalefEXT");
    sf_glad_glMatrixTranslatedEXT = (PFNGLMATRIXTRANSLATEDEXTPROC) load(userptr, "glMatrixTranslatedEXT");
    sf_glad_glMatrixTranslatefEXT = (PFNGLMATRIXTRANSLATEFEXTPROC) load(userptr, "glMatrixTranslatefEXT");
    sf_glad_glMultiTexBufferEXT = (PFNGLMULTITEXBUFFEREXTPROC) load(userptr, "glMultiTexBufferEXT");
    sf_glad_glMultiTexCoordPointerEXT = (PFNGLMULTITEXCOORDPOINTEREXTPROC) load(userptr, "glMultiTexCoordPointerEXT");
    sf_glad_glMultiTexEnvfEXT = (PFNGLMULTITEXENVFEXTPROC) load(userptr, "glMultiTexEnvfEXT");
    sf_glad_glMultiTexEnvfvEXT = (PFNGLMULTITEXENVFVEXTPROC) load(userptr, "glMultiTexEnvfvEXT");
    sf_glad_glMultiTexEnviEXT = (PFNGLMULTITEXENVIEXTPROC) load(userptr, "glMultiTexEnviEXT");
    sf_glad_glMultiTexEnvivEXT = (PFNGLMULTITEXENVIVEXTPROC) load(userptr, "glMultiTexEnvivEXT");
    sf_glad_glMultiTexGendEXT = (PFNGLMULTITEXGENDEXTPROC) load(userptr, "glMultiTexGendEXT");
    sf_glad_glMultiTexGendvEXT = (PFNGLMULTITEXGENDVEXTPROC) load(userptr, "glMultiTexGendvEXT");
    sf_glad_glMultiTexGenfEXT = (PFNGLMULTITEXGENFEXTPROC) load(userptr, "glMultiTexGenfEXT");
    sf_glad_glMultiTexGenfvEXT = (PFNGLMULTITEXGENFVEXTPROC) load(userptr, "glMultiTexGenfvEXT");
    sf_glad_glMultiTexGeniEXT = (PFNGLMULTITEXGENIEXTPROC) load(userptr, "glMultiTexGeniEXT");
    sf_glad_glMultiTexGenivEXT = (PFNGLMULTITEXGENIVEXTPROC) load(userptr, "glMultiTexGenivEXT");
    sf_glad_glMultiTexImage1DEXT = (PFNGLMULTITEXIMAGE1DEXTPROC) load(userptr, "glMultiTexImage1DEXT");
    sf_glad_glMultiTexImage2DEXT = (PFNGLMULTITEXIMAGE2DEXTPROC) load(userptr, "glMultiTexImage2DEXT");
    sf_glad_glMultiTexImage3DEXT = (PFNGLMULTITEXIMAGE3DEXTPROC) load(userptr, "glMultiTexImage3DEXT");
    sf_glad_glMultiTexParameterIivEXT = (PFNGLMULTITEXPARAMETERIIVEXTPROC) load(userptr, "glMultiTexParameterIivEXT");
    sf_glad_glMultiTexParameterIuivEXT = (PFNGLMULTITEXPARAMETERIUIVEXTPROC) load(userptr, "glMultiTexParameterIuivEXT");
    sf_glad_glMultiTexParameterfEXT = (PFNGLMULTITEXPARAMETERFEXTPROC) load(userptr, "glMultiTexParameterfEXT");
    sf_glad_glMultiTexParameterfvEXT = (PFNGLMULTITEXPARAMETERFVEXTPROC) load(userptr, "glMultiTexParameterfvEXT");
    sf_glad_glMultiTexParameteriEXT = (PFNGLMULTITEXPARAMETERIEXTPROC) load(userptr, "glMultiTexParameteriEXT");
    sf_glad_glMultiTexParameterivEXT = (PFNGLMULTITEXPARAMETERIVEXTPROC) load(userptr, "glMultiTexParameterivEXT");
    sf_glad_glMultiTexRenderbufferEXT = (PFNGLMULTITEXRENDERBUFFEREXTPROC) load(userptr, "glMultiTexRenderbufferEXT");
    sf_glad_glMultiTexSubImage1DEXT = (PFNGLMULTITEXSUBIMAGE1DEXTPROC) load(userptr, "glMultiTexSubImage1DEXT");
    sf_glad_glMultiTexSubImage2DEXT = (PFNGLMULTITEXSUBIMAGE2DEXTPROC) load(userptr, "glMultiTexSubImage2DEXT");
    sf_glad_glMultiTexSubImage3DEXT = (PFNGLMULTITEXSUBIMAGE3DEXTPROC) load(userptr, "glMultiTexSubImage3DEXT");
    sf_glad_glNamedBufferDataEXT = (PFNGLNAMEDBUFFERDATAEXTPROC) load(userptr, "glNamedBufferDataEXT");
    sf_glad_glNamedBufferStorageEXT = (PFNGLNAMEDBUFFERSTORAGEEXTPROC) load(userptr, "glNamedBufferStorageEXT");
    sf_glad_glNamedBufferSubDataEXT = (PFNGLNAMEDBUFFERSUBDATAEXTPROC) load(userptr, "glNamedBufferSubDataEXT");
    sf_glad_glNamedCopyBufferSubDataEXT = (PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) load(userptr, "glNamedCopyBufferSubDataEXT");
    sf_glad_glNamedFramebufferParameteriEXT = (PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) load(userptr, "glNamedFramebufferParameteriEXT");
    sf_glad_glNamedFramebufferRenderbufferEXT = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) load(userptr, "glNamedFramebufferRenderbufferEXT");
    sf_glad_glNamedFramebufferTexture1DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) load(userptr, "glNamedFramebufferTexture1DEXT");
    sf_glad_glNamedFramebufferTexture2DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) load(userptr, "glNamedFramebufferTexture2DEXT");
    sf_glad_glNamedFramebufferTexture3DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) load(userptr, "glNamedFramebufferTexture3DEXT");
    sf_glad_glNamedFramebufferTextureEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) load(userptr, "glNamedFramebufferTextureEXT");
    sf_glad_glNamedFramebufferTextureFaceEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) load(userptr, "glNamedFramebufferTextureFaceEXT");
    sf_glad_glNamedFramebufferTextureLayerEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) load(userptr, "glNamedFramebufferTextureLayerEXT");
    sf_glad_glNamedProgramLocalParameter4dEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) load(userptr, "glNamedProgramLocalParameter4dEXT");
    sf_glad_glNamedProgramLocalParameter4dvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) load(userptr, "glNamedProgramLocalParameter4dvEXT");
    sf_glad_glNamedProgramLocalParameter4fEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) load(userptr, "glNamedProgramLocalParameter4fEXT");
    sf_glad_glNamedProgramLocalParameter4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) load(userptr, "glNamedProgramLocalParameter4fvEXT");
    sf_glad_glNamedProgramLocalParameterI4iEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) load(userptr, "glNamedProgramLocalParameterI4iEXT");
    sf_glad_glNamedProgramLocalParameterI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) load(userptr, "glNamedProgramLocalParameterI4ivEXT");
    sf_glad_glNamedProgramLocalParameterI4uiEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) load(userptr, "glNamedProgramLocalParameterI4uiEXT");
    sf_glad_glNamedProgramLocalParameterI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) load(userptr, "glNamedProgramLocalParameterI4uivEXT");
    sf_glad_glNamedProgramLocalParameters4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) load(userptr, "glNamedProgramLocalParameters4fvEXT");
    sf_glad_glNamedProgramLocalParametersI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) load(userptr, "glNamedProgramLocalParametersI4ivEXT");
    sf_glad_glNamedProgramLocalParametersI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) load(userptr, "glNamedProgramLocalParametersI4uivEXT");
    sf_glad_glNamedProgramStringEXT = (PFNGLNAMEDPROGRAMSTRINGEXTPROC) load(userptr, "glNamedProgramStringEXT");
    sf_glad_glNamedRenderbufferStorageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) load(userptr, "glNamedRenderbufferStorageEXT");
    sf_glad_glNamedRenderbufferStorageMultisampleCoverageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) load(userptr, "glNamedRenderbufferStorageMultisampleCoverageEXT");
    sf_glad_glNamedRenderbufferStorageMultisampleEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) load(userptr, "glNamedRenderbufferStorageMultisampleEXT");
    sf_glad_glProgramUniform1dEXT = (PFNGLPROGRAMUNIFORM1DEXTPROC) load(userptr, "glProgramUniform1dEXT");
    sf_glad_glProgramUniform1dvEXT = (PFNGLPROGRAMUNIFORM1DVEXTPROC) load(userptr, "glProgramUniform1dvEXT");
    sf_glad_glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC) load(userptr, "glProgramUniform1fEXT");
    sf_glad_glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC) load(userptr, "glProgramUniform1fvEXT");
    sf_glad_glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC) load(userptr, "glProgramUniform1iEXT");
    sf_glad_glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC) load(userptr, "glProgramUniform1ivEXT");
    sf_glad_glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC) load(userptr, "glProgramUniform1uiEXT");
    sf_glad_glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC) load(userptr, "glProgramUniform1uivEXT");
    sf_glad_glProgramUniform2dEXT = (PFNGLPROGRAMUNIFORM2DEXTPROC) load(userptr, "glProgramUniform2dEXT");
    sf_glad_glProgramUniform2dvEXT = (PFNGLPROGRAMUNIFORM2DVEXTPROC) load(userptr, "glProgramUniform2dvEXT");
    sf_glad_glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC) load(userptr, "glProgramUniform2fEXT");
    sf_glad_glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC) load(userptr, "glProgramUniform2fvEXT");
    sf_glad_glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC) load(userptr, "glProgramUniform2iEXT");
    sf_glad_glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC) load(userptr, "glProgramUniform2ivEXT");
    sf_glad_glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC) load(userptr, "glProgramUniform2uiEXT");
    sf_glad_glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC) load(userptr, "glProgramUniform2uivEXT");
    sf_glad_glProgramUniform3dEXT = (PFNGLPROGRAMUNIFORM3DEXTPROC) load(userptr, "glProgramUniform3dEXT");
    sf_glad_glProgramUniform3dvEXT = (PFNGLPROGRAMUNIFORM3DVEXTPROC) load(userptr, "glProgramUniform3dvEXT");
    sf_glad_glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC) load(userptr, "glProgramUniform3fEXT");
    sf_glad_glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC) load(userptr, "glProgramUniform3fvEXT");
    sf_glad_glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC) load(userptr, "glProgramUniform3iEXT");
    sf_glad_glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC) load(userptr, "glProgramUniform3ivEXT");
    sf_glad_glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC) load(userptr, "glProgramUniform3uiEXT");
    sf_glad_glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC) load(userptr, "glProgramUniform3uivEXT");
    sf_glad_glProgramUniform4dEXT = (PFNGLPROGRAMUNIFORM4DEXTPROC) load(userptr, "glProgramUniform4dEXT");
    sf_glad_glProgramUniform4dvEXT = (PFNGLPROGRAMUNIFORM4DVEXTPROC) load(userptr, "glProgramUniform4dvEXT");
    sf_glad_glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC) load(userptr, "glProgramUniform4fEXT");
    sf_glad_glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC) load(userptr, "glProgramUniform4fvEXT");
    sf_glad_glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC) load(userptr, "glProgramUniform4iEXT");
    sf_glad_glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC) load(userptr, "glProgramUniform4ivEXT");
    sf_glad_glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC) load(userptr, "glProgramUniform4uiEXT");
    sf_glad_glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC) load(userptr, "glProgramUniform4uivEXT");
    sf_glad_glProgramUniformMatrix2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) load(userptr, "glProgramUniformMatrix2dvEXT");
    sf_glad_glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) load(userptr, "glProgramUniformMatrix2fvEXT");
    sf_glad_glProgramUniformMatrix2x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) load(userptr, "glProgramUniformMatrix2x3dvEXT");
    sf_glad_glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) load(userptr, "glProgramUniformMatrix2x3fvEXT");
    sf_glad_glProgramUniformMatrix2x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) load(userptr, "glProgramUniformMatrix2x4dvEXT");
    sf_glad_glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) load(userptr, "glProgramUniformMatrix2x4fvEXT");
    sf_glad_glProgramUniformMatrix3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) load(userptr, "glProgramUniformMatrix3dvEXT");
    sf_glad_glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) load(userptr, "glProgramUniformMatrix3fvEXT");
    sf_glad_glProgramUniformMatrix3x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) load(userptr, "glProgramUniformMatrix3x2dvEXT");
    sf_glad_glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) load(userptr, "glProgramUniformMatrix3x2fvEXT");
    sf_glad_glProgramUniformMatrix3x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) load(userptr, "glProgramUniformMatrix3x4dvEXT");
    sf_glad_glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) load(userptr, "glProgramUniformMatrix3x4fvEXT");
    sf_glad_glProgramUniformMatrix4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) load(userptr, "glProgramUniformMatrix4dvEXT");
    sf_glad_glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) load(userptr, "glProgramUniformMatrix4fvEXT");
    sf_glad_glProgramUniformMatrix4x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) load(userptr, "glProgramUniformMatrix4x2dvEXT");
    sf_glad_glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) load(userptr, "glProgramUniformMatrix4x2fvEXT");
    sf_glad_glProgramUniformMatrix4x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) load(userptr, "glProgramUniformMatrix4x3dvEXT");
    sf_glad_glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) load(userptr, "glProgramUniformMatrix4x3fvEXT");
    sf_glad_glPushClientAttribDefaultEXT = (PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) load(userptr, "glPushClientAttribDefaultEXT");
    sf_glad_glTextureBufferEXT = (PFNGLTEXTUREBUFFEREXTPROC) load(userptr, "glTextureBufferEXT");
    sf_glad_glTextureBufferRangeEXT = (PFNGLTEXTUREBUFFERRANGEEXTPROC) load(userptr, "glTextureBufferRangeEXT");
    sf_glad_glTextureImage1DEXT = (PFNGLTEXTUREIMAGE1DEXTPROC) load(userptr, "glTextureImage1DEXT");
    sf_glad_glTextureImage2DEXT = (PFNGLTEXTUREIMAGE2DEXTPROC) load(userptr, "glTextureImage2DEXT");
    sf_glad_glTextureImage3DEXT = (PFNGLTEXTUREIMAGE3DEXTPROC) load(userptr, "glTextureImage3DEXT");
    sf_glad_glTexturePageCommitmentEXT = (PFNGLTEXTUREPAGECOMMITMENTEXTPROC) load(userptr, "glTexturePageCommitmentEXT");
    sf_glad_glTextureParameterIivEXT = (PFNGLTEXTUREPARAMETERIIVEXTPROC) load(userptr, "glTextureParameterIivEXT");
    sf_glad_glTextureParameterIuivEXT = (PFNGLTEXTUREPARAMETERIUIVEXTPROC) load(userptr, "glTextureParameterIuivEXT");
    sf_glad_glTextureParameterfEXT = (PFNGLTEXTUREPARAMETERFEXTPROC) load(userptr, "glTextureParameterfEXT");
    sf_glad_glTextureParameterfvEXT = (PFNGLTEXTUREPARAMETERFVEXTPROC) load(userptr, "glTextureParameterfvEXT");
    sf_glad_glTextureParameteriEXT = (PFNGLTEXTUREPARAMETERIEXTPROC) load(userptr, "glTextureParameteriEXT");
    sf_glad_glTextureParameterivEXT = (PFNGLTEXTUREPARAMETERIVEXTPROC) load(userptr, "glTextureParameterivEXT");
    sf_glad_glTextureRenderbufferEXT = (PFNGLTEXTURERENDERBUFFEREXTPROC) load(userptr, "glTextureRenderbufferEXT");
    sf_glad_glTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC) load(userptr, "glTextureStorage1DEXT");
    sf_glad_glTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC) load(userptr, "glTextureStorage2DEXT");
    sf_glad_glTextureStorage2DMultisampleEXT = (PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) load(userptr, "glTextureStorage2DMultisampleEXT");
    sf_glad_glTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC) load(userptr, "glTextureStorage3DEXT");
    sf_glad_glTextureStorage3DMultisampleEXT = (PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) load(userptr, "glTextureStorage3DMultisampleEXT");
    sf_glad_glTextureSubImage1DEXT = (PFNGLTEXTURESUBIMAGE1DEXTPROC) load(userptr, "glTextureSubImage1DEXT");
    sf_glad_glTextureSubImage2DEXT = (PFNGLTEXTURESUBIMAGE2DEXTPROC) load(userptr, "glTextureSubImage2DEXT");
    sf_glad_glTextureSubImage3DEXT = (PFNGLTEXTURESUBIMAGE3DEXTPROC) load(userptr, "glTextureSubImage3DEXT");
    sf_glad_glUnmapNamedBufferEXT = (PFNGLUNMAPNAMEDBUFFEREXTPROC) load(userptr, "glUnmapNamedBufferEXT");
    sf_glad_glVertexArrayBindVertexBufferEXT = (PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) load(userptr, "glVertexArrayBindVertexBufferEXT");
    sf_glad_glVertexArrayColorOffsetEXT = (PFNGLVERTEXARRAYCOLOROFFSETEXTPROC) load(userptr, "glVertexArrayColorOffsetEXT");
    sf_glad_glVertexArrayEdgeFlagOffsetEXT = (PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC) load(userptr, "glVertexArrayEdgeFlagOffsetEXT");
    sf_glad_glVertexArrayFogCoordOffsetEXT = (PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC) load(userptr, "glVertexArrayFogCoordOffsetEXT");
    sf_glad_glVertexArrayIndexOffsetEXT = (PFNGLVERTEXARRAYINDEXOFFSETEXTPROC) load(userptr, "glVertexArrayIndexOffsetEXT");
    sf_glad_glVertexArrayMultiTexCoordOffsetEXT = (PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC) load(userptr, "glVertexArrayMultiTexCoordOffsetEXT");
    sf_glad_glVertexArrayNormalOffsetEXT = (PFNGLVERTEXARRAYNORMALOFFSETEXTPROC) load(userptr, "glVertexArrayNormalOffsetEXT");
    sf_glad_glVertexArraySecondaryColorOffsetEXT = (PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC) load(userptr, "glVertexArraySecondaryColorOffsetEXT");
    sf_glad_glVertexArrayTexCoordOffsetEXT = (PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC) load(userptr, "glVertexArrayTexCoordOffsetEXT");
    sf_glad_glVertexArrayVertexAttribBindingEXT = (PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) load(userptr, "glVertexArrayVertexAttribBindingEXT");
    sf_glad_glVertexArrayVertexAttribDivisorEXT = (PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC) load(userptr, "glVertexArrayVertexAttribDivisorEXT");
    sf_glad_glVertexArrayVertexAttribFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) load(userptr, "glVertexArrayVertexAttribFormatEXT");
    sf_glad_glVertexArrayVertexAttribIFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) load(userptr, "glVertexArrayVertexAttribIFormatEXT");
    sf_glad_glVertexArrayVertexAttribIOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC) load(userptr, "glVertexArrayVertexAttribIOffsetEXT");
    sf_glad_glVertexArrayVertexAttribLFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) load(userptr, "glVertexArrayVertexAttribLFormatEXT");
    sf_glad_glVertexArrayVertexAttribLOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) load(userptr, "glVertexArrayVertexAttribLOffsetEXT");
    sf_glad_glVertexArrayVertexAttribOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC) load(userptr, "glVertexArrayVertexAttribOffsetEXT");
    sf_glad_glVertexArrayVertexBindingDivisorEXT = (PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) load(userptr, "glVertexArrayVertexBindingDivisorEXT");
    sf_glad_glVertexArrayVertexOffsetEXT = (PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC) load(userptr, "glVertexArrayVertexOffsetEXT");
}
static void sf_glad_gl_load_GL_EXT_draw_buffers2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_draw_buffers2) return;
    sf_glad_glColorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC) load(userptr, "glColorMaskIndexedEXT");
    sf_glad_glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC) load(userptr, "glDisableIndexedEXT");
    sf_glad_glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC) load(userptr, "glEnableIndexedEXT");
    sf_glad_glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC) load(userptr, "glGetBooleanIndexedvEXT");
    sf_glad_glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC) load(userptr, "glGetIntegerIndexedvEXT");
    sf_glad_glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC) load(userptr, "glIsEnabledIndexedEXT");
}
static void sf_glad_gl_load_GL_EXT_draw_instanced( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_draw_instanced) return;
    sf_glad_glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC) load(userptr, "glDrawArraysInstancedEXT");
    sf_glad_glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC) load(userptr, "glDrawElementsInstancedEXT");
}
static void sf_glad_gl_load_GL_EXT_draw_range_elements( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_draw_range_elements) return;
    sf_glad_glDrawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC) load(userptr, "glDrawRangeElementsEXT");
}
static void sf_glad_gl_load_GL_EXT_framebuffer_blit( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_framebuffer_blit) return;
    sf_glad_glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC) load(userptr, "glBlitFramebufferEXT");
}
static void sf_glad_gl_load_GL_EXT_framebuffer_multisample( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_framebuffer_multisample) return;
    sf_glad_glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) load(userptr, "glRenderbufferStorageMultisampleEXT");
}
static void sf_glad_gl_load_GL_EXT_framebuffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_framebuffer_object) return;
    sf_glad_glBindFramebufferEXT = (PFNGLBINDFRAMEBUFFEREXTPROC) load(userptr, "glBindFramebufferEXT");
    sf_glad_glBindRenderbufferEXT = (PFNGLBINDRENDERBUFFEREXTPROC) load(userptr, "glBindRenderbufferEXT");
    sf_glad_glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) load(userptr, "glCheckFramebufferStatusEXT");
    sf_glad_glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC) load(userptr, "glDeleteFramebuffersEXT");
    sf_glad_glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC) load(userptr, "glDeleteRenderbuffersEXT");
    sf_glad_glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) load(userptr, "glFramebufferRenderbufferEXT");
    sf_glad_glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) load(userptr, "glFramebufferTexture1DEXT");
    sf_glad_glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) load(userptr, "glFramebufferTexture2DEXT");
    sf_glad_glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) load(userptr, "glFramebufferTexture3DEXT");
    sf_glad_glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC) load(userptr, "glGenFramebuffersEXT");
    sf_glad_glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC) load(userptr, "glGenRenderbuffersEXT");
    sf_glad_glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC) load(userptr, "glGenerateMipmapEXT");
    sf_glad_glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) load(userptr, "glGetFramebufferAttachmentParameterivEXT");
    sf_glad_glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetRenderbufferParameterivEXT");
    sf_glad_glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC) load(userptr, "glIsFramebufferEXT");
    sf_glad_glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC) load(userptr, "glIsRenderbufferEXT");
    sf_glad_glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC) load(userptr, "glRenderbufferStorageEXT");
}
static void sf_glad_gl_load_GL_EXT_geometry_shader4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_geometry_shader4) return;
    sf_glad_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC) load(userptr, "glProgramParameteriEXT");
}
static void sf_glad_gl_load_GL_EXT_gpu_shader4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_gpu_shader4) return;
    sf_glad_glBindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC) load(userptr, "glBindFragDataLocationEXT");
    sf_glad_glGetFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC) load(userptr, "glGetFragDataLocationEXT");
    sf_glad_glGetUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC) load(userptr, "glGetUniformuivEXT");
    sf_glad_glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC) load(userptr, "glGetVertexAttribIivEXT");
    sf_glad_glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC) load(userptr, "glGetVertexAttribIuivEXT");
    sf_glad_glUniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC) load(userptr, "glUniform1uiEXT");
    sf_glad_glUniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC) load(userptr, "glUniform1uivEXT");
    sf_glad_glUniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC) load(userptr, "glUniform2uiEXT");
    sf_glad_glUniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC) load(userptr, "glUniform2uivEXT");
    sf_glad_glUniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC) load(userptr, "glUniform3uiEXT");
    sf_glad_glUniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC) load(userptr, "glUniform3uivEXT");
    sf_glad_glUniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC) load(userptr, "glUniform4uiEXT");
    sf_glad_glUniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC) load(userptr, "glUniform4uivEXT");
    sf_glad_glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC) load(userptr, "glVertexAttribI1iEXT");
    sf_glad_glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC) load(userptr, "glVertexAttribI1ivEXT");
    sf_glad_glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC) load(userptr, "glVertexAttribI1uiEXT");
    sf_glad_glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC) load(userptr, "glVertexAttribI1uivEXT");
    sf_glad_glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC) load(userptr, "glVertexAttribI2iEXT");
    sf_glad_glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC) load(userptr, "glVertexAttribI2ivEXT");
    sf_glad_glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC) load(userptr, "glVertexAttribI2uiEXT");
    sf_glad_glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC) load(userptr, "glVertexAttribI2uivEXT");
    sf_glad_glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC) load(userptr, "glVertexAttribI3iEXT");
    sf_glad_glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC) load(userptr, "glVertexAttribI3ivEXT");
    sf_glad_glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC) load(userptr, "glVertexAttribI3uiEXT");
    sf_glad_glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC) load(userptr, "glVertexAttribI3uivEXT");
    sf_glad_glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC) load(userptr, "glVertexAttribI4bvEXT");
    sf_glad_glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC) load(userptr, "glVertexAttribI4iEXT");
    sf_glad_glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC) load(userptr, "glVertexAttribI4ivEXT");
    sf_glad_glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC) load(userptr, "glVertexAttribI4svEXT");
    sf_glad_glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC) load(userptr, "glVertexAttribI4ubvEXT");
    sf_glad_glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC) load(userptr, "glVertexAttribI4uiEXT");
    sf_glad_glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC) load(userptr, "glVertexAttribI4uivEXT");
    sf_glad_glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC) load(userptr, "glVertexAttribI4usvEXT");
    sf_glad_glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC) load(userptr, "glVertexAttribIPointerEXT");
}
static void sf_glad_gl_load_GL_EXT_multi_draw_arrays( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_multi_draw_arrays) return;
    sf_glad_glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC) load(userptr, "glMultiDrawArraysEXT");
    sf_glad_glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC) load(userptr, "glMultiDrawElementsEXT");
}
static void sf_glad_gl_load_GL_EXT_point_parameters( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_point_parameters) return;
    sf_glad_glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC) load(userptr, "glPointParameterfEXT");
    sf_glad_glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC) load(userptr, "glPointParameterfvEXT");
}
static void sf_glad_gl_load_GL_EXT_provoking_vertex( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_provoking_vertex) return;
    sf_glad_glProvokingVertexEXT = (PFNGLPROVOKINGVERTEXEXTPROC) load(userptr, "glProvokingVertexEXT");
}
static void sf_glad_gl_load_GL_EXT_subtexture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_subtexture) return;
    sf_glad_glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC) load(userptr, "glTexSubImage1DEXT");
    sf_glad_glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC) load(userptr, "glTexSubImage2DEXT");
}
static void sf_glad_gl_load_GL_EXT_texture3D( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_texture3D) return;
    sf_glad_glTexImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC) load(userptr, "glTexImage3DEXT");
    sf_glad_glTexSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC) load(userptr, "glTexSubImage3DEXT");
}
static void sf_glad_gl_load_GL_EXT_texture_array( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_texture_array) return;
    sf_glad_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) load(userptr, "glFramebufferTextureLayerEXT");
}
static void sf_glad_gl_load_GL_EXT_texture_buffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_texture_buffer_object) return;
    sf_glad_glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC) load(userptr, "glTexBufferEXT");
}
static void sf_glad_gl_load_GL_EXT_texture_integer( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_texture_integer) return;
    sf_glad_glClearColorIiEXT = (PFNGLCLEARCOLORIIEXTPROC) load(userptr, "glClearColorIiEXT");
    sf_glad_glClearColorIuiEXT = (PFNGLCLEARCOLORIUIEXTPROC) load(userptr, "glClearColorIuiEXT");
    sf_glad_glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC) load(userptr, "glGetTexParameterIivEXT");
    sf_glad_glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC) load(userptr, "glGetTexParameterIuivEXT");
    sf_glad_glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC) load(userptr, "glTexParameterIivEXT");
    sf_glad_glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC) load(userptr, "glTexParameterIuivEXT");
}
static void sf_glad_gl_load_GL_EXT_texture_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_texture_object) return;
    sf_glad_glAreTexturesResidentEXT = (PFNGLARETEXTURESRESIDENTEXTPROC) load(userptr, "glAreTexturesResidentEXT");
    sf_glad_glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC) load(userptr, "glBindTextureEXT");
    sf_glad_glDeleteTexturesEXT = (PFNGLDELETETEXTURESEXTPROC) load(userptr, "glDeleteTexturesEXT");
    sf_glad_glGenTexturesEXT = (PFNGLGENTEXTURESEXTPROC) load(userptr, "glGenTexturesEXT");
    sf_glad_glIsTextureEXT = (PFNGLISTEXTUREEXTPROC) load(userptr, "glIsTextureEXT");
    sf_glad_glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC) load(userptr, "glPrioritizeTexturesEXT");
}
static void sf_glad_gl_load_GL_EXT_timer_query( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_timer_query) return;
    sf_glad_glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC) load(userptr, "glGetQueryObjecti64vEXT");
    sf_glad_glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC) load(userptr, "glGetQueryObjectui64vEXT");
}
static void sf_glad_gl_load_GL_EXT_transform_feedback( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_transform_feedback) return;
    sf_glad_glBeginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) load(userptr, "glBeginTransformFeedbackEXT");
    sf_glad_glBindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC) load(userptr, "glBindBufferBaseEXT");
    sf_glad_glBindBufferOffsetEXT = (PFNGLBINDBUFFEROFFSETEXTPROC) load(userptr, "glBindBufferOffsetEXT");
    sf_glad_glBindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC) load(userptr, "glBindBufferRangeEXT");
    sf_glad_glEndTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC) load(userptr, "glEndTransformFeedbackEXT");
    sf_glad_glGetTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) load(userptr, "glGetTransformFeedbackVaryingEXT");
    sf_glad_glTransformFeedbackVaryingsEXT = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) load(userptr, "glTransformFeedbackVaryingsEXT");
}
static void sf_glad_gl_load_GL_EXT_vertex_array( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_vertex_array) return;
    sf_glad_glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC) load(userptr, "glArrayElementEXT");
    sf_glad_glColorPointerEXT = (PFNGLCOLORPOINTEREXTPROC) load(userptr, "glColorPointerEXT");
    sf_glad_glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC) load(userptr, "glDrawArraysEXT");
    sf_glad_glEdgeFlagPointerEXT = (PFNGLEDGEFLAGPOINTEREXTPROC) load(userptr, "glEdgeFlagPointerEXT");
    sf_glad_glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC) load(userptr, "glGetPointervEXT");
    sf_glad_glIndexPointerEXT = (PFNGLINDEXPOINTEREXTPROC) load(userptr, "glIndexPointerEXT");
    sf_glad_glNormalPointerEXT = (PFNGLNORMALPOINTEREXTPROC) load(userptr, "glNormalPointerEXT");
    sf_glad_glTexCoordPointerEXT = (PFNGLTEXCOORDPOINTEREXTPROC) load(userptr, "glTexCoordPointerEXT");
    sf_glad_glVertexPointerEXT = (PFNGLVERTEXPOINTEREXTPROC) load(userptr, "glVertexPointerEXT");
}
static void sf_glad_gl_load_GL_EXT_vertex_attrib_64bit( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_vertex_attrib_64bit) return;
    sf_glad_glGetVertexAttribLdvEXT = (PFNGLGETVERTEXATTRIBLDVEXTPROC) load(userptr, "glGetVertexAttribLdvEXT");
    sf_glad_glVertexAttribL1dEXT = (PFNGLVERTEXATTRIBL1DEXTPROC) load(userptr, "glVertexAttribL1dEXT");
    sf_glad_glVertexAttribL1dvEXT = (PFNGLVERTEXATTRIBL1DVEXTPROC) load(userptr, "glVertexAttribL1dvEXT");
    sf_glad_glVertexAttribL2dEXT = (PFNGLVERTEXATTRIBL2DEXTPROC) load(userptr, "glVertexAttribL2dEXT");
    sf_glad_glVertexAttribL2dvEXT = (PFNGLVERTEXATTRIBL2DVEXTPROC) load(userptr, "glVertexAttribL2dvEXT");
    sf_glad_glVertexAttribL3dEXT = (PFNGLVERTEXATTRIBL3DEXTPROC) load(userptr, "glVertexAttribL3dEXT");
    sf_glad_glVertexAttribL3dvEXT = (PFNGLVERTEXATTRIBL3DVEXTPROC) load(userptr, "glVertexAttribL3dvEXT");
    sf_glad_glVertexAttribL4dEXT = (PFNGLVERTEXATTRIBL4DEXTPROC) load(userptr, "glVertexAttribL4dEXT");
    sf_glad_glVertexAttribL4dvEXT = (PFNGLVERTEXATTRIBL4DVEXTPROC) load(userptr, "glVertexAttribL4dvEXT");
    sf_glad_glVertexAttribLPointerEXT = (PFNGLVERTEXATTRIBLPOINTEREXTPROC) load(userptr, "glVertexAttribLPointerEXT");
}
static void sf_glad_gl_load_GL_INGR_blend_func_separate( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_INGR_blend_func_separate) return;
    sf_glad_glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC) load(userptr, "glBlendFuncSeparateINGR");
}
static void sf_glad_gl_load_GL_NVX_conditional_render( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NVX_conditional_render) return;
    sf_glad_glBeginConditionalRenderNVX = (PFNGLBEGINCONDITIONALRENDERNVXPROC) load(userptr, "glBeginConditionalRenderNVX");
    sf_glad_glEndConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC) load(userptr, "glEndConditionalRenderNVX");
}
static void sf_glad_gl_load_GL_NV_conditional_render( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_conditional_render) return;
    sf_glad_glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC) load(userptr, "glBeginConditionalRenderNV");
    sf_glad_glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC) load(userptr, "glEndConditionalRenderNV");
}
static void sf_glad_gl_load_GL_NV_explicit_multisample( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_explicit_multisample) return;
    sf_glad_glGetMultisamplefvNV = (PFNGLGETMULTISAMPLEFVNVPROC) load(userptr, "glGetMultisamplefvNV");
    sf_glad_glSampleMaskIndexedNV = (PFNGLSAMPLEMASKINDEXEDNVPROC) load(userptr, "glSampleMaskIndexedNV");
    sf_glad_glTexRenderbufferNV = (PFNGLTEXRENDERBUFFERNVPROC) load(userptr, "glTexRenderbufferNV");
}
static void sf_glad_gl_load_GL_NV_geometry_program4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_geometry_program4) return;
    sf_glad_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC) load(userptr, "glFramebufferTextureEXT");
    sf_glad_glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) load(userptr, "glFramebufferTextureFaceEXT");
    sf_glad_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) load(userptr, "glFramebufferTextureLayerEXT");
    sf_glad_glProgramVertexLimitNV = (PFNGLPROGRAMVERTEXLIMITNVPROC) load(userptr, "glProgramVertexLimitNV");
}
static void sf_glad_gl_load_GL_NV_point_sprite( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_point_sprite) return;
    sf_glad_glPointParameteriNV = (PFNGLPOINTPARAMETERINVPROC) load(userptr, "glPointParameteriNV");
    sf_glad_glPointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC) load(userptr, "glPointParameterivNV");
}
static void sf_glad_gl_load_GL_NV_transform_feedback( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_transform_feedback) return;
    sf_glad_glActiveVaryingNV = (PFNGLACTIVEVARYINGNVPROC) load(userptr, "glActiveVaryingNV");
    sf_glad_glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC) load(userptr, "glBeginTransformFeedbackNV");
    sf_glad_glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC) load(userptr, "glBindBufferBaseNV");
    sf_glad_glBindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC) load(userptr, "glBindBufferOffsetNV");
    sf_glad_glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC) load(userptr, "glBindBufferRangeNV");
    sf_glad_glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC) load(userptr, "glEndTransformFeedbackNV");
    sf_glad_glGetActiveVaryingNV = (PFNGLGETACTIVEVARYINGNVPROC) load(userptr, "glGetActiveVaryingNV");
    sf_glad_glGetTransformFeedbackVaryingNV = (PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) load(userptr, "glGetTransformFeedbackVaryingNV");
    sf_glad_glGetVaryingLocationNV = (PFNGLGETVARYINGLOCATIONNVPROC) load(userptr, "glGetVaryingLocationNV");
    sf_glad_glTransformFeedbackAttribsNV = (PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) load(userptr, "glTransformFeedbackAttribsNV");
    sf_glad_glTransformFeedbackStreamAttribsNV = (PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) load(userptr, "glTransformFeedbackStreamAttribsNV");
    sf_glad_glTransformFeedbackVaryingsNV = (PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) load(userptr, "glTransformFeedbackVaryingsNV");
}
static void sf_glad_gl_load_GL_NV_transform_feedback2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_transform_feedback2) return;
    sf_glad_glBindTransformFeedbackNV = (PFNGLBINDTRANSFORMFEEDBACKNVPROC) load(userptr, "glBindTransformFeedbackNV");
    sf_glad_glDeleteTransformFeedbacksNV = (PFNGLDELETETRANSFORMFEEDBACKSNVPROC) load(userptr, "glDeleteTransformFeedbacksNV");
    sf_glad_glDrawTransformFeedbackNV = (PFNGLDRAWTRANSFORMFEEDBACKNVPROC) load(userptr, "glDrawTransformFeedbackNV");
    sf_glad_glGenTransformFeedbacksNV = (PFNGLGENTRANSFORMFEEDBACKSNVPROC) load(userptr, "glGenTransformFeedbacksNV");
    sf_glad_glIsTransformFeedbackNV = (PFNGLISTRANSFORMFEEDBACKNVPROC) load(userptr, "glIsTransformFeedbackNV");
    sf_glad_glPauseTransformFeedbackNV = (PFNGLPAUSETRANSFORMFEEDBACKNVPROC) load(userptr, "glPauseTransformFeedbackNV");
    sf_glad_glResumeTransformFeedbackNV = (PFNGLRESUMETRANSFORMFEEDBACKNVPROC) load(userptr, "glResumeTransformFeedbackNV");
}
static void sf_glad_gl_load_GL_NV_vertex_program( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_vertex_program) return;
    sf_glad_glAreProgramsResidentNV = (PFNGLAREPROGRAMSRESIDENTNVPROC) load(userptr, "glAreProgramsResidentNV");
    sf_glad_glBindProgramNV = (PFNGLBINDPROGRAMNVPROC) load(userptr, "glBindProgramNV");
    sf_glad_glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC) load(userptr, "glDeleteProgramsNV");
    sf_glad_glExecuteProgramNV = (PFNGLEXECUTEPROGRAMNVPROC) load(userptr, "glExecuteProgramNV");
    sf_glad_glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC) load(userptr, "glGenProgramsNV");
    sf_glad_glGetProgramParameterdvNV = (PFNGLGETPROGRAMPARAMETERDVNVPROC) load(userptr, "glGetProgramParameterdvNV");
    sf_glad_glGetProgramParameterfvNV = (PFNGLGETPROGRAMPARAMETERFVNVPROC) load(userptr, "glGetProgramParameterfvNV");
    sf_glad_glGetProgramStringNV = (PFNGLGETPROGRAMSTRINGNVPROC) load(userptr, "glGetProgramStringNV");
    sf_glad_glGetProgramivNV = (PFNGLGETPROGRAMIVNVPROC) load(userptr, "glGetProgramivNV");
    sf_glad_glGetTrackMatrixivNV = (PFNGLGETTRACKMATRIXIVNVPROC) load(userptr, "glGetTrackMatrixivNV");
    sf_glad_glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC) load(userptr, "glGetVertexAttribPointervNV");
    sf_glad_glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC) load(userptr, "glGetVertexAttribdvNV");
    sf_glad_glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC) load(userptr, "glGetVertexAttribfvNV");
    sf_glad_glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC) load(userptr, "glGetVertexAttribivNV");
    sf_glad_glIsProgramNV = (PFNGLISPROGRAMNVPROC) load(userptr, "glIsProgramNV");
    sf_glad_glLoadProgramNV = (PFNGLLOADPROGRAMNVPROC) load(userptr, "glLoadProgramNV");
    sf_glad_glProgramParameter4dNV = (PFNGLPROGRAMPARAMETER4DNVPROC) load(userptr, "glProgramParameter4dNV");
    sf_glad_glProgramParameter4dvNV = (PFNGLPROGRAMPARAMETER4DVNVPROC) load(userptr, "glProgramParameter4dvNV");
    sf_glad_glProgramParameter4fNV = (PFNGLPROGRAMPARAMETER4FNVPROC) load(userptr, "glProgramParameter4fNV");
    sf_glad_glProgramParameter4fvNV = (PFNGLPROGRAMPARAMETER4FVNVPROC) load(userptr, "glProgramParameter4fvNV");
    sf_glad_glProgramParameters4dvNV = (PFNGLPROGRAMPARAMETERS4DVNVPROC) load(userptr, "glProgramParameters4dvNV");
    sf_glad_glProgramParameters4fvNV = (PFNGLPROGRAMPARAMETERS4FVNVPROC) load(userptr, "glProgramParameters4fvNV");
    sf_glad_glRequestResidentProgramsNV = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC) load(userptr, "glRequestResidentProgramsNV");
    sf_glad_glTrackMatrixNV = (PFNGLTRACKMATRIXNVPROC) load(userptr, "glTrackMatrixNV");
    sf_glad_glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC) load(userptr, "glVertexAttrib1dNV");
    sf_glad_glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC) load(userptr, "glVertexAttrib1dvNV");
    sf_glad_glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC) load(userptr, "glVertexAttrib1fNV");
    sf_glad_glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC) load(userptr, "glVertexAttrib1fvNV");
    sf_glad_glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC) load(userptr, "glVertexAttrib1sNV");
    sf_glad_glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC) load(userptr, "glVertexAttrib1svNV");
    sf_glad_glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC) load(userptr, "glVertexAttrib2dNV");
    sf_glad_glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC) load(userptr, "glVertexAttrib2dvNV");
    sf_glad_glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC) load(userptr, "glVertexAttrib2fNV");
    sf_glad_glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC) load(userptr, "glVertexAttrib2fvNV");
    sf_glad_glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC) load(userptr, "glVertexAttrib2sNV");
    sf_glad_glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC) load(userptr, "glVertexAttrib2svNV");
    sf_glad_glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC) load(userptr, "glVertexAttrib3dNV");
    sf_glad_glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC) load(userptr, "glVertexAttrib3dvNV");
    sf_glad_glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC) load(userptr, "glVertexAttrib3fNV");
    sf_glad_glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC) load(userptr, "glVertexAttrib3fvNV");
    sf_glad_glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC) load(userptr, "glVertexAttrib3sNV");
    sf_glad_glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC) load(userptr, "glVertexAttrib3svNV");
    sf_glad_glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC) load(userptr, "glVertexAttrib4dNV");
    sf_glad_glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC) load(userptr, "glVertexAttrib4dvNV");
    sf_glad_glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC) load(userptr, "glVertexAttrib4fNV");
    sf_glad_glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC) load(userptr, "glVertexAttrib4fvNV");
    sf_glad_glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC) load(userptr, "glVertexAttrib4sNV");
    sf_glad_glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC) load(userptr, "glVertexAttrib4svNV");
    sf_glad_glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC) load(userptr, "glVertexAttrib4ubNV");
    sf_glad_glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC) load(userptr, "glVertexAttrib4ubvNV");
    sf_glad_glVertexAttribPointerNV = (PFNGLVERTEXATTRIBPOINTERNVPROC) load(userptr, "glVertexAttribPointerNV");
    sf_glad_glVertexAttribs1dvNV = (PFNGLVERTEXATTRIBS1DVNVPROC) load(userptr, "glVertexAttribs1dvNV");
    sf_glad_glVertexAttribs1fvNV = (PFNGLVERTEXATTRIBS1FVNVPROC) load(userptr, "glVertexAttribs1fvNV");
    sf_glad_glVertexAttribs1svNV = (PFNGLVERTEXATTRIBS1SVNVPROC) load(userptr, "glVertexAttribs1svNV");
    sf_glad_glVertexAttribs2dvNV = (PFNGLVERTEXATTRIBS2DVNVPROC) load(userptr, "glVertexAttribs2dvNV");
    sf_glad_glVertexAttribs2fvNV = (PFNGLVERTEXATTRIBS2FVNVPROC) load(userptr, "glVertexAttribs2fvNV");
    sf_glad_glVertexAttribs2svNV = (PFNGLVERTEXATTRIBS2SVNVPROC) load(userptr, "glVertexAttribs2svNV");
    sf_glad_glVertexAttribs3dvNV = (PFNGLVERTEXATTRIBS3DVNVPROC) load(userptr, "glVertexAttribs3dvNV");
    sf_glad_glVertexAttribs3fvNV = (PFNGLVERTEXATTRIBS3FVNVPROC) load(userptr, "glVertexAttribs3fvNV");
    sf_glad_glVertexAttribs3svNV = (PFNGLVERTEXATTRIBS3SVNVPROC) load(userptr, "glVertexAttribs3svNV");
    sf_glad_glVertexAttribs4dvNV = (PFNGLVERTEXATTRIBS4DVNVPROC) load(userptr, "glVertexAttribs4dvNV");
    sf_glad_glVertexAttribs4fvNV = (PFNGLVERTEXATTRIBS4FVNVPROC) load(userptr, "glVertexAttribs4fvNV");
    sf_glad_glVertexAttribs4svNV = (PFNGLVERTEXATTRIBS4SVNVPROC) load(userptr, "glVertexAttribs4svNV");
    sf_glad_glVertexAttribs4ubvNV = (PFNGLVERTEXATTRIBS4UBVNVPROC) load(userptr, "glVertexAttribs4ubvNV");
}
static void sf_glad_gl_load_GL_NV_vertex_program4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_vertex_program4) return;
    sf_glad_glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC) load(userptr, "glGetVertexAttribIivEXT");
    sf_glad_glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC) load(userptr, "glGetVertexAttribIuivEXT");
    sf_glad_glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC) load(userptr, "glVertexAttribI1iEXT");
    sf_glad_glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC) load(userptr, "glVertexAttribI1ivEXT");
    sf_glad_glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC) load(userptr, "glVertexAttribI1uiEXT");
    sf_glad_glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC) load(userptr, "glVertexAttribI1uivEXT");
    sf_glad_glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC) load(userptr, "glVertexAttribI2iEXT");
    sf_glad_glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC) load(userptr, "glVertexAttribI2ivEXT");
    sf_glad_glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC) load(userptr, "glVertexAttribI2uiEXT");
    sf_glad_glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC) load(userptr, "glVertexAttribI2uivEXT");
    sf_glad_glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC) load(userptr, "glVertexAttribI3iEXT");
    sf_glad_glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC) load(userptr, "glVertexAttribI3ivEXT");
    sf_glad_glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC) load(userptr, "glVertexAttribI3uiEXT");
    sf_glad_glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC) load(userptr, "glVertexAttribI3uivEXT");
    sf_glad_glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC) load(userptr, "glVertexAttribI4bvEXT");
    sf_glad_glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC) load(userptr, "glVertexAttribI4iEXT");
    sf_glad_glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC) load(userptr, "glVertexAttribI4ivEXT");
    sf_glad_glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC) load(userptr, "glVertexAttribI4svEXT");
    sf_glad_glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC) load(userptr, "glVertexAttribI4ubvEXT");
    sf_glad_glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC) load(userptr, "glVertexAttribI4uiEXT");
    sf_glad_glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC) load(userptr, "glVertexAttribI4uivEXT");
    sf_glad_glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC) load(userptr, "glVertexAttribI4usvEXT");
    sf_glad_glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC) load(userptr, "glVertexAttribIPointerEXT");
}
static void sf_glad_gl_load_GL_OES_single_precision( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_single_precision) return;
    sf_glad_glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC) load(userptr, "glClearDepthfOES");
    sf_glad_glClipPlanefOES = (PFNGLCLIPPLANEFOESPROC) load(userptr, "glClipPlanefOES");
    sf_glad_glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC) load(userptr, "glDepthRangefOES");
    sf_glad_glFrustumfOES = (PFNGLFRUSTUMFOESPROC) load(userptr, "glFrustumfOES");
    sf_glad_glGetClipPlanefOES = (PFNGLGETCLIPPLANEFOESPROC) load(userptr, "glGetClipPlanefOES");
    sf_glad_glOrthofOES = (PFNGLORTHOFOESPROC) load(userptr, "glOrthofOES");
}
static void sf_glad_gl_load_GL_SGIS_point_parameters( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIS_point_parameters) return;
    sf_glad_glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC) load(userptr, "glPointParameterfSGIS");
    sf_glad_glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC) load(userptr, "glPointParameterfvSGIS");
}


static void sf_glad_gl_resolve_aliases(void) {
    if (sf_glad_glActiveTexture == NULL && sf_glad_glActiveTextureARB != NULL) sf_glad_glActiveTexture = (PFNGLACTIVETEXTUREPROC)sf_glad_glActiveTextureARB;
    if (sf_glad_glActiveTextureARB == NULL && sf_glad_glActiveTexture != NULL) sf_glad_glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC)sf_glad_glActiveTexture;
    if (sf_glad_glAttachObjectARB == NULL && sf_glad_glAttachShader != NULL) sf_glad_glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC)sf_glad_glAttachShader;
    if (sf_glad_glAttachShader == NULL && sf_glad_glAttachObjectARB != NULL) sf_glad_glAttachShader = (PFNGLATTACHSHADERPROC)sf_glad_glAttachObjectARB;
    if (sf_glad_glBeginConditionalRender == NULL && sf_glad_glBeginConditionalRenderNV != NULL) sf_glad_glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)sf_glad_glBeginConditionalRenderNV;
    if (sf_glad_glBeginConditionalRenderNV == NULL && sf_glad_glBeginConditionalRender != NULL) sf_glad_glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC)sf_glad_glBeginConditionalRender;
    if (sf_glad_glBeginQuery == NULL && sf_glad_glBeginQueryARB != NULL) sf_glad_glBeginQuery = (PFNGLBEGINQUERYPROC)sf_glad_glBeginQueryARB;
    if (sf_glad_glBeginQueryARB == NULL && sf_glad_glBeginQuery != NULL) sf_glad_glBeginQueryARB = (PFNGLBEGINQUERYARBPROC)sf_glad_glBeginQuery;
    if (sf_glad_glBeginTransformFeedback == NULL && sf_glad_glBeginTransformFeedbackEXT != NULL) sf_glad_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)sf_glad_glBeginTransformFeedbackEXT;
    if (sf_glad_glBeginTransformFeedback == NULL && sf_glad_glBeginTransformFeedbackNV != NULL) sf_glad_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)sf_glad_glBeginTransformFeedbackNV;
    if (sf_glad_glBeginTransformFeedbackEXT == NULL && sf_glad_glBeginTransformFeedback != NULL) sf_glad_glBeginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)sf_glad_glBeginTransformFeedback;
    if (sf_glad_glBeginTransformFeedbackEXT == NULL && sf_glad_glBeginTransformFeedbackNV != NULL) sf_glad_glBeginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)sf_glad_glBeginTransformFeedbackNV;
    if (sf_glad_glBeginTransformFeedbackNV == NULL && sf_glad_glBeginTransformFeedback != NULL) sf_glad_glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)sf_glad_glBeginTransformFeedback;
    if (sf_glad_glBeginTransformFeedbackNV == NULL && sf_glad_glBeginTransformFeedbackEXT != NULL) sf_glad_glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)sf_glad_glBeginTransformFeedbackEXT;
    if (sf_glad_glBindAttribLocation == NULL && sf_glad_glBindAttribLocationARB != NULL) sf_glad_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)sf_glad_glBindAttribLocationARB;
    if (sf_glad_glBindAttribLocationARB == NULL && sf_glad_glBindAttribLocation != NULL) sf_glad_glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC)sf_glad_glBindAttribLocation;
    if (sf_glad_glBindBuffer == NULL && sf_glad_glBindBufferARB != NULL) sf_glad_glBindBuffer = (PFNGLBINDBUFFERPROC)sf_glad_glBindBufferARB;
    if (sf_glad_glBindBufferARB == NULL && sf_glad_glBindBuffer != NULL) sf_glad_glBindBufferARB = (PFNGLBINDBUFFERARBPROC)sf_glad_glBindBuffer;
    if (sf_glad_glBindBufferBase == NULL && sf_glad_glBindBufferBaseEXT != NULL) sf_glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)sf_glad_glBindBufferBaseEXT;
    if (sf_glad_glBindBufferBase == NULL && sf_glad_glBindBufferBaseNV != NULL) sf_glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)sf_glad_glBindBufferBaseNV;
    if (sf_glad_glBindBufferBaseEXT == NULL && sf_glad_glBindBufferBase != NULL) sf_glad_glBindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC)sf_glad_glBindBufferBase;
    if (sf_glad_glBindBufferBaseEXT == NULL && sf_glad_glBindBufferBaseNV != NULL) sf_glad_glBindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC)sf_glad_glBindBufferBaseNV;
    if (sf_glad_glBindBufferBaseNV == NULL && sf_glad_glBindBufferBase != NULL) sf_glad_glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC)sf_glad_glBindBufferBase;
    if (sf_glad_glBindBufferBaseNV == NULL && sf_glad_glBindBufferBaseEXT != NULL) sf_glad_glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC)sf_glad_glBindBufferBaseEXT;
    if (sf_glad_glBindBufferOffsetEXT == NULL && sf_glad_glBindBufferOffsetNV != NULL) sf_glad_glBindBufferOffsetEXT = (PFNGLBINDBUFFEROFFSETEXTPROC)sf_glad_glBindBufferOffsetNV;
    if (sf_glad_glBindBufferOffsetNV == NULL && sf_glad_glBindBufferOffsetEXT != NULL) sf_glad_glBindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC)sf_glad_glBindBufferOffsetEXT;
    if (sf_glad_glBindBufferRange == NULL && sf_glad_glBindBufferRangeEXT != NULL) sf_glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)sf_glad_glBindBufferRangeEXT;
    if (sf_glad_glBindBufferRange == NULL && sf_glad_glBindBufferRangeNV != NULL) sf_glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)sf_glad_glBindBufferRangeNV;
    if (sf_glad_glBindBufferRangeEXT == NULL && sf_glad_glBindBufferRange != NULL) sf_glad_glBindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC)sf_glad_glBindBufferRange;
    if (sf_glad_glBindBufferRangeEXT == NULL && sf_glad_glBindBufferRangeNV != NULL) sf_glad_glBindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC)sf_glad_glBindBufferRangeNV;
    if (sf_glad_glBindBufferRangeNV == NULL && sf_glad_glBindBufferRange != NULL) sf_glad_glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC)sf_glad_glBindBufferRange;
    if (sf_glad_glBindBufferRangeNV == NULL && sf_glad_glBindBufferRangeEXT != NULL) sf_glad_glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC)sf_glad_glBindBufferRangeEXT;
    if (sf_glad_glBindFragDataLocation == NULL && sf_glad_glBindFragDataLocationEXT != NULL) sf_glad_glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)sf_glad_glBindFragDataLocationEXT;
    if (sf_glad_glBindFragDataLocationEXT == NULL && sf_glad_glBindFragDataLocation != NULL) sf_glad_glBindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC)sf_glad_glBindFragDataLocation;
    if (sf_glad_glBindProgramARB == NULL && sf_glad_glBindProgramNV != NULL) sf_glad_glBindProgramARB = (PFNGLBINDPROGRAMARBPROC)sf_glad_glBindProgramNV;
    if (sf_glad_glBindProgramNV == NULL && sf_glad_glBindProgramARB != NULL) sf_glad_glBindProgramNV = (PFNGLBINDPROGRAMNVPROC)sf_glad_glBindProgramARB;
    if (sf_glad_glBindTexture == NULL && sf_glad_glBindTextureEXT != NULL) sf_glad_glBindTexture = (PFNGLBINDTEXTUREPROC)sf_glad_glBindTextureEXT;
    if (sf_glad_glBindTextureEXT == NULL && sf_glad_glBindTexture != NULL) sf_glad_glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC)sf_glad_glBindTexture;
    if (sf_glad_glBlendColor == NULL && sf_glad_glBlendColorEXT != NULL) sf_glad_glBlendColor = (PFNGLBLENDCOLORPROC)sf_glad_glBlendColorEXT;
    if (sf_glad_glBlendColorEXT == NULL && sf_glad_glBlendColor != NULL) sf_glad_glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC)sf_glad_glBlendColor;
    if (sf_glad_glBlendEquation == NULL && sf_glad_glBlendEquationEXT != NULL) sf_glad_glBlendEquation = (PFNGLBLENDEQUATIONPROC)sf_glad_glBlendEquationEXT;
    if (sf_glad_glBlendEquationEXT == NULL && sf_glad_glBlendEquation != NULL) sf_glad_glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC)sf_glad_glBlendEquation;
    if (sf_glad_glBlendEquationi == NULL && sf_glad_glBlendEquationIndexedAMD != NULL) sf_glad_glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)sf_glad_glBlendEquationIndexedAMD;
    if (sf_glad_glBlendEquationi == NULL && sf_glad_glBlendEquationiARB != NULL) sf_glad_glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)sf_glad_glBlendEquationiARB;
    if (sf_glad_glBlendEquationiARB == NULL && sf_glad_glBlendEquationIndexedAMD != NULL) sf_glad_glBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC)sf_glad_glBlendEquationIndexedAMD;
    if (sf_glad_glBlendEquationiARB == NULL && sf_glad_glBlendEquationi != NULL) sf_glad_glBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC)sf_glad_glBlendEquationi;
    if (sf_glad_glBlendEquationIndexedAMD == NULL && sf_glad_glBlendEquationi != NULL) sf_glad_glBlendEquationIndexedAMD = (PFNGLBLENDEQUATIONINDEXEDAMDPROC)sf_glad_glBlendEquationi;
    if (sf_glad_glBlendEquationIndexedAMD == NULL && sf_glad_glBlendEquationiARB != NULL) sf_glad_glBlendEquationIndexedAMD = (PFNGLBLENDEQUATIONINDEXEDAMDPROC)sf_glad_glBlendEquationiARB;
    if (sf_glad_glBlendEquationSeparate == NULL && sf_glad_glBlendEquationSeparateEXT != NULL) sf_glad_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)sf_glad_glBlendEquationSeparateEXT;
    if (sf_glad_glBlendEquationSeparateEXT == NULL && sf_glad_glBlendEquationSeparate != NULL) sf_glad_glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC)sf_glad_glBlendEquationSeparate;
    if (sf_glad_glBlendEquationSeparatei == NULL && sf_glad_glBlendEquationSeparateIndexedAMD != NULL) sf_glad_glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)sf_glad_glBlendEquationSeparateIndexedAMD;
    if (sf_glad_glBlendEquationSeparatei == NULL && sf_glad_glBlendEquationSeparateiARB != NULL) sf_glad_glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)sf_glad_glBlendEquationSeparateiARB;
    if (sf_glad_glBlendEquationSeparateiARB == NULL && sf_glad_glBlendEquationSeparateIndexedAMD != NULL) sf_glad_glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC)sf_glad_glBlendEquationSeparateIndexedAMD;
    if (sf_glad_glBlendEquationSeparateiARB == NULL && sf_glad_glBlendEquationSeparatei != NULL) sf_glad_glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC)sf_glad_glBlendEquationSeparatei;
    if (sf_glad_glBlendEquationSeparateIndexedAMD == NULL && sf_glad_glBlendEquationSeparatei != NULL) sf_glad_glBlendEquationSeparateIndexedAMD = (PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)sf_glad_glBlendEquationSeparatei;
    if (sf_glad_glBlendEquationSeparateIndexedAMD == NULL && sf_glad_glBlendEquationSeparateiARB != NULL) sf_glad_glBlendEquationSeparateIndexedAMD = (PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)sf_glad_glBlendEquationSeparateiARB;
    if (sf_glad_glBlendFunci == NULL && sf_glad_glBlendFuncIndexedAMD != NULL) sf_glad_glBlendFunci = (PFNGLBLENDFUNCIPROC)sf_glad_glBlendFuncIndexedAMD;
    if (sf_glad_glBlendFunci == NULL && sf_glad_glBlendFunciARB != NULL) sf_glad_glBlendFunci = (PFNGLBLENDFUNCIPROC)sf_glad_glBlendFunciARB;
    if (sf_glad_glBlendFunciARB == NULL && sf_glad_glBlendFuncIndexedAMD != NULL) sf_glad_glBlendFunciARB = (PFNGLBLENDFUNCIARBPROC)sf_glad_glBlendFuncIndexedAMD;
    if (sf_glad_glBlendFunciARB == NULL && sf_glad_glBlendFunci != NULL) sf_glad_glBlendFunciARB = (PFNGLBLENDFUNCIARBPROC)sf_glad_glBlendFunci;
    if (sf_glad_glBlendFuncIndexedAMD == NULL && sf_glad_glBlendFunci != NULL) sf_glad_glBlendFuncIndexedAMD = (PFNGLBLENDFUNCINDEXEDAMDPROC)sf_glad_glBlendFunci;
    if (sf_glad_glBlendFuncIndexedAMD == NULL && sf_glad_glBlendFunciARB != NULL) sf_glad_glBlendFuncIndexedAMD = (PFNGLBLENDFUNCINDEXEDAMDPROC)sf_glad_glBlendFunciARB;
    if (sf_glad_glBlendFuncSeparate == NULL && sf_glad_glBlendFuncSeparateEXT != NULL) sf_glad_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)sf_glad_glBlendFuncSeparateEXT;
    if (sf_glad_glBlendFuncSeparate == NULL && sf_glad_glBlendFuncSeparateINGR != NULL) sf_glad_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)sf_glad_glBlendFuncSeparateINGR;
    if (sf_glad_glBlendFuncSeparateEXT == NULL && sf_glad_glBlendFuncSeparate != NULL) sf_glad_glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)sf_glad_glBlendFuncSeparate;
    if (sf_glad_glBlendFuncSeparateEXT == NULL && sf_glad_glBlendFuncSeparateINGR != NULL) sf_glad_glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)sf_glad_glBlendFuncSeparateINGR;
    if (sf_glad_glBlendFuncSeparatei == NULL && sf_glad_glBlendFuncSeparateIndexedAMD != NULL) sf_glad_glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)sf_glad_glBlendFuncSeparateIndexedAMD;
    if (sf_glad_glBlendFuncSeparatei == NULL && sf_glad_glBlendFuncSeparateiARB != NULL) sf_glad_glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)sf_glad_glBlendFuncSeparateiARB;
    if (sf_glad_glBlendFuncSeparateiARB == NULL && sf_glad_glBlendFuncSeparateIndexedAMD != NULL) sf_glad_glBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC)sf_glad_glBlendFuncSeparateIndexedAMD;
    if (sf_glad_glBlendFuncSeparateiARB == NULL && sf_glad_glBlendFuncSeparatei != NULL) sf_glad_glBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC)sf_glad_glBlendFuncSeparatei;
    if (sf_glad_glBlendFuncSeparateIndexedAMD == NULL && sf_glad_glBlendFuncSeparatei != NULL) sf_glad_glBlendFuncSeparateIndexedAMD = (PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)sf_glad_glBlendFuncSeparatei;
    if (sf_glad_glBlendFuncSeparateIndexedAMD == NULL && sf_glad_glBlendFuncSeparateiARB != NULL) sf_glad_glBlendFuncSeparateIndexedAMD = (PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)sf_glad_glBlendFuncSeparateiARB;
    if (sf_glad_glBlendFuncSeparateINGR == NULL && sf_glad_glBlendFuncSeparate != NULL) sf_glad_glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC)sf_glad_glBlendFuncSeparate;
    if (sf_glad_glBlendFuncSeparateINGR == NULL && sf_glad_glBlendFuncSeparateEXT != NULL) sf_glad_glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC)sf_glad_glBlendFuncSeparateEXT;
    if (sf_glad_glBlitFramebuffer == NULL && sf_glad_glBlitFramebufferEXT != NULL) sf_glad_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)sf_glad_glBlitFramebufferEXT;
    if (sf_glad_glBlitFramebufferEXT == NULL && sf_glad_glBlitFramebuffer != NULL) sf_glad_glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC)sf_glad_glBlitFramebuffer;
    if (sf_glad_glBufferData == NULL && sf_glad_glBufferDataARB != NULL) sf_glad_glBufferData = (PFNGLBUFFERDATAPROC)sf_glad_glBufferDataARB;
    if (sf_glad_glBufferDataARB == NULL && sf_glad_glBufferData != NULL) sf_glad_glBufferDataARB = (PFNGLBUFFERDATAARBPROC)sf_glad_glBufferData;
    if (sf_glad_glBufferSubData == NULL && sf_glad_glBufferSubDataARB != NULL) sf_glad_glBufferSubData = (PFNGLBUFFERSUBDATAPROC)sf_glad_glBufferSubDataARB;
    if (sf_glad_glBufferSubDataARB == NULL && sf_glad_glBufferSubData != NULL) sf_glad_glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC)sf_glad_glBufferSubData;
    if (sf_glad_glCheckFramebufferStatus == NULL && sf_glad_glCheckFramebufferStatusEXT != NULL) sf_glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)sf_glad_glCheckFramebufferStatusEXT;
    if (sf_glad_glCheckFramebufferStatusEXT == NULL && sf_glad_glCheckFramebufferStatus != NULL) sf_glad_glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)sf_glad_glCheckFramebufferStatus;
    if (sf_glad_glClampColor == NULL && sf_glad_glClampColorARB != NULL) sf_glad_glClampColor = (PFNGLCLAMPCOLORPROC)sf_glad_glClampColorARB;
    if (sf_glad_glClampColorARB == NULL && sf_glad_glClampColor != NULL) sf_glad_glClampColorARB = (PFNGLCLAMPCOLORARBPROC)sf_glad_glClampColor;
    if (sf_glad_glClearDepthf == NULL && sf_glad_glClearDepthfOES != NULL) sf_glad_glClearDepthf = (PFNGLCLEARDEPTHFPROC)sf_glad_glClearDepthfOES;
    if (sf_glad_glClearDepthfOES == NULL && sf_glad_glClearDepthf != NULL) sf_glad_glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC)sf_glad_glClearDepthf;
    if (sf_glad_glColorMaski == NULL && sf_glad_glColorMaskIndexedEXT != NULL) sf_glad_glColorMaski = (PFNGLCOLORMASKIPROC)sf_glad_glColorMaskIndexedEXT;
    if (sf_glad_glColorMaskIndexedEXT == NULL && sf_glad_glColorMaski != NULL) sf_glad_glColorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC)sf_glad_glColorMaski;
    if (sf_glad_glCompileShader == NULL && sf_glad_glCompileShaderARB != NULL) sf_glad_glCompileShader = (PFNGLCOMPILESHADERPROC)sf_glad_glCompileShaderARB;
    if (sf_glad_glCompileShaderARB == NULL && sf_glad_glCompileShader != NULL) sf_glad_glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC)sf_glad_glCompileShader;
    if (sf_glad_glCompressedTexImage1D == NULL && sf_glad_glCompressedTexImage1DARB != NULL) sf_glad_glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)sf_glad_glCompressedTexImage1DARB;
    if (sf_glad_glCompressedTexImage1DARB == NULL && sf_glad_glCompressedTexImage1D != NULL) sf_glad_glCompressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)sf_glad_glCompressedTexImage1D;
    if (sf_glad_glCompressedTexImage2D == NULL && sf_glad_glCompressedTexImage2DARB != NULL) sf_glad_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)sf_glad_glCompressedTexImage2DARB;
    if (sf_glad_glCompressedTexImage2DARB == NULL && sf_glad_glCompressedTexImage2D != NULL) sf_glad_glCompressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)sf_glad_glCompressedTexImage2D;
    if (sf_glad_glCompressedTexImage3D == NULL && sf_glad_glCompressedTexImage3DARB != NULL) sf_glad_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)sf_glad_glCompressedTexImage3DARB;
    if (sf_glad_glCompressedTexImage3DARB == NULL && sf_glad_glCompressedTexImage3D != NULL) sf_glad_glCompressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)sf_glad_glCompressedTexImage3D;
    if (sf_glad_glCompressedTexSubImage1D == NULL && sf_glad_glCompressedTexSubImage1DARB != NULL) sf_glad_glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)sf_glad_glCompressedTexSubImage1DARB;
    if (sf_glad_glCompressedTexSubImage1DARB == NULL && sf_glad_glCompressedTexSubImage1D != NULL) sf_glad_glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)sf_glad_glCompressedTexSubImage1D;
    if (sf_glad_glCompressedTexSubImage2D == NULL && sf_glad_glCompressedTexSubImage2DARB != NULL) sf_glad_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)sf_glad_glCompressedTexSubImage2DARB;
    if (sf_glad_glCompressedTexSubImage2DARB == NULL && sf_glad_glCompressedTexSubImage2D != NULL) sf_glad_glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)sf_glad_glCompressedTexSubImage2D;
    if (sf_glad_glCompressedTexSubImage3D == NULL && sf_glad_glCompressedTexSubImage3DARB != NULL) sf_glad_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)sf_glad_glCompressedTexSubImage3DARB;
    if (sf_glad_glCompressedTexSubImage3DARB == NULL && sf_glad_glCompressedTexSubImage3D != NULL) sf_glad_glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)sf_glad_glCompressedTexSubImage3D;
    if (sf_glad_glCopyTexImage1D == NULL && sf_glad_glCopyTexImage1DEXT != NULL) sf_glad_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC)sf_glad_glCopyTexImage1DEXT;
    if (sf_glad_glCopyTexImage1DEXT == NULL && sf_glad_glCopyTexImage1D != NULL) sf_glad_glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC)sf_glad_glCopyTexImage1D;
    if (sf_glad_glCopyTexImage2D == NULL && sf_glad_glCopyTexImage2DEXT != NULL) sf_glad_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC)sf_glad_glCopyTexImage2DEXT;
    if (sf_glad_glCopyTexImage2DEXT == NULL && sf_glad_glCopyTexImage2D != NULL) sf_glad_glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC)sf_glad_glCopyTexImage2D;
    if (sf_glad_glCopyTexSubImage1D == NULL && sf_glad_glCopyTexSubImage1DEXT != NULL) sf_glad_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC)sf_glad_glCopyTexSubImage1DEXT;
    if (sf_glad_glCopyTexSubImage1DEXT == NULL && sf_glad_glCopyTexSubImage1D != NULL) sf_glad_glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC)sf_glad_glCopyTexSubImage1D;
    if (sf_glad_glCopyTexSubImage2D == NULL && sf_glad_glCopyTexSubImage2DEXT != NULL) sf_glad_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC)sf_glad_glCopyTexSubImage2DEXT;
    if (sf_glad_glCopyTexSubImage2DEXT == NULL && sf_glad_glCopyTexSubImage2D != NULL) sf_glad_glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC)sf_glad_glCopyTexSubImage2D;
    if (sf_glad_glCopyTexSubImage3D == NULL && sf_glad_glCopyTexSubImage3DEXT != NULL) sf_glad_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)sf_glad_glCopyTexSubImage3DEXT;
    if (sf_glad_glCopyTexSubImage3DEXT == NULL && sf_glad_glCopyTexSubImage3D != NULL) sf_glad_glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC)sf_glad_glCopyTexSubImage3D;
    if (sf_glad_glCreateProgram == NULL && sf_glad_glCreateProgramObjectARB != NULL) sf_glad_glCreateProgram = (PFNGLCREATEPROGRAMPROC)sf_glad_glCreateProgramObjectARB;
    if (sf_glad_glCreateProgramObjectARB == NULL && sf_glad_glCreateProgram != NULL) sf_glad_glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC)sf_glad_glCreateProgram;
    if (sf_glad_glCreateShader == NULL && sf_glad_glCreateShaderObjectARB != NULL) sf_glad_glCreateShader = (PFNGLCREATESHADERPROC)sf_glad_glCreateShaderObjectARB;
    if (sf_glad_glCreateShaderObjectARB == NULL && sf_glad_glCreateShader != NULL) sf_glad_glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC)sf_glad_glCreateShader;
    if (sf_glad_glDeleteBuffers == NULL && sf_glad_glDeleteBuffersARB != NULL) sf_glad_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)sf_glad_glDeleteBuffersARB;
    if (sf_glad_glDeleteBuffersARB == NULL && sf_glad_glDeleteBuffers != NULL) sf_glad_glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC)sf_glad_glDeleteBuffers;
    if (sf_glad_glDeleteFramebuffers == NULL && sf_glad_glDeleteFramebuffersEXT != NULL) sf_glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)sf_glad_glDeleteFramebuffersEXT;
    if (sf_glad_glDeleteFramebuffersEXT == NULL && sf_glad_glDeleteFramebuffers != NULL) sf_glad_glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC)sf_glad_glDeleteFramebuffers;
    if (sf_glad_glDeleteProgramsARB == NULL && sf_glad_glDeleteProgramsNV != NULL) sf_glad_glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC)sf_glad_glDeleteProgramsNV;
    if (sf_glad_glDeleteProgramsNV == NULL && sf_glad_glDeleteProgramsARB != NULL) sf_glad_glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC)sf_glad_glDeleteProgramsARB;
    if (sf_glad_glDeleteQueries == NULL && sf_glad_glDeleteQueriesARB != NULL) sf_glad_glDeleteQueries = (PFNGLDELETEQUERIESPROC)sf_glad_glDeleteQueriesARB;
    if (sf_glad_glDeleteQueriesARB == NULL && sf_glad_glDeleteQueries != NULL) sf_glad_glDeleteQueriesARB = (PFNGLDELETEQUERIESARBPROC)sf_glad_glDeleteQueries;
    if (sf_glad_glDeleteRenderbuffers == NULL && sf_glad_glDeleteRenderbuffersEXT != NULL) sf_glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)sf_glad_glDeleteRenderbuffersEXT;
    if (sf_glad_glDeleteRenderbuffersEXT == NULL && sf_glad_glDeleteRenderbuffers != NULL) sf_glad_glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC)sf_glad_glDeleteRenderbuffers;
    if (sf_glad_glDeleteTransformFeedbacks == NULL && sf_glad_glDeleteTransformFeedbacksNV != NULL) sf_glad_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC)sf_glad_glDeleteTransformFeedbacksNV;
    if (sf_glad_glDeleteTransformFeedbacksNV == NULL && sf_glad_glDeleteTransformFeedbacks != NULL) sf_glad_glDeleteTransformFeedbacksNV = (PFNGLDELETETRANSFORMFEEDBACKSNVPROC)sf_glad_glDeleteTransformFeedbacks;
    if (sf_glad_glDeleteVertexArrays == NULL && sf_glad_glDeleteVertexArraysAPPLE != NULL) sf_glad_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)sf_glad_glDeleteVertexArraysAPPLE;
    if (sf_glad_glDeleteVertexArraysAPPLE == NULL && sf_glad_glDeleteVertexArrays != NULL) sf_glad_glDeleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC)sf_glad_glDeleteVertexArrays;
    if (sf_glad_glDepthRangef == NULL && sf_glad_glDepthRangefOES != NULL) sf_glad_glDepthRangef = (PFNGLDEPTHRANGEFPROC)sf_glad_glDepthRangefOES;
    if (sf_glad_glDepthRangefOES == NULL && sf_glad_glDepthRangef != NULL) sf_glad_glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC)sf_glad_glDepthRangef;
    if (sf_glad_glDetachObjectARB == NULL && sf_glad_glDetachShader != NULL) sf_glad_glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC)sf_glad_glDetachShader;
    if (sf_glad_glDetachShader == NULL && sf_glad_glDetachObjectARB != NULL) sf_glad_glDetachShader = (PFNGLDETACHSHADERPROC)sf_glad_glDetachObjectARB;
    if (sf_glad_glDisablei == NULL && sf_glad_glDisableIndexedEXT != NULL) sf_glad_glDisablei = (PFNGLDISABLEIPROC)sf_glad_glDisableIndexedEXT;
    if (sf_glad_glDisableIndexedEXT == NULL && sf_glad_glDisablei != NULL) sf_glad_glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)sf_glad_glDisablei;
    if (sf_glad_glDisableVertexAttribArray == NULL && sf_glad_glDisableVertexAttribArrayARB != NULL) sf_glad_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)sf_glad_glDisableVertexAttribArrayARB;
    if (sf_glad_glDisableVertexAttribArrayARB == NULL && sf_glad_glDisableVertexAttribArray != NULL) sf_glad_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)sf_glad_glDisableVertexAttribArray;
    if (sf_glad_glDrawArrays == NULL && sf_glad_glDrawArraysEXT != NULL) sf_glad_glDrawArrays = (PFNGLDRAWARRAYSPROC)sf_glad_glDrawArraysEXT;
    if (sf_glad_glDrawArraysEXT == NULL && sf_glad_glDrawArrays != NULL) sf_glad_glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC)sf_glad_glDrawArrays;
    if (sf_glad_glDrawArraysInstanced == NULL && sf_glad_glDrawArraysInstancedARB != NULL) sf_glad_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)sf_glad_glDrawArraysInstancedARB;
    if (sf_glad_glDrawArraysInstanced == NULL && sf_glad_glDrawArraysInstancedEXT != NULL) sf_glad_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)sf_glad_glDrawArraysInstancedEXT;
    if (sf_glad_glDrawArraysInstancedARB == NULL && sf_glad_glDrawArraysInstanced != NULL) sf_glad_glDrawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC)sf_glad_glDrawArraysInstanced;
    if (sf_glad_glDrawArraysInstancedARB == NULL && sf_glad_glDrawArraysInstancedEXT != NULL) sf_glad_glDrawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC)sf_glad_glDrawArraysInstancedEXT;
    if (sf_glad_glDrawArraysInstancedEXT == NULL && sf_glad_glDrawArraysInstanced != NULL) sf_glad_glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)sf_glad_glDrawArraysInstanced;
    if (sf_glad_glDrawArraysInstancedEXT == NULL && sf_glad_glDrawArraysInstancedARB != NULL) sf_glad_glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)sf_glad_glDrawArraysInstancedARB;
    if (sf_glad_glDrawBuffers == NULL && sf_glad_glDrawBuffersARB != NULL) sf_glad_glDrawBuffers = (PFNGLDRAWBUFFERSPROC)sf_glad_glDrawBuffersARB;
    if (sf_glad_glDrawBuffers == NULL && sf_glad_glDrawBuffersATI != NULL) sf_glad_glDrawBuffers = (PFNGLDRAWBUFFERSPROC)sf_glad_glDrawBuffersATI;
    if (sf_glad_glDrawBuffersARB == NULL && sf_glad_glDrawBuffers != NULL) sf_glad_glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC)sf_glad_glDrawBuffers;
    if (sf_glad_glDrawBuffersARB == NULL && sf_glad_glDrawBuffersATI != NULL) sf_glad_glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC)sf_glad_glDrawBuffersATI;
    if (sf_glad_glDrawBuffersATI == NULL && sf_glad_glDrawBuffers != NULL) sf_glad_glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC)sf_glad_glDrawBuffers;
    if (sf_glad_glDrawBuffersATI == NULL && sf_glad_glDrawBuffersARB != NULL) sf_glad_glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC)sf_glad_glDrawBuffersARB;
    if (sf_glad_glDrawElementsInstanced == NULL && sf_glad_glDrawElementsInstancedARB != NULL) sf_glad_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)sf_glad_glDrawElementsInstancedARB;
    if (sf_glad_glDrawElementsInstanced == NULL && sf_glad_glDrawElementsInstancedEXT != NULL) sf_glad_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)sf_glad_glDrawElementsInstancedEXT;
    if (sf_glad_glDrawElementsInstancedARB == NULL && sf_glad_glDrawElementsInstanced != NULL) sf_glad_glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC)sf_glad_glDrawElementsInstanced;
    if (sf_glad_glDrawElementsInstancedARB == NULL && sf_glad_glDrawElementsInstancedEXT != NULL) sf_glad_glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC)sf_glad_glDrawElementsInstancedEXT;
    if (sf_glad_glDrawElementsInstancedEXT == NULL && sf_glad_glDrawElementsInstanced != NULL) sf_glad_glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)sf_glad_glDrawElementsInstanced;
    if (sf_glad_glDrawElementsInstancedEXT == NULL && sf_glad_glDrawElementsInstancedARB != NULL) sf_glad_glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)sf_glad_glDrawElementsInstancedARB;
    if (sf_glad_glDrawRangeElements == NULL && sf_glad_glDrawRangeElementsEXT != NULL) sf_glad_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)sf_glad_glDrawRangeElementsEXT;
    if (sf_glad_glDrawRangeElementsEXT == NULL && sf_glad_glDrawRangeElements != NULL) sf_glad_glDrawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC)sf_glad_glDrawRangeElements;
    if (sf_glad_glDrawTransformFeedback == NULL && sf_glad_glDrawTransformFeedbackNV != NULL) sf_glad_glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC)sf_glad_glDrawTransformFeedbackNV;
    if (sf_glad_glDrawTransformFeedbackNV == NULL && sf_glad_glDrawTransformFeedback != NULL) sf_glad_glDrawTransformFeedbackNV = (PFNGLDRAWTRANSFORMFEEDBACKNVPROC)sf_glad_glDrawTransformFeedback;
    if (sf_glad_glEnablei == NULL && sf_glad_glEnableIndexedEXT != NULL) sf_glad_glEnablei = (PFNGLENABLEIPROC)sf_glad_glEnableIndexedEXT;
    if (sf_glad_glEnableIndexedEXT == NULL && sf_glad_glEnablei != NULL) sf_glad_glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)sf_glad_glEnablei;
    if (sf_glad_glEnableVertexAttribArray == NULL && sf_glad_glEnableVertexAttribArrayARB != NULL) sf_glad_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)sf_glad_glEnableVertexAttribArrayARB;
    if (sf_glad_glEnableVertexAttribArrayARB == NULL && sf_glad_glEnableVertexAttribArray != NULL) sf_glad_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC)sf_glad_glEnableVertexAttribArray;
    if (sf_glad_glEndConditionalRender == NULL && sf_glad_glEndConditionalRenderNV != NULL) sf_glad_glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)sf_glad_glEndConditionalRenderNV;
    if (sf_glad_glEndConditionalRender == NULL && sf_glad_glEndConditionalRenderNVX != NULL) sf_glad_glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)sf_glad_glEndConditionalRenderNVX;
    if (sf_glad_glEndConditionalRenderNV == NULL && sf_glad_glEndConditionalRender != NULL) sf_glad_glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC)sf_glad_glEndConditionalRender;
    if (sf_glad_glEndConditionalRenderNV == NULL && sf_glad_glEndConditionalRenderNVX != NULL) sf_glad_glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC)sf_glad_glEndConditionalRenderNVX;
    if (sf_glad_glEndConditionalRenderNVX == NULL && sf_glad_glEndConditionalRender != NULL) sf_glad_glEndConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC)sf_glad_glEndConditionalRender;
    if (sf_glad_glEndConditionalRenderNVX == NULL && sf_glad_glEndConditionalRenderNV != NULL) sf_glad_glEndConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC)sf_glad_glEndConditionalRenderNV;
    if (sf_glad_glEndQuery == NULL && sf_glad_glEndQueryARB != NULL) sf_glad_glEndQuery = (PFNGLENDQUERYPROC)sf_glad_glEndQueryARB;
    if (sf_glad_glEndQueryARB == NULL && sf_glad_glEndQuery != NULL) sf_glad_glEndQueryARB = (PFNGLENDQUERYARBPROC)sf_glad_glEndQuery;
    if (sf_glad_glEndTransformFeedback == NULL && sf_glad_glEndTransformFeedbackEXT != NULL) sf_glad_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)sf_glad_glEndTransformFeedbackEXT;
    if (sf_glad_glEndTransformFeedback == NULL && sf_glad_glEndTransformFeedbackNV != NULL) sf_glad_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)sf_glad_glEndTransformFeedbackNV;
    if (sf_glad_glEndTransformFeedbackEXT == NULL && sf_glad_glEndTransformFeedback != NULL) sf_glad_glEndTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC)sf_glad_glEndTransformFeedback;
    if (sf_glad_glEndTransformFeedbackEXT == NULL && sf_glad_glEndTransformFeedbackNV != NULL) sf_glad_glEndTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC)sf_glad_glEndTransformFeedbackNV;
    if (sf_glad_glEndTransformFeedbackNV == NULL && sf_glad_glEndTransformFeedback != NULL) sf_glad_glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC)sf_glad_glEndTransformFeedback;
    if (sf_glad_glEndTransformFeedbackNV == NULL && sf_glad_glEndTransformFeedbackEXT != NULL) sf_glad_glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC)sf_glad_glEndTransformFeedbackEXT;
    if (sf_glad_glFlushMappedBufferRange == NULL && sf_glad_glFlushMappedBufferRangeAPPLE != NULL) sf_glad_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)sf_glad_glFlushMappedBufferRangeAPPLE;
    if (sf_glad_glFlushMappedBufferRangeAPPLE == NULL && sf_glad_glFlushMappedBufferRange != NULL) sf_glad_glFlushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)sf_glad_glFlushMappedBufferRange;
    if (sf_glad_glFramebufferRenderbuffer == NULL && sf_glad_glFramebufferRenderbufferEXT != NULL) sf_glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)sf_glad_glFramebufferRenderbufferEXT;
    if (sf_glad_glFramebufferRenderbufferEXT == NULL && sf_glad_glFramebufferRenderbuffer != NULL) sf_glad_glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)sf_glad_glFramebufferRenderbuffer;
    if (sf_glad_glFramebufferTexture == NULL && sf_glad_glFramebufferTextureARB != NULL) sf_glad_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)sf_glad_glFramebufferTextureARB;
    if (sf_glad_glFramebufferTexture == NULL && sf_glad_glFramebufferTextureEXT != NULL) sf_glad_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)sf_glad_glFramebufferTextureEXT;
    if (sf_glad_glFramebufferTexture1D == NULL && sf_glad_glFramebufferTexture1DEXT != NULL) sf_glad_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)sf_glad_glFramebufferTexture1DEXT;
    if (sf_glad_glFramebufferTexture1DEXT == NULL && sf_glad_glFramebufferTexture1D != NULL) sf_glad_glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)sf_glad_glFramebufferTexture1D;
    if (sf_glad_glFramebufferTexture2D == NULL && sf_glad_glFramebufferTexture2DEXT != NULL) sf_glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)sf_glad_glFramebufferTexture2DEXT;
    if (sf_glad_glFramebufferTexture2DEXT == NULL && sf_glad_glFramebufferTexture2D != NULL) sf_glad_glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)sf_glad_glFramebufferTexture2D;
    if (sf_glad_glFramebufferTexture3D == NULL && sf_glad_glFramebufferTexture3DEXT != NULL) sf_glad_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)sf_glad_glFramebufferTexture3DEXT;
    if (sf_glad_glFramebufferTexture3DEXT == NULL && sf_glad_glFramebufferTexture3D != NULL) sf_glad_glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)sf_glad_glFramebufferTexture3D;
    if (sf_glad_glFramebufferTextureARB == NULL && sf_glad_glFramebufferTexture != NULL) sf_glad_glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)sf_glad_glFramebufferTexture;
    if (sf_glad_glFramebufferTextureARB == NULL && sf_glad_glFramebufferTextureEXT != NULL) sf_glad_glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)sf_glad_glFramebufferTextureEXT;
    if (sf_glad_glFramebufferTextureEXT == NULL && sf_glad_glFramebufferTexture != NULL) sf_glad_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)sf_glad_glFramebufferTexture;
    if (sf_glad_glFramebufferTextureEXT == NULL && sf_glad_glFramebufferTextureARB != NULL) sf_glad_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)sf_glad_glFramebufferTextureARB;
    if (sf_glad_glFramebufferTextureFaceARB == NULL && sf_glad_glFramebufferTextureFaceEXT != NULL) sf_glad_glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)sf_glad_glFramebufferTextureFaceEXT;
    if (sf_glad_glFramebufferTextureFaceEXT == NULL && sf_glad_glFramebufferTextureFaceARB != NULL) sf_glad_glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)sf_glad_glFramebufferTextureFaceARB;
    if (sf_glad_glFramebufferTextureLayer == NULL && sf_glad_glFramebufferTextureLayerARB != NULL) sf_glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)sf_glad_glFramebufferTextureLayerARB;
    if (sf_glad_glFramebufferTextureLayer == NULL && sf_glad_glFramebufferTextureLayerEXT != NULL) sf_glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)sf_glad_glFramebufferTextureLayerEXT;
    if (sf_glad_glFramebufferTextureLayerARB == NULL && sf_glad_glFramebufferTextureLayer != NULL) sf_glad_glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)sf_glad_glFramebufferTextureLayer;
    if (sf_glad_glFramebufferTextureLayerARB == NULL && sf_glad_glFramebufferTextureLayerEXT != NULL) sf_glad_glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)sf_glad_glFramebufferTextureLayerEXT;
    if (sf_glad_glFramebufferTextureLayerEXT == NULL && sf_glad_glFramebufferTextureLayer != NULL) sf_glad_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)sf_glad_glFramebufferTextureLayer;
    if (sf_glad_glFramebufferTextureLayerEXT == NULL && sf_glad_glFramebufferTextureLayerARB != NULL) sf_glad_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)sf_glad_glFramebufferTextureLayerARB;
    if (sf_glad_glGenBuffers == NULL && sf_glad_glGenBuffersARB != NULL) sf_glad_glGenBuffers = (PFNGLGENBUFFERSPROC)sf_glad_glGenBuffersARB;
    if (sf_glad_glGenBuffersARB == NULL && sf_glad_glGenBuffers != NULL) sf_glad_glGenBuffersARB = (PFNGLGENBUFFERSARBPROC)sf_glad_glGenBuffers;
    if (sf_glad_glGenerateMipmap == NULL && sf_glad_glGenerateMipmapEXT != NULL) sf_glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)sf_glad_glGenerateMipmapEXT;
    if (sf_glad_glGenerateMipmapEXT == NULL && sf_glad_glGenerateMipmap != NULL) sf_glad_glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC)sf_glad_glGenerateMipmap;
    if (sf_glad_glGenFramebuffers == NULL && sf_glad_glGenFramebuffersEXT != NULL) sf_glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)sf_glad_glGenFramebuffersEXT;
    if (sf_glad_glGenFramebuffersEXT == NULL && sf_glad_glGenFramebuffers != NULL) sf_glad_glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC)sf_glad_glGenFramebuffers;
    if (sf_glad_glGenProgramsARB == NULL && sf_glad_glGenProgramsNV != NULL) sf_glad_glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC)sf_glad_glGenProgramsNV;
    if (sf_glad_glGenProgramsNV == NULL && sf_glad_glGenProgramsARB != NULL) sf_glad_glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC)sf_glad_glGenProgramsARB;
    if (sf_glad_glGenQueries == NULL && sf_glad_glGenQueriesARB != NULL) sf_glad_glGenQueries = (PFNGLGENQUERIESPROC)sf_glad_glGenQueriesARB;
    if (sf_glad_glGenQueriesARB == NULL && sf_glad_glGenQueries != NULL) sf_glad_glGenQueriesARB = (PFNGLGENQUERIESARBPROC)sf_glad_glGenQueries;
    if (sf_glad_glGenRenderbuffers == NULL && sf_glad_glGenRenderbuffersEXT != NULL) sf_glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)sf_glad_glGenRenderbuffersEXT;
    if (sf_glad_glGenRenderbuffersEXT == NULL && sf_glad_glGenRenderbuffers != NULL) sf_glad_glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC)sf_glad_glGenRenderbuffers;
    if (sf_glad_glGenTransformFeedbacks == NULL && sf_glad_glGenTransformFeedbacksNV != NULL) sf_glad_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC)sf_glad_glGenTransformFeedbacksNV;
    if (sf_glad_glGenTransformFeedbacksNV == NULL && sf_glad_glGenTransformFeedbacks != NULL) sf_glad_glGenTransformFeedbacksNV = (PFNGLGENTRANSFORMFEEDBACKSNVPROC)sf_glad_glGenTransformFeedbacks;
    if (sf_glad_glGenVertexArrays == NULL && sf_glad_glGenVertexArraysAPPLE != NULL) sf_glad_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)sf_glad_glGenVertexArraysAPPLE;
    if (sf_glad_glGenVertexArraysAPPLE == NULL && sf_glad_glGenVertexArrays != NULL) sf_glad_glGenVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC)sf_glad_glGenVertexArrays;
    if (sf_glad_glGetActiveAttrib == NULL && sf_glad_glGetActiveAttribARB != NULL) sf_glad_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)sf_glad_glGetActiveAttribARB;
    if (sf_glad_glGetActiveAttribARB == NULL && sf_glad_glGetActiveAttrib != NULL) sf_glad_glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC)sf_glad_glGetActiveAttrib;
    if (sf_glad_glGetActiveUniform == NULL && sf_glad_glGetActiveUniformARB != NULL) sf_glad_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)sf_glad_glGetActiveUniformARB;
    if (sf_glad_glGetActiveUniformARB == NULL && sf_glad_glGetActiveUniform != NULL) sf_glad_glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC)sf_glad_glGetActiveUniform;
    if (sf_glad_glGetAttribLocation == NULL && sf_glad_glGetAttribLocationARB != NULL) sf_glad_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)sf_glad_glGetAttribLocationARB;
    if (sf_glad_glGetAttribLocationARB == NULL && sf_glad_glGetAttribLocation != NULL) sf_glad_glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC)sf_glad_glGetAttribLocation;
    if (sf_glad_glGetBooleani_v == NULL && sf_glad_glGetBooleanIndexedvEXT != NULL) sf_glad_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)sf_glad_glGetBooleanIndexedvEXT;
    if (sf_glad_glGetBooleanIndexedvEXT == NULL && sf_glad_glGetBooleani_v != NULL) sf_glad_glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC)sf_glad_glGetBooleani_v;
    if (sf_glad_glGetBufferParameteriv == NULL && sf_glad_glGetBufferParameterivARB != NULL) sf_glad_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)sf_glad_glGetBufferParameterivARB;
    if (sf_glad_glGetBufferParameterivARB == NULL && sf_glad_glGetBufferParameteriv != NULL) sf_glad_glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC)sf_glad_glGetBufferParameteriv;
    if (sf_glad_glGetBufferPointerv == NULL && sf_glad_glGetBufferPointervARB != NULL) sf_glad_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)sf_glad_glGetBufferPointervARB;
    if (sf_glad_glGetBufferPointervARB == NULL && sf_glad_glGetBufferPointerv != NULL) sf_glad_glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC)sf_glad_glGetBufferPointerv;
    if (sf_glad_glGetBufferSubData == NULL && sf_glad_glGetBufferSubDataARB != NULL) sf_glad_glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)sf_glad_glGetBufferSubDataARB;
    if (sf_glad_glGetBufferSubDataARB == NULL && sf_glad_glGetBufferSubData != NULL) sf_glad_glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC)sf_glad_glGetBufferSubData;
    if (sf_glad_glGetCompressedTexImage == NULL && sf_glad_glGetCompressedTexImageARB != NULL) sf_glad_glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)sf_glad_glGetCompressedTexImageARB;
    if (sf_glad_glGetCompressedTexImageARB == NULL && sf_glad_glGetCompressedTexImage != NULL) sf_glad_glGetCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)sf_glad_glGetCompressedTexImage;
    if (sf_glad_glGetDoublei_v == NULL && sf_glad_glGetDoubleIndexedvEXT != NULL) sf_glad_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)sf_glad_glGetDoubleIndexedvEXT;
    if (sf_glad_glGetDoublei_v == NULL && sf_glad_glGetDoublei_vEXT != NULL) sf_glad_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)sf_glad_glGetDoublei_vEXT;
    if (sf_glad_glGetDoublei_vEXT == NULL && sf_glad_glGetDoubleIndexedvEXT != NULL) sf_glad_glGetDoublei_vEXT = (PFNGLGETDOUBLEI_VEXTPROC)sf_glad_glGetDoubleIndexedvEXT;
    if (sf_glad_glGetDoublei_vEXT == NULL && sf_glad_glGetDoublei_v != NULL) sf_glad_glGetDoublei_vEXT = (PFNGLGETDOUBLEI_VEXTPROC)sf_glad_glGetDoublei_v;
    if (sf_glad_glGetDoubleIndexedvEXT == NULL && sf_glad_glGetDoublei_v != NULL) sf_glad_glGetDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC)sf_glad_glGetDoublei_v;
    if (sf_glad_glGetDoubleIndexedvEXT == NULL && sf_glad_glGetDoublei_vEXT != NULL) sf_glad_glGetDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC)sf_glad_glGetDoublei_vEXT;
    if (sf_glad_glGetFloati_v == NULL && sf_glad_glGetFloatIndexedvEXT != NULL) sf_glad_glGetFloati_v = (PFNGLGETFLOATI_VPROC)sf_glad_glGetFloatIndexedvEXT;
    if (sf_glad_glGetFloati_v == NULL && sf_glad_glGetFloati_vEXT != NULL) sf_glad_glGetFloati_v = (PFNGLGETFLOATI_VPROC)sf_glad_glGetFloati_vEXT;
    if (sf_glad_glGetFloati_vEXT == NULL && sf_glad_glGetFloatIndexedvEXT != NULL) sf_glad_glGetFloati_vEXT = (PFNGLGETFLOATI_VEXTPROC)sf_glad_glGetFloatIndexedvEXT;
    if (sf_glad_glGetFloati_vEXT == NULL && sf_glad_glGetFloati_v != NULL) sf_glad_glGetFloati_vEXT = (PFNGLGETFLOATI_VEXTPROC)sf_glad_glGetFloati_v;
    if (sf_glad_glGetFloatIndexedvEXT == NULL && sf_glad_glGetFloati_v != NULL) sf_glad_glGetFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC)sf_glad_glGetFloati_v;
    if (sf_glad_glGetFloatIndexedvEXT == NULL && sf_glad_glGetFloati_vEXT != NULL) sf_glad_glGetFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC)sf_glad_glGetFloati_vEXT;
    if (sf_glad_glGetFragDataLocation == NULL && sf_glad_glGetFragDataLocationEXT != NULL) sf_glad_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)sf_glad_glGetFragDataLocationEXT;
    if (sf_glad_glGetFragDataLocationEXT == NULL && sf_glad_glGetFragDataLocation != NULL) sf_glad_glGetFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC)sf_glad_glGetFragDataLocation;
    if (sf_glad_glGetFramebufferAttachmentParameteriv == NULL && sf_glad_glGetFramebufferAttachmentParameterivEXT != NULL) sf_glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)sf_glad_glGetFramebufferAttachmentParameterivEXT;
    if (sf_glad_glGetFramebufferAttachmentParameterivEXT == NULL && sf_glad_glGetFramebufferAttachmentParameteriv != NULL) sf_glad_glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)sf_glad_glGetFramebufferAttachmentParameteriv;
    if (sf_glad_glGetIntegeri_v == NULL && sf_glad_glGetIntegerIndexedvEXT != NULL) sf_glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)sf_glad_glGetIntegerIndexedvEXT;
    if (sf_glad_glGetIntegerIndexedvEXT == NULL && sf_glad_glGetIntegeri_v != NULL) sf_glad_glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC)sf_glad_glGetIntegeri_v;
    if (sf_glad_glGetMultisamplefv == NULL && sf_glad_glGetMultisamplefvNV != NULL) sf_glad_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)sf_glad_glGetMultisamplefvNV;
    if (sf_glad_glGetMultisamplefvNV == NULL && sf_glad_glGetMultisamplefv != NULL) sf_glad_glGetMultisamplefvNV = (PFNGLGETMULTISAMPLEFVNVPROC)sf_glad_glGetMultisamplefv;
    if (sf_glad_glGetQueryiv == NULL && sf_glad_glGetQueryivARB != NULL) sf_glad_glGetQueryiv = (PFNGLGETQUERYIVPROC)sf_glad_glGetQueryivARB;
    if (sf_glad_glGetQueryivARB == NULL && sf_glad_glGetQueryiv != NULL) sf_glad_glGetQueryivARB = (PFNGLGETQUERYIVARBPROC)sf_glad_glGetQueryiv;
    if (sf_glad_glGetQueryObjecti64v == NULL && sf_glad_glGetQueryObjecti64vEXT != NULL) sf_glad_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC)sf_glad_glGetQueryObjecti64vEXT;
    if (sf_glad_glGetQueryObjecti64vEXT == NULL && sf_glad_glGetQueryObjecti64v != NULL) sf_glad_glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC)sf_glad_glGetQueryObjecti64v;
    if (sf_glad_glGetQueryObjectiv == NULL && sf_glad_glGetQueryObjectivARB != NULL) sf_glad_glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)sf_glad_glGetQueryObjectivARB;
    if (sf_glad_glGetQueryObjectivARB == NULL && sf_glad_glGetQueryObjectiv != NULL) sf_glad_glGetQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC)sf_glad_glGetQueryObjectiv;
    if (sf_glad_glGetQueryObjectui64v == NULL && sf_glad_glGetQueryObjectui64vEXT != NULL) sf_glad_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC)sf_glad_glGetQueryObjectui64vEXT;
    if (sf_glad_glGetQueryObjectui64vEXT == NULL && sf_glad_glGetQueryObjectui64v != NULL) sf_glad_glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC)sf_glad_glGetQueryObjectui64v;
    if (sf_glad_glGetQueryObjectuiv == NULL && sf_glad_glGetQueryObjectuivARB != NULL) sf_glad_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)sf_glad_glGetQueryObjectuivARB;
    if (sf_glad_glGetQueryObjectuivARB == NULL && sf_glad_glGetQueryObjectuiv != NULL) sf_glad_glGetQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC)sf_glad_glGetQueryObjectuiv;
    if (sf_glad_glGetRenderbufferParameteriv == NULL && sf_glad_glGetRenderbufferParameterivEXT != NULL) sf_glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)sf_glad_glGetRenderbufferParameterivEXT;
    if (sf_glad_glGetRenderbufferParameterivEXT == NULL && sf_glad_glGetRenderbufferParameteriv != NULL) sf_glad_glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)sf_glad_glGetRenderbufferParameteriv;
    if (sf_glad_glGetShaderSource == NULL && sf_glad_glGetShaderSourceARB != NULL) sf_glad_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)sf_glad_glGetShaderSourceARB;
    if (sf_glad_glGetShaderSourceARB == NULL && sf_glad_glGetShaderSource != NULL) sf_glad_glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC)sf_glad_glGetShaderSource;
    if (sf_glad_glGetTexParameterIiv == NULL && sf_glad_glGetTexParameterIivEXT != NULL) sf_glad_glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)sf_glad_glGetTexParameterIivEXT;
    if (sf_glad_glGetTexParameterIivEXT == NULL && sf_glad_glGetTexParameterIiv != NULL) sf_glad_glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC)sf_glad_glGetTexParameterIiv;
    if (sf_glad_glGetTexParameterIuiv == NULL && sf_glad_glGetTexParameterIuivEXT != NULL) sf_glad_glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)sf_glad_glGetTexParameterIuivEXT;
    if (sf_glad_glGetTexParameterIuivEXT == NULL && sf_glad_glGetTexParameterIuiv != NULL) sf_glad_glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC)sf_glad_glGetTexParameterIuiv;
    if (sf_glad_glGetTransformFeedbackVarying == NULL && sf_glad_glGetTransformFeedbackVaryingEXT != NULL) sf_glad_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)sf_glad_glGetTransformFeedbackVaryingEXT;
    if (sf_glad_glGetTransformFeedbackVaryingEXT == NULL && sf_glad_glGetTransformFeedbackVarying != NULL) sf_glad_glGetTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)sf_glad_glGetTransformFeedbackVarying;
    if (sf_glad_glGetUniformfv == NULL && sf_glad_glGetUniformfvARB != NULL) sf_glad_glGetUniformfv = (PFNGLGETUNIFORMFVPROC)sf_glad_glGetUniformfvARB;
    if (sf_glad_glGetUniformfvARB == NULL && sf_glad_glGetUniformfv != NULL) sf_glad_glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC)sf_glad_glGetUniformfv;
    if (sf_glad_glGetUniformiv == NULL && sf_glad_glGetUniformivARB != NULL) sf_glad_glGetUniformiv = (PFNGLGETUNIFORMIVPROC)sf_glad_glGetUniformivARB;
    if (sf_glad_glGetUniformivARB == NULL && sf_glad_glGetUniformiv != NULL) sf_glad_glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC)sf_glad_glGetUniformiv;
    if (sf_glad_glGetUniformLocation == NULL && sf_glad_glGetUniformLocationARB != NULL) sf_glad_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)sf_glad_glGetUniformLocationARB;
    if (sf_glad_glGetUniformLocationARB == NULL && sf_glad_glGetUniformLocation != NULL) sf_glad_glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC)sf_glad_glGetUniformLocation;
    if (sf_glad_glGetUniformuiv == NULL && sf_glad_glGetUniformuivEXT != NULL) sf_glad_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)sf_glad_glGetUniformuivEXT;
    if (sf_glad_glGetUniformuivEXT == NULL && sf_glad_glGetUniformuiv != NULL) sf_glad_glGetUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC)sf_glad_glGetUniformuiv;
    if (sf_glad_glGetVertexAttribdv == NULL && sf_glad_glGetVertexAttribdvARB != NULL) sf_glad_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)sf_glad_glGetVertexAttribdvARB;
    if (sf_glad_glGetVertexAttribdv == NULL && sf_glad_glGetVertexAttribdvNV != NULL) sf_glad_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)sf_glad_glGetVertexAttribdvNV;
    if (sf_glad_glGetVertexAttribdvARB == NULL && sf_glad_glGetVertexAttribdv != NULL) sf_glad_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)sf_glad_glGetVertexAttribdv;
    if (sf_glad_glGetVertexAttribdvARB == NULL && sf_glad_glGetVertexAttribdvNV != NULL) sf_glad_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)sf_glad_glGetVertexAttribdvNV;
    if (sf_glad_glGetVertexAttribdvNV == NULL && sf_glad_glGetVertexAttribdv != NULL) sf_glad_glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)sf_glad_glGetVertexAttribdv;
    if (sf_glad_glGetVertexAttribdvNV == NULL && sf_glad_glGetVertexAttribdvARB != NULL) sf_glad_glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)sf_glad_glGetVertexAttribdvARB;
    if (sf_glad_glGetVertexAttribfv == NULL && sf_glad_glGetVertexAttribfvARB != NULL) sf_glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)sf_glad_glGetVertexAttribfvARB;
    if (sf_glad_glGetVertexAttribfv == NULL && sf_glad_glGetVertexAttribfvNV != NULL) sf_glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)sf_glad_glGetVertexAttribfvNV;
    if (sf_glad_glGetVertexAttribfvARB == NULL && sf_glad_glGetVertexAttribfv != NULL) sf_glad_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)sf_glad_glGetVertexAttribfv;
    if (sf_glad_glGetVertexAttribfvARB == NULL && sf_glad_glGetVertexAttribfvNV != NULL) sf_glad_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)sf_glad_glGetVertexAttribfvNV;
    if (sf_glad_glGetVertexAttribfvNV == NULL && sf_glad_glGetVertexAttribfv != NULL) sf_glad_glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)sf_glad_glGetVertexAttribfv;
    if (sf_glad_glGetVertexAttribfvNV == NULL && sf_glad_glGetVertexAttribfvARB != NULL) sf_glad_glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)sf_glad_glGetVertexAttribfvARB;
    if (sf_glad_glGetVertexAttribIiv == NULL && sf_glad_glGetVertexAttribIivEXT != NULL) sf_glad_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)sf_glad_glGetVertexAttribIivEXT;
    if (sf_glad_glGetVertexAttribIivEXT == NULL && sf_glad_glGetVertexAttribIiv != NULL) sf_glad_glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC)sf_glad_glGetVertexAttribIiv;
    if (sf_glad_glGetVertexAttribIuiv == NULL && sf_glad_glGetVertexAttribIuivEXT != NULL) sf_glad_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)sf_glad_glGetVertexAttribIuivEXT;
    if (sf_glad_glGetVertexAttribIuivEXT == NULL && sf_glad_glGetVertexAttribIuiv != NULL) sf_glad_glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC)sf_glad_glGetVertexAttribIuiv;
    if (sf_glad_glGetVertexAttribiv == NULL && sf_glad_glGetVertexAttribivARB != NULL) sf_glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)sf_glad_glGetVertexAttribivARB;
    if (sf_glad_glGetVertexAttribiv == NULL && sf_glad_glGetVertexAttribivNV != NULL) sf_glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)sf_glad_glGetVertexAttribivNV;
    if (sf_glad_glGetVertexAttribivARB == NULL && sf_glad_glGetVertexAttribiv != NULL) sf_glad_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)sf_glad_glGetVertexAttribiv;
    if (sf_glad_glGetVertexAttribivARB == NULL && sf_glad_glGetVertexAttribivNV != NULL) sf_glad_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)sf_glad_glGetVertexAttribivNV;
    if (sf_glad_glGetVertexAttribivNV == NULL && sf_glad_glGetVertexAttribiv != NULL) sf_glad_glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)sf_glad_glGetVertexAttribiv;
    if (sf_glad_glGetVertexAttribivNV == NULL && sf_glad_glGetVertexAttribivARB != NULL) sf_glad_glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)sf_glad_glGetVertexAttribivARB;
    if (sf_glad_glGetVertexAttribLdv == NULL && sf_glad_glGetVertexAttribLdvEXT != NULL) sf_glad_glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC)sf_glad_glGetVertexAttribLdvEXT;
    if (sf_glad_glGetVertexAttribLdvEXT == NULL && sf_glad_glGetVertexAttribLdv != NULL) sf_glad_glGetVertexAttribLdvEXT = (PFNGLGETVERTEXATTRIBLDVEXTPROC)sf_glad_glGetVertexAttribLdv;
    if (sf_glad_glGetVertexAttribPointerv == NULL && sf_glad_glGetVertexAttribPointervARB != NULL) sf_glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)sf_glad_glGetVertexAttribPointervARB;
    if (sf_glad_glGetVertexAttribPointerv == NULL && sf_glad_glGetVertexAttribPointervNV != NULL) sf_glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)sf_glad_glGetVertexAttribPointervNV;
    if (sf_glad_glGetVertexAttribPointervARB == NULL && sf_glad_glGetVertexAttribPointerv != NULL) sf_glad_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)sf_glad_glGetVertexAttribPointerv;
    if (sf_glad_glGetVertexAttribPointervARB == NULL && sf_glad_glGetVertexAttribPointervNV != NULL) sf_glad_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)sf_glad_glGetVertexAttribPointervNV;
    if (sf_glad_glGetVertexAttribPointervNV == NULL && sf_glad_glGetVertexAttribPointerv != NULL) sf_glad_glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)sf_glad_glGetVertexAttribPointerv;
    if (sf_glad_glGetVertexAttribPointervNV == NULL && sf_glad_glGetVertexAttribPointervARB != NULL) sf_glad_glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)sf_glad_glGetVertexAttribPointervARB;
    if (sf_glad_glIsBuffer == NULL && sf_glad_glIsBufferARB != NULL) sf_glad_glIsBuffer = (PFNGLISBUFFERPROC)sf_glad_glIsBufferARB;
    if (sf_glad_glIsBufferARB == NULL && sf_glad_glIsBuffer != NULL) sf_glad_glIsBufferARB = (PFNGLISBUFFERARBPROC)sf_glad_glIsBuffer;
    if (sf_glad_glIsEnabledi == NULL && sf_glad_glIsEnabledIndexedEXT != NULL) sf_glad_glIsEnabledi = (PFNGLISENABLEDIPROC)sf_glad_glIsEnabledIndexedEXT;
    if (sf_glad_glIsEnabledIndexedEXT == NULL && sf_glad_glIsEnabledi != NULL) sf_glad_glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)sf_glad_glIsEnabledi;
    if (sf_glad_glIsFramebuffer == NULL && sf_glad_glIsFramebufferEXT != NULL) sf_glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)sf_glad_glIsFramebufferEXT;
    if (sf_glad_glIsFramebufferEXT == NULL && sf_glad_glIsFramebuffer != NULL) sf_glad_glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC)sf_glad_glIsFramebuffer;
    if (sf_glad_glIsProgramARB == NULL && sf_glad_glIsProgramNV != NULL) sf_glad_glIsProgramARB = (PFNGLISPROGRAMARBPROC)sf_glad_glIsProgramNV;
    if (sf_glad_glIsProgramNV == NULL && sf_glad_glIsProgramARB != NULL) sf_glad_glIsProgramNV = (PFNGLISPROGRAMNVPROC)sf_glad_glIsProgramARB;
    if (sf_glad_glIsQuery == NULL && sf_glad_glIsQueryARB != NULL) sf_glad_glIsQuery = (PFNGLISQUERYPROC)sf_glad_glIsQueryARB;
    if (sf_glad_glIsQueryARB == NULL && sf_glad_glIsQuery != NULL) sf_glad_glIsQueryARB = (PFNGLISQUERYARBPROC)sf_glad_glIsQuery;
    if (sf_glad_glIsRenderbuffer == NULL && sf_glad_glIsRenderbufferEXT != NULL) sf_glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)sf_glad_glIsRenderbufferEXT;
    if (sf_glad_glIsRenderbufferEXT == NULL && sf_glad_glIsRenderbuffer != NULL) sf_glad_glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC)sf_glad_glIsRenderbuffer;
    if (sf_glad_glIsTransformFeedback == NULL && sf_glad_glIsTransformFeedbackNV != NULL) sf_glad_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC)sf_glad_glIsTransformFeedbackNV;
    if (sf_glad_glIsTransformFeedbackNV == NULL && sf_glad_glIsTransformFeedback != NULL) sf_glad_glIsTransformFeedbackNV = (PFNGLISTRANSFORMFEEDBACKNVPROC)sf_glad_glIsTransformFeedback;
    if (sf_glad_glIsVertexArray == NULL && sf_glad_glIsVertexArrayAPPLE != NULL) sf_glad_glIsVertexArray = (PFNGLISVERTEXARRAYPROC)sf_glad_glIsVertexArrayAPPLE;
    if (sf_glad_glIsVertexArrayAPPLE == NULL && sf_glad_glIsVertexArray != NULL) sf_glad_glIsVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC)sf_glad_glIsVertexArray;
    if (sf_glad_glLinkProgram == NULL && sf_glad_glLinkProgramARB != NULL) sf_glad_glLinkProgram = (PFNGLLINKPROGRAMPROC)sf_glad_glLinkProgramARB;
    if (sf_glad_glLinkProgramARB == NULL && sf_glad_glLinkProgram != NULL) sf_glad_glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC)sf_glad_glLinkProgram;
    if (sf_glad_glMapBuffer == NULL && sf_glad_glMapBufferARB != NULL) sf_glad_glMapBuffer = (PFNGLMAPBUFFERPROC)sf_glad_glMapBufferARB;
    if (sf_glad_glMapBufferARB == NULL && sf_glad_glMapBuffer != NULL) sf_glad_glMapBufferARB = (PFNGLMAPBUFFERARBPROC)sf_glad_glMapBuffer;
    if (sf_glad_glMinSampleShading == NULL && sf_glad_glMinSampleShadingARB != NULL) sf_glad_glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC)sf_glad_glMinSampleShadingARB;
    if (sf_glad_glMinSampleShadingARB == NULL && sf_glad_glMinSampleShading != NULL) sf_glad_glMinSampleShadingARB = (PFNGLMINSAMPLESHADINGARBPROC)sf_glad_glMinSampleShading;
    if (sf_glad_glMultiDrawArrays == NULL && sf_glad_glMultiDrawArraysEXT != NULL) sf_glad_glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)sf_glad_glMultiDrawArraysEXT;
    if (sf_glad_glMultiDrawArraysEXT == NULL && sf_glad_glMultiDrawArrays != NULL) sf_glad_glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC)sf_glad_glMultiDrawArrays;
    if (sf_glad_glMultiDrawElements == NULL && sf_glad_glMultiDrawElementsEXT != NULL) sf_glad_glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)sf_glad_glMultiDrawElementsEXT;
    if (sf_glad_glMultiDrawElementsEXT == NULL && sf_glad_glMultiDrawElements != NULL) sf_glad_glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC)sf_glad_glMultiDrawElements;
    if (sf_glad_glPauseTransformFeedback == NULL && sf_glad_glPauseTransformFeedbackNV != NULL) sf_glad_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC)sf_glad_glPauseTransformFeedbackNV;
    if (sf_glad_glPauseTransformFeedbackNV == NULL && sf_glad_glPauseTransformFeedback != NULL) sf_glad_glPauseTransformFeedbackNV = (PFNGLPAUSETRANSFORMFEEDBACKNVPROC)sf_glad_glPauseTransformFeedback;
    if (sf_glad_glPointParameterf == NULL && sf_glad_glPointParameterfARB != NULL) sf_glad_glPointParameterf = (PFNGLPOINTPARAMETERFPROC)sf_glad_glPointParameterfARB;
    if (sf_glad_glPointParameterf == NULL && sf_glad_glPointParameterfEXT != NULL) sf_glad_glPointParameterf = (PFNGLPOINTPARAMETERFPROC)sf_glad_glPointParameterfEXT;
    if (sf_glad_glPointParameterf == NULL && sf_glad_glPointParameterfSGIS != NULL) sf_glad_glPointParameterf = (PFNGLPOINTPARAMETERFPROC)sf_glad_glPointParameterfSGIS;
    if (sf_glad_glPointParameterfARB == NULL && sf_glad_glPointParameterf != NULL) sf_glad_glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)sf_glad_glPointParameterf;
    if (sf_glad_glPointParameterfARB == NULL && sf_glad_glPointParameterfEXT != NULL) sf_glad_glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)sf_glad_glPointParameterfEXT;
    if (sf_glad_glPointParameterfARB == NULL && sf_glad_glPointParameterfSGIS != NULL) sf_glad_glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)sf_glad_glPointParameterfSGIS;
    if (sf_glad_glPointParameterfEXT == NULL && sf_glad_glPointParameterf != NULL) sf_glad_glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)sf_glad_glPointParameterf;
    if (sf_glad_glPointParameterfEXT == NULL && sf_glad_glPointParameterfARB != NULL) sf_glad_glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)sf_glad_glPointParameterfARB;
    if (sf_glad_glPointParameterfEXT == NULL && sf_glad_glPointParameterfSGIS != NULL) sf_glad_glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)sf_glad_glPointParameterfSGIS;
    if (sf_glad_glPointParameterfSGIS == NULL && sf_glad_glPointParameterf != NULL) sf_glad_glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC)sf_glad_glPointParameterf;
    if (sf_glad_glPointParameterfSGIS == NULL && sf_glad_glPointParameterfARB != NULL) sf_glad_glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC)sf_glad_glPointParameterfARB;
    if (sf_glad_glPointParameterfSGIS == NULL && sf_glad_glPointParameterfEXT != NULL) sf_glad_glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC)sf_glad_glPointParameterfEXT;
    if (sf_glad_glPointParameterfv == NULL && sf_glad_glPointParameterfvARB != NULL) sf_glad_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)sf_glad_glPointParameterfvARB;
    if (sf_glad_glPointParameterfv == NULL && sf_glad_glPointParameterfvEXT != NULL) sf_glad_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)sf_glad_glPointParameterfvEXT;
    if (sf_glad_glPointParameterfv == NULL && sf_glad_glPointParameterfvSGIS != NULL) sf_glad_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)sf_glad_glPointParameterfvSGIS;
    if (sf_glad_glPointParameterfvARB == NULL && sf_glad_glPointParameterfv != NULL) sf_glad_glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)sf_glad_glPointParameterfv;
    if (sf_glad_glPointParameterfvARB == NULL && sf_glad_glPointParameterfvEXT != NULL) sf_glad_glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)sf_glad_glPointParameterfvEXT;
    if (sf_glad_glPointParameterfvARB == NULL && sf_glad_glPointParameterfvSGIS != NULL) sf_glad_glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)sf_glad_glPointParameterfvSGIS;
    if (sf_glad_glPointParameterfvEXT == NULL && sf_glad_glPointParameterfv != NULL) sf_glad_glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)sf_glad_glPointParameterfv;
    if (sf_glad_glPointParameterfvEXT == NULL && sf_glad_glPointParameterfvARB != NULL) sf_glad_glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)sf_glad_glPointParameterfvARB;
    if (sf_glad_glPointParameterfvEXT == NULL && sf_glad_glPointParameterfvSGIS != NULL) sf_glad_glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)sf_glad_glPointParameterfvSGIS;
    if (sf_glad_glPointParameterfvSGIS == NULL && sf_glad_glPointParameterfv != NULL) sf_glad_glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC)sf_glad_glPointParameterfv;
    if (sf_glad_glPointParameterfvSGIS == NULL && sf_glad_glPointParameterfvARB != NULL) sf_glad_glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC)sf_glad_glPointParameterfvARB;
    if (sf_glad_glPointParameterfvSGIS == NULL && sf_glad_glPointParameterfvEXT != NULL) sf_glad_glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC)sf_glad_glPointParameterfvEXT;
    if (sf_glad_glPointParameteri == NULL && sf_glad_glPointParameteriNV != NULL) sf_glad_glPointParameteri = (PFNGLPOINTPARAMETERIPROC)sf_glad_glPointParameteriNV;
    if (sf_glad_glPointParameteriNV == NULL && sf_glad_glPointParameteri != NULL) sf_glad_glPointParameteriNV = (PFNGLPOINTPARAMETERINVPROC)sf_glad_glPointParameteri;
    if (sf_glad_glPointParameteriv == NULL && sf_glad_glPointParameterivNV != NULL) sf_glad_glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)sf_glad_glPointParameterivNV;
    if (sf_glad_glPointParameterivNV == NULL && sf_glad_glPointParameteriv != NULL) sf_glad_glPointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC)sf_glad_glPointParameteriv;
    if (sf_glad_glProgramParameteri == NULL && sf_glad_glProgramParameteriARB != NULL) sf_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)sf_glad_glProgramParameteriARB;
    if (sf_glad_glProgramParameteri == NULL && sf_glad_glProgramParameteriEXT != NULL) sf_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)sf_glad_glProgramParameteriEXT;
    if (sf_glad_glProgramParameteriARB == NULL && sf_glad_glProgramParameteri != NULL) sf_glad_glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC)sf_glad_glProgramParameteri;
    if (sf_glad_glProgramParameteriARB == NULL && sf_glad_glProgramParameteriEXT != NULL) sf_glad_glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC)sf_glad_glProgramParameteriEXT;
    if (sf_glad_glProgramParameteriEXT == NULL && sf_glad_glProgramParameteri != NULL) sf_glad_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)sf_glad_glProgramParameteri;
    if (sf_glad_glProgramParameteriEXT == NULL && sf_glad_glProgramParameteriARB != NULL) sf_glad_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)sf_glad_glProgramParameteriARB;
    if (sf_glad_glProgramUniform1f == NULL && sf_glad_glProgramUniform1fEXT != NULL) sf_glad_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC)sf_glad_glProgramUniform1fEXT;
    if (sf_glad_glProgramUniform1fEXT == NULL && sf_glad_glProgramUniform1f != NULL) sf_glad_glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC)sf_glad_glProgramUniform1f;
    if (sf_glad_glProgramUniform1fv == NULL && sf_glad_glProgramUniform1fvEXT != NULL) sf_glad_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC)sf_glad_glProgramUniform1fvEXT;
    if (sf_glad_glProgramUniform1fvEXT == NULL && sf_glad_glProgramUniform1fv != NULL) sf_glad_glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC)sf_glad_glProgramUniform1fv;
    if (sf_glad_glProgramUniform1i == NULL && sf_glad_glProgramUniform1iEXT != NULL) sf_glad_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC)sf_glad_glProgramUniform1iEXT;
    if (sf_glad_glProgramUniform1iEXT == NULL && sf_glad_glProgramUniform1i != NULL) sf_glad_glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC)sf_glad_glProgramUniform1i;
    if (sf_glad_glProgramUniform1iv == NULL && sf_glad_glProgramUniform1ivEXT != NULL) sf_glad_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC)sf_glad_glProgramUniform1ivEXT;
    if (sf_glad_glProgramUniform1ivEXT == NULL && sf_glad_glProgramUniform1iv != NULL) sf_glad_glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC)sf_glad_glProgramUniform1iv;
    if (sf_glad_glProgramUniform1ui == NULL && sf_glad_glProgramUniform1uiEXT != NULL) sf_glad_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC)sf_glad_glProgramUniform1uiEXT;
    if (sf_glad_glProgramUniform1uiEXT == NULL && sf_glad_glProgramUniform1ui != NULL) sf_glad_glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC)sf_glad_glProgramUniform1ui;
    if (sf_glad_glProgramUniform1uiv == NULL && sf_glad_glProgramUniform1uivEXT != NULL) sf_glad_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC)sf_glad_glProgramUniform1uivEXT;
    if (sf_glad_glProgramUniform1uivEXT == NULL && sf_glad_glProgramUniform1uiv != NULL) sf_glad_glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC)sf_glad_glProgramUniform1uiv;
    if (sf_glad_glProgramUniform2f == NULL && sf_glad_glProgramUniform2fEXT != NULL) sf_glad_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC)sf_glad_glProgramUniform2fEXT;
    if (sf_glad_glProgramUniform2fEXT == NULL && sf_glad_glProgramUniform2f != NULL) sf_glad_glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC)sf_glad_glProgramUniform2f;
    if (sf_glad_glProgramUniform2fv == NULL && sf_glad_glProgramUniform2fvEXT != NULL) sf_glad_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC)sf_glad_glProgramUniform2fvEXT;
    if (sf_glad_glProgramUniform2fvEXT == NULL && sf_glad_glProgramUniform2fv != NULL) sf_glad_glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC)sf_glad_glProgramUniform2fv;
    if (sf_glad_glProgramUniform2i == NULL && sf_glad_glProgramUniform2iEXT != NULL) sf_glad_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC)sf_glad_glProgramUniform2iEXT;
    if (sf_glad_glProgramUniform2iEXT == NULL && sf_glad_glProgramUniform2i != NULL) sf_glad_glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC)sf_glad_glProgramUniform2i;
    if (sf_glad_glProgramUniform2iv == NULL && sf_glad_glProgramUniform2ivEXT != NULL) sf_glad_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC)sf_glad_glProgramUniform2ivEXT;
    if (sf_glad_glProgramUniform2ivEXT == NULL && sf_glad_glProgramUniform2iv != NULL) sf_glad_glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC)sf_glad_glProgramUniform2iv;
    if (sf_glad_glProgramUniform2ui == NULL && sf_glad_glProgramUniform2uiEXT != NULL) sf_glad_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC)sf_glad_glProgramUniform2uiEXT;
    if (sf_glad_glProgramUniform2uiEXT == NULL && sf_glad_glProgramUniform2ui != NULL) sf_glad_glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC)sf_glad_glProgramUniform2ui;
    if (sf_glad_glProgramUniform2uiv == NULL && sf_glad_glProgramUniform2uivEXT != NULL) sf_glad_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC)sf_glad_glProgramUniform2uivEXT;
    if (sf_glad_glProgramUniform2uivEXT == NULL && sf_glad_glProgramUniform2uiv != NULL) sf_glad_glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC)sf_glad_glProgramUniform2uiv;
    if (sf_glad_glProgramUniform3f == NULL && sf_glad_glProgramUniform3fEXT != NULL) sf_glad_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC)sf_glad_glProgramUniform3fEXT;
    if (sf_glad_glProgramUniform3fEXT == NULL && sf_glad_glProgramUniform3f != NULL) sf_glad_glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC)sf_glad_glProgramUniform3f;
    if (sf_glad_glProgramUniform3fv == NULL && sf_glad_glProgramUniform3fvEXT != NULL) sf_glad_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC)sf_glad_glProgramUniform3fvEXT;
    if (sf_glad_glProgramUniform3fvEXT == NULL && sf_glad_glProgramUniform3fv != NULL) sf_glad_glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC)sf_glad_glProgramUniform3fv;
    if (sf_glad_glProgramUniform3i == NULL && sf_glad_glProgramUniform3iEXT != NULL) sf_glad_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC)sf_glad_glProgramUniform3iEXT;
    if (sf_glad_glProgramUniform3iEXT == NULL && sf_glad_glProgramUniform3i != NULL) sf_glad_glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC)sf_glad_glProgramUniform3i;
    if (sf_glad_glProgramUniform3iv == NULL && sf_glad_glProgramUniform3ivEXT != NULL) sf_glad_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC)sf_glad_glProgramUniform3ivEXT;
    if (sf_glad_glProgramUniform3ivEXT == NULL && sf_glad_glProgramUniform3iv != NULL) sf_glad_glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC)sf_glad_glProgramUniform3iv;
    if (sf_glad_glProgramUniform3ui == NULL && sf_glad_glProgramUniform3uiEXT != NULL) sf_glad_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC)sf_glad_glProgramUniform3uiEXT;
    if (sf_glad_glProgramUniform3uiEXT == NULL && sf_glad_glProgramUniform3ui != NULL) sf_glad_glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC)sf_glad_glProgramUniform3ui;
    if (sf_glad_glProgramUniform3uiv == NULL && sf_glad_glProgramUniform3uivEXT != NULL) sf_glad_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC)sf_glad_glProgramUniform3uivEXT;
    if (sf_glad_glProgramUniform3uivEXT == NULL && sf_glad_glProgramUniform3uiv != NULL) sf_glad_glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC)sf_glad_glProgramUniform3uiv;
    if (sf_glad_glProgramUniform4f == NULL && sf_glad_glProgramUniform4fEXT != NULL) sf_glad_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC)sf_glad_glProgramUniform4fEXT;
    if (sf_glad_glProgramUniform4fEXT == NULL && sf_glad_glProgramUniform4f != NULL) sf_glad_glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC)sf_glad_glProgramUniform4f;
    if (sf_glad_glProgramUniform4fv == NULL && sf_glad_glProgramUniform4fvEXT != NULL) sf_glad_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC)sf_glad_glProgramUniform4fvEXT;
    if (sf_glad_glProgramUniform4fvEXT == NULL && sf_glad_glProgramUniform4fv != NULL) sf_glad_glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC)sf_glad_glProgramUniform4fv;
    if (sf_glad_glProgramUniform4i == NULL && sf_glad_glProgramUniform4iEXT != NULL) sf_glad_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC)sf_glad_glProgramUniform4iEXT;
    if (sf_glad_glProgramUniform4iEXT == NULL && sf_glad_glProgramUniform4i != NULL) sf_glad_glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC)sf_glad_glProgramUniform4i;
    if (sf_glad_glProgramUniform4iv == NULL && sf_glad_glProgramUniform4ivEXT != NULL) sf_glad_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC)sf_glad_glProgramUniform4ivEXT;
    if (sf_glad_glProgramUniform4ivEXT == NULL && sf_glad_glProgramUniform4iv != NULL) sf_glad_glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC)sf_glad_glProgramUniform4iv;
    if (sf_glad_glProgramUniform4ui == NULL && sf_glad_glProgramUniform4uiEXT != NULL) sf_glad_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC)sf_glad_glProgramUniform4uiEXT;
    if (sf_glad_glProgramUniform4uiEXT == NULL && sf_glad_glProgramUniform4ui != NULL) sf_glad_glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC)sf_glad_glProgramUniform4ui;
    if (sf_glad_glProgramUniform4uiv == NULL && sf_glad_glProgramUniform4uivEXT != NULL) sf_glad_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC)sf_glad_glProgramUniform4uivEXT;
    if (sf_glad_glProgramUniform4uivEXT == NULL && sf_glad_glProgramUniform4uiv != NULL) sf_glad_glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC)sf_glad_glProgramUniform4uiv;
    if (sf_glad_glProgramUniformMatrix2fv == NULL && sf_glad_glProgramUniformMatrix2fvEXT != NULL) sf_glad_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)sf_glad_glProgramUniformMatrix2fvEXT;
    if (sf_glad_glProgramUniformMatrix2fvEXT == NULL && sf_glad_glProgramUniformMatrix2fv != NULL) sf_glad_glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)sf_glad_glProgramUniformMatrix2fv;
    if (sf_glad_glProgramUniformMatrix2x3fv == NULL && sf_glad_glProgramUniformMatrix2x3fvEXT != NULL) sf_glad_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)sf_glad_glProgramUniformMatrix2x3fvEXT;
    if (sf_glad_glProgramUniformMatrix2x3fvEXT == NULL && sf_glad_glProgramUniformMatrix2x3fv != NULL) sf_glad_glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)sf_glad_glProgramUniformMatrix2x3fv;
    if (sf_glad_glProgramUniformMatrix2x4fv == NULL && sf_glad_glProgramUniformMatrix2x4fvEXT != NULL) sf_glad_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)sf_glad_glProgramUniformMatrix2x4fvEXT;
    if (sf_glad_glProgramUniformMatrix2x4fvEXT == NULL && sf_glad_glProgramUniformMatrix2x4fv != NULL) sf_glad_glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)sf_glad_glProgramUniformMatrix2x4fv;
    if (sf_glad_glProgramUniformMatrix3fv == NULL && sf_glad_glProgramUniformMatrix3fvEXT != NULL) sf_glad_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)sf_glad_glProgramUniformMatrix3fvEXT;
    if (sf_glad_glProgramUniformMatrix3fvEXT == NULL && sf_glad_glProgramUniformMatrix3fv != NULL) sf_glad_glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)sf_glad_glProgramUniformMatrix3fv;
    if (sf_glad_glProgramUniformMatrix3x2fv == NULL && sf_glad_glProgramUniformMatrix3x2fvEXT != NULL) sf_glad_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)sf_glad_glProgramUniformMatrix3x2fvEXT;
    if (sf_glad_glProgramUniformMatrix3x2fvEXT == NULL && sf_glad_glProgramUniformMatrix3x2fv != NULL) sf_glad_glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)sf_glad_glProgramUniformMatrix3x2fv;
    if (sf_glad_glProgramUniformMatrix3x4fv == NULL && sf_glad_glProgramUniformMatrix3x4fvEXT != NULL) sf_glad_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)sf_glad_glProgramUniformMatrix3x4fvEXT;
    if (sf_glad_glProgramUniformMatrix3x4fvEXT == NULL && sf_glad_glProgramUniformMatrix3x4fv != NULL) sf_glad_glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)sf_glad_glProgramUniformMatrix3x4fv;
    if (sf_glad_glProgramUniformMatrix4fv == NULL && sf_glad_glProgramUniformMatrix4fvEXT != NULL) sf_glad_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)sf_glad_glProgramUniformMatrix4fvEXT;
    if (sf_glad_glProgramUniformMatrix4fvEXT == NULL && sf_glad_glProgramUniformMatrix4fv != NULL) sf_glad_glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)sf_glad_glProgramUniformMatrix4fv;
    if (sf_glad_glProgramUniformMatrix4x2fv == NULL && sf_glad_glProgramUniformMatrix4x2fvEXT != NULL) sf_glad_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)sf_glad_glProgramUniformMatrix4x2fvEXT;
    if (sf_glad_glProgramUniformMatrix4x2fvEXT == NULL && sf_glad_glProgramUniformMatrix4x2fv != NULL) sf_glad_glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)sf_glad_glProgramUniformMatrix4x2fv;
    if (sf_glad_glProgramUniformMatrix4x3fv == NULL && sf_glad_glProgramUniformMatrix4x3fvEXT != NULL) sf_glad_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)sf_glad_glProgramUniformMatrix4x3fvEXT;
    if (sf_glad_glProgramUniformMatrix4x3fvEXT == NULL && sf_glad_glProgramUniformMatrix4x3fv != NULL) sf_glad_glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)sf_glad_glProgramUniformMatrix4x3fv;
    if (sf_glad_glProvokingVertex == NULL && sf_glad_glProvokingVertexEXT != NULL) sf_glad_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC)sf_glad_glProvokingVertexEXT;
    if (sf_glad_glProvokingVertexEXT == NULL && sf_glad_glProvokingVertex != NULL) sf_glad_glProvokingVertexEXT = (PFNGLPROVOKINGVERTEXEXTPROC)sf_glad_glProvokingVertex;
    if (sf_glad_glRenderbufferStorage == NULL && sf_glad_glRenderbufferStorageEXT != NULL) sf_glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)sf_glad_glRenderbufferStorageEXT;
    if (sf_glad_glRenderbufferStorageEXT == NULL && sf_glad_glRenderbufferStorage != NULL) sf_glad_glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC)sf_glad_glRenderbufferStorage;
    if (sf_glad_glRenderbufferStorageMultisample == NULL && sf_glad_glRenderbufferStorageMultisampleEXT != NULL) sf_glad_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)sf_glad_glRenderbufferStorageMultisampleEXT;
    if (sf_glad_glRenderbufferStorageMultisampleEXT == NULL && sf_glad_glRenderbufferStorageMultisample != NULL) sf_glad_glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)sf_glad_glRenderbufferStorageMultisample;
    if (sf_glad_glResumeTransformFeedback == NULL && sf_glad_glResumeTransformFeedbackNV != NULL) sf_glad_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC)sf_glad_glResumeTransformFeedbackNV;
    if (sf_glad_glResumeTransformFeedbackNV == NULL && sf_glad_glResumeTransformFeedback != NULL) sf_glad_glResumeTransformFeedbackNV = (PFNGLRESUMETRANSFORMFEEDBACKNVPROC)sf_glad_glResumeTransformFeedback;
    if (sf_glad_glSampleCoverage == NULL && sf_glad_glSampleCoverageARB != NULL) sf_glad_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)sf_glad_glSampleCoverageARB;
    if (sf_glad_glSampleCoverageARB == NULL && sf_glad_glSampleCoverage != NULL) sf_glad_glSampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC)sf_glad_glSampleCoverage;
    if (sf_glad_glShaderSource == NULL && sf_glad_glShaderSourceARB != NULL) sf_glad_glShaderSource = (PFNGLSHADERSOURCEPROC)sf_glad_glShaderSourceARB;
    if (sf_glad_glShaderSourceARB == NULL && sf_glad_glShaderSource != NULL) sf_glad_glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC)sf_glad_glShaderSource;
    if (sf_glad_glStencilOpSeparate == NULL && sf_glad_glStencilOpSeparateATI != NULL) sf_glad_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)sf_glad_glStencilOpSeparateATI;
    if (sf_glad_glStencilOpSeparateATI == NULL && sf_glad_glStencilOpSeparate != NULL) sf_glad_glStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC)sf_glad_glStencilOpSeparate;
    if (sf_glad_glTexBuffer == NULL && sf_glad_glTexBufferARB != NULL) sf_glad_glTexBuffer = (PFNGLTEXBUFFERPROC)sf_glad_glTexBufferARB;
    if (sf_glad_glTexBuffer == NULL && sf_glad_glTexBufferEXT != NULL) sf_glad_glTexBuffer = (PFNGLTEXBUFFERPROC)sf_glad_glTexBufferEXT;
    if (sf_glad_glTexBufferARB == NULL && sf_glad_glTexBuffer != NULL) sf_glad_glTexBufferARB = (PFNGLTEXBUFFERARBPROC)sf_glad_glTexBuffer;
    if (sf_glad_glTexBufferARB == NULL && sf_glad_glTexBufferEXT != NULL) sf_glad_glTexBufferARB = (PFNGLTEXBUFFERARBPROC)sf_glad_glTexBufferEXT;
    if (sf_glad_glTexBufferEXT == NULL && sf_glad_glTexBuffer != NULL) sf_glad_glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC)sf_glad_glTexBuffer;
    if (sf_glad_glTexBufferEXT == NULL && sf_glad_glTexBufferARB != NULL) sf_glad_glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC)sf_glad_glTexBufferARB;
    if (sf_glad_glTexImage3D == NULL && sf_glad_glTexImage3DEXT != NULL) sf_glad_glTexImage3D = (PFNGLTEXIMAGE3DPROC)sf_glad_glTexImage3DEXT;
    if (sf_glad_glTexImage3DEXT == NULL && sf_glad_glTexImage3D != NULL) sf_glad_glTexImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC)sf_glad_glTexImage3D;
    if (sf_glad_glTexParameterIiv == NULL && sf_glad_glTexParameterIivEXT != NULL) sf_glad_glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)sf_glad_glTexParameterIivEXT;
    if (sf_glad_glTexParameterIivEXT == NULL && sf_glad_glTexParameterIiv != NULL) sf_glad_glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC)sf_glad_glTexParameterIiv;
    if (sf_glad_glTexParameterIuiv == NULL && sf_glad_glTexParameterIuivEXT != NULL) sf_glad_glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)sf_glad_glTexParameterIuivEXT;
    if (sf_glad_glTexParameterIuivEXT == NULL && sf_glad_glTexParameterIuiv != NULL) sf_glad_glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC)sf_glad_glTexParameterIuiv;
    if (sf_glad_glTexSubImage1D == NULL && sf_glad_glTexSubImage1DEXT != NULL) sf_glad_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC)sf_glad_glTexSubImage1DEXT;
    if (sf_glad_glTexSubImage1DEXT == NULL && sf_glad_glTexSubImage1D != NULL) sf_glad_glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC)sf_glad_glTexSubImage1D;
    if (sf_glad_glTexSubImage2D == NULL && sf_glad_glTexSubImage2DEXT != NULL) sf_glad_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC)sf_glad_glTexSubImage2DEXT;
    if (sf_glad_glTexSubImage2DEXT == NULL && sf_glad_glTexSubImage2D != NULL) sf_glad_glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC)sf_glad_glTexSubImage2D;
    if (sf_glad_glTexSubImage3D == NULL && sf_glad_glTexSubImage3DEXT != NULL) sf_glad_glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)sf_glad_glTexSubImage3DEXT;
    if (sf_glad_glTexSubImage3DEXT == NULL && sf_glad_glTexSubImage3D != NULL) sf_glad_glTexSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC)sf_glad_glTexSubImage3D;
    if (sf_glad_glTransformFeedbackVaryings == NULL && sf_glad_glTransformFeedbackVaryingsEXT != NULL) sf_glad_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)sf_glad_glTransformFeedbackVaryingsEXT;
    if (sf_glad_glTransformFeedbackVaryingsEXT == NULL && sf_glad_glTransformFeedbackVaryings != NULL) sf_glad_glTransformFeedbackVaryingsEXT = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)sf_glad_glTransformFeedbackVaryings;
    if (sf_glad_glUniform1f == NULL && sf_glad_glUniform1fARB != NULL) sf_glad_glUniform1f = (PFNGLUNIFORM1FPROC)sf_glad_glUniform1fARB;
    if (sf_glad_glUniform1fARB == NULL && sf_glad_glUniform1f != NULL) sf_glad_glUniform1fARB = (PFNGLUNIFORM1FARBPROC)sf_glad_glUniform1f;
    if (sf_glad_glUniform1fv == NULL && sf_glad_glUniform1fvARB != NULL) sf_glad_glUniform1fv = (PFNGLUNIFORM1FVPROC)sf_glad_glUniform1fvARB;
    if (sf_glad_glUniform1fvARB == NULL && sf_glad_glUniform1fv != NULL) sf_glad_glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC)sf_glad_glUniform1fv;
    if (sf_glad_glUniform1i == NULL && sf_glad_glUniform1iARB != NULL) sf_glad_glUniform1i = (PFNGLUNIFORM1IPROC)sf_glad_glUniform1iARB;
    if (sf_glad_glUniform1iARB == NULL && sf_glad_glUniform1i != NULL) sf_glad_glUniform1iARB = (PFNGLUNIFORM1IARBPROC)sf_glad_glUniform1i;
    if (sf_glad_glUniform1iv == NULL && sf_glad_glUniform1ivARB != NULL) sf_glad_glUniform1iv = (PFNGLUNIFORM1IVPROC)sf_glad_glUniform1ivARB;
    if (sf_glad_glUniform1ivARB == NULL && sf_glad_glUniform1iv != NULL) sf_glad_glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC)sf_glad_glUniform1iv;
    if (sf_glad_glUniform1ui == NULL && sf_glad_glUniform1uiEXT != NULL) sf_glad_glUniform1ui = (PFNGLUNIFORM1UIPROC)sf_glad_glUniform1uiEXT;
    if (sf_glad_glUniform1uiEXT == NULL && sf_glad_glUniform1ui != NULL) sf_glad_glUniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC)sf_glad_glUniform1ui;
    if (sf_glad_glUniform1uiv == NULL && sf_glad_glUniform1uivEXT != NULL) sf_glad_glUniform1uiv = (PFNGLUNIFORM1UIVPROC)sf_glad_glUniform1uivEXT;
    if (sf_glad_glUniform1uivEXT == NULL && sf_glad_glUniform1uiv != NULL) sf_glad_glUniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC)sf_glad_glUniform1uiv;
    if (sf_glad_glUniform2f == NULL && sf_glad_glUniform2fARB != NULL) sf_glad_glUniform2f = (PFNGLUNIFORM2FPROC)sf_glad_glUniform2fARB;
    if (sf_glad_glUniform2fARB == NULL && sf_glad_glUniform2f != NULL) sf_glad_glUniform2fARB = (PFNGLUNIFORM2FARBPROC)sf_glad_glUniform2f;
    if (sf_glad_glUniform2fv == NULL && sf_glad_glUniform2fvARB != NULL) sf_glad_glUniform2fv = (PFNGLUNIFORM2FVPROC)sf_glad_glUniform2fvARB;
    if (sf_glad_glUniform2fvARB == NULL && sf_glad_glUniform2fv != NULL) sf_glad_glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC)sf_glad_glUniform2fv;
    if (sf_glad_glUniform2i == NULL && sf_glad_glUniform2iARB != NULL) sf_glad_glUniform2i = (PFNGLUNIFORM2IPROC)sf_glad_glUniform2iARB;
    if (sf_glad_glUniform2iARB == NULL && sf_glad_glUniform2i != NULL) sf_glad_glUniform2iARB = (PFNGLUNIFORM2IARBPROC)sf_glad_glUniform2i;
    if (sf_glad_glUniform2iv == NULL && sf_glad_glUniform2ivARB != NULL) sf_glad_glUniform2iv = (PFNGLUNIFORM2IVPROC)sf_glad_glUniform2ivARB;
    if (sf_glad_glUniform2ivARB == NULL && sf_glad_glUniform2iv != NULL) sf_glad_glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC)sf_glad_glUniform2iv;
    if (sf_glad_glUniform2ui == NULL && sf_glad_glUniform2uiEXT != NULL) sf_glad_glUniform2ui = (PFNGLUNIFORM2UIPROC)sf_glad_glUniform2uiEXT;
    if (sf_glad_glUniform2uiEXT == NULL && sf_glad_glUniform2ui != NULL) sf_glad_glUniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC)sf_glad_glUniform2ui;
    if (sf_glad_glUniform2uiv == NULL && sf_glad_glUniform2uivEXT != NULL) sf_glad_glUniform2uiv = (PFNGLUNIFORM2UIVPROC)sf_glad_glUniform2uivEXT;
    if (sf_glad_glUniform2uivEXT == NULL && sf_glad_glUniform2uiv != NULL) sf_glad_glUniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC)sf_glad_glUniform2uiv;
    if (sf_glad_glUniform3f == NULL && sf_glad_glUniform3fARB != NULL) sf_glad_glUniform3f = (PFNGLUNIFORM3FPROC)sf_glad_glUniform3fARB;
    if (sf_glad_glUniform3fARB == NULL && sf_glad_glUniform3f != NULL) sf_glad_glUniform3fARB = (PFNGLUNIFORM3FARBPROC)sf_glad_glUniform3f;
    if (sf_glad_glUniform3fv == NULL && sf_glad_glUniform3fvARB != NULL) sf_glad_glUniform3fv = (PFNGLUNIFORM3FVPROC)sf_glad_glUniform3fvARB;
    if (sf_glad_glUniform3fvARB == NULL && sf_glad_glUniform3fv != NULL) sf_glad_glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC)sf_glad_glUniform3fv;
    if (sf_glad_glUniform3i == NULL && sf_glad_glUniform3iARB != NULL) sf_glad_glUniform3i = (PFNGLUNIFORM3IPROC)sf_glad_glUniform3iARB;
    if (sf_glad_glUniform3iARB == NULL && sf_glad_glUniform3i != NULL) sf_glad_glUniform3iARB = (PFNGLUNIFORM3IARBPROC)sf_glad_glUniform3i;
    if (sf_glad_glUniform3iv == NULL && sf_glad_glUniform3ivARB != NULL) sf_glad_glUniform3iv = (PFNGLUNIFORM3IVPROC)sf_glad_glUniform3ivARB;
    if (sf_glad_glUniform3ivARB == NULL && sf_glad_glUniform3iv != NULL) sf_glad_glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC)sf_glad_glUniform3iv;
    if (sf_glad_glUniform3ui == NULL && sf_glad_glUniform3uiEXT != NULL) sf_glad_glUniform3ui = (PFNGLUNIFORM3UIPROC)sf_glad_glUniform3uiEXT;
    if (sf_glad_glUniform3uiEXT == NULL && sf_glad_glUniform3ui != NULL) sf_glad_glUniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC)sf_glad_glUniform3ui;
    if (sf_glad_glUniform3uiv == NULL && sf_glad_glUniform3uivEXT != NULL) sf_glad_glUniform3uiv = (PFNGLUNIFORM3UIVPROC)sf_glad_glUniform3uivEXT;
    if (sf_glad_glUniform3uivEXT == NULL && sf_glad_glUniform3uiv != NULL) sf_glad_glUniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC)sf_glad_glUniform3uiv;
    if (sf_glad_glUniform4f == NULL && sf_glad_glUniform4fARB != NULL) sf_glad_glUniform4f = (PFNGLUNIFORM4FPROC)sf_glad_glUniform4fARB;
    if (sf_glad_glUniform4fARB == NULL && sf_glad_glUniform4f != NULL) sf_glad_glUniform4fARB = (PFNGLUNIFORM4FARBPROC)sf_glad_glUniform4f;
    if (sf_glad_glUniform4fv == NULL && sf_glad_glUniform4fvARB != NULL) sf_glad_glUniform4fv = (PFNGLUNIFORM4FVPROC)sf_glad_glUniform4fvARB;
    if (sf_glad_glUniform4fvARB == NULL && sf_glad_glUniform4fv != NULL) sf_glad_glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC)sf_glad_glUniform4fv;
    if (sf_glad_glUniform4i == NULL && sf_glad_glUniform4iARB != NULL) sf_glad_glUniform4i = (PFNGLUNIFORM4IPROC)sf_glad_glUniform4iARB;
    if (sf_glad_glUniform4iARB == NULL && sf_glad_glUniform4i != NULL) sf_glad_glUniform4iARB = (PFNGLUNIFORM4IARBPROC)sf_glad_glUniform4i;
    if (sf_glad_glUniform4iv == NULL && sf_glad_glUniform4ivARB != NULL) sf_glad_glUniform4iv = (PFNGLUNIFORM4IVPROC)sf_glad_glUniform4ivARB;
    if (sf_glad_glUniform4ivARB == NULL && sf_glad_glUniform4iv != NULL) sf_glad_glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC)sf_glad_glUniform4iv;
    if (sf_glad_glUniform4ui == NULL && sf_glad_glUniform4uiEXT != NULL) sf_glad_glUniform4ui = (PFNGLUNIFORM4UIPROC)sf_glad_glUniform4uiEXT;
    if (sf_glad_glUniform4uiEXT == NULL && sf_glad_glUniform4ui != NULL) sf_glad_glUniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC)sf_glad_glUniform4ui;
    if (sf_glad_glUniform4uiv == NULL && sf_glad_glUniform4uivEXT != NULL) sf_glad_glUniform4uiv = (PFNGLUNIFORM4UIVPROC)sf_glad_glUniform4uivEXT;
    if (sf_glad_glUniform4uivEXT == NULL && sf_glad_glUniform4uiv != NULL) sf_glad_glUniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC)sf_glad_glUniform4uiv;
    if (sf_glad_glUniformMatrix2fv == NULL && sf_glad_glUniformMatrix2fvARB != NULL) sf_glad_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)sf_glad_glUniformMatrix2fvARB;
    if (sf_glad_glUniformMatrix2fvARB == NULL && sf_glad_glUniformMatrix2fv != NULL) sf_glad_glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC)sf_glad_glUniformMatrix2fv;
    if (sf_glad_glUniformMatrix3fv == NULL && sf_glad_glUniformMatrix3fvARB != NULL) sf_glad_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)sf_glad_glUniformMatrix3fvARB;
    if (sf_glad_glUniformMatrix3fvARB == NULL && sf_glad_glUniformMatrix3fv != NULL) sf_glad_glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC)sf_glad_glUniformMatrix3fv;
    if (sf_glad_glUniformMatrix4fv == NULL && sf_glad_glUniformMatrix4fvARB != NULL) sf_glad_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)sf_glad_glUniformMatrix4fvARB;
    if (sf_glad_glUniformMatrix4fvARB == NULL && sf_glad_glUniformMatrix4fv != NULL) sf_glad_glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC)sf_glad_glUniformMatrix4fv;
    if (sf_glad_glUnmapBuffer == NULL && sf_glad_glUnmapBufferARB != NULL) sf_glad_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)sf_glad_glUnmapBufferARB;
    if (sf_glad_glUnmapBufferARB == NULL && sf_glad_glUnmapBuffer != NULL) sf_glad_glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)sf_glad_glUnmapBuffer;
    if (sf_glad_glUseProgram == NULL && sf_glad_glUseProgramObjectARB != NULL) sf_glad_glUseProgram = (PFNGLUSEPROGRAMPROC)sf_glad_glUseProgramObjectARB;
    if (sf_glad_glUseProgramObjectARB == NULL && sf_glad_glUseProgram != NULL) sf_glad_glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC)sf_glad_glUseProgram;
    if (sf_glad_glValidateProgram == NULL && sf_glad_glValidateProgramARB != NULL) sf_glad_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)sf_glad_glValidateProgramARB;
    if (sf_glad_glValidateProgramARB == NULL && sf_glad_glValidateProgram != NULL) sf_glad_glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC)sf_glad_glValidateProgram;
    if (sf_glad_glVertexAttrib1d == NULL && sf_glad_glVertexAttrib1dARB != NULL) sf_glad_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)sf_glad_glVertexAttrib1dARB;
    if (sf_glad_glVertexAttrib1d == NULL && sf_glad_glVertexAttrib1dNV != NULL) sf_glad_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)sf_glad_glVertexAttrib1dNV;
    if (sf_glad_glVertexAttrib1dARB == NULL && sf_glad_glVertexAttrib1d != NULL) sf_glad_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)sf_glad_glVertexAttrib1d;
    if (sf_glad_glVertexAttrib1dARB == NULL && sf_glad_glVertexAttrib1dNV != NULL) sf_glad_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)sf_glad_glVertexAttrib1dNV;
    if (sf_glad_glVertexAttrib1dNV == NULL && sf_glad_glVertexAttrib1d != NULL) sf_glad_glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)sf_glad_glVertexAttrib1d;
    if (sf_glad_glVertexAttrib1dNV == NULL && sf_glad_glVertexAttrib1dARB != NULL) sf_glad_glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)sf_glad_glVertexAttrib1dARB;
    if (sf_glad_glVertexAttrib1dv == NULL && sf_glad_glVertexAttrib1dvARB != NULL) sf_glad_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)sf_glad_glVertexAttrib1dvARB;
    if (sf_glad_glVertexAttrib1dv == NULL && sf_glad_glVertexAttrib1dvNV != NULL) sf_glad_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)sf_glad_glVertexAttrib1dvNV;
    if (sf_glad_glVertexAttrib1dvARB == NULL && sf_glad_glVertexAttrib1dv != NULL) sf_glad_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)sf_glad_glVertexAttrib1dv;
    if (sf_glad_glVertexAttrib1dvARB == NULL && sf_glad_glVertexAttrib1dvNV != NULL) sf_glad_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)sf_glad_glVertexAttrib1dvNV;
    if (sf_glad_glVertexAttrib1dvNV == NULL && sf_glad_glVertexAttrib1dv != NULL) sf_glad_glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)sf_glad_glVertexAttrib1dv;
    if (sf_glad_glVertexAttrib1dvNV == NULL && sf_glad_glVertexAttrib1dvARB != NULL) sf_glad_glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)sf_glad_glVertexAttrib1dvARB;
    if (sf_glad_glVertexAttrib1f == NULL && sf_glad_glVertexAttrib1fARB != NULL) sf_glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)sf_glad_glVertexAttrib1fARB;
    if (sf_glad_glVertexAttrib1f == NULL && sf_glad_glVertexAttrib1fNV != NULL) sf_glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)sf_glad_glVertexAttrib1fNV;
    if (sf_glad_glVertexAttrib1fARB == NULL && sf_glad_glVertexAttrib1f != NULL) sf_glad_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)sf_glad_glVertexAttrib1f;
    if (sf_glad_glVertexAttrib1fARB == NULL && sf_glad_glVertexAttrib1fNV != NULL) sf_glad_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)sf_glad_glVertexAttrib1fNV;
    if (sf_glad_glVertexAttrib1fNV == NULL && sf_glad_glVertexAttrib1f != NULL) sf_glad_glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)sf_glad_glVertexAttrib1f;
    if (sf_glad_glVertexAttrib1fNV == NULL && sf_glad_glVertexAttrib1fARB != NULL) sf_glad_glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)sf_glad_glVertexAttrib1fARB;
    if (sf_glad_glVertexAttrib1fv == NULL && sf_glad_glVertexAttrib1fvARB != NULL) sf_glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)sf_glad_glVertexAttrib1fvARB;
    if (sf_glad_glVertexAttrib1fv == NULL && sf_glad_glVertexAttrib1fvNV != NULL) sf_glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)sf_glad_glVertexAttrib1fvNV;
    if (sf_glad_glVertexAttrib1fvARB == NULL && sf_glad_glVertexAttrib1fv != NULL) sf_glad_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)sf_glad_glVertexAttrib1fv;
    if (sf_glad_glVertexAttrib1fvARB == NULL && sf_glad_glVertexAttrib1fvNV != NULL) sf_glad_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)sf_glad_glVertexAttrib1fvNV;
    if (sf_glad_glVertexAttrib1fvNV == NULL && sf_glad_glVertexAttrib1fv != NULL) sf_glad_glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)sf_glad_glVertexAttrib1fv;
    if (sf_glad_glVertexAttrib1fvNV == NULL && sf_glad_glVertexAttrib1fvARB != NULL) sf_glad_glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)sf_glad_glVertexAttrib1fvARB;
    if (sf_glad_glVertexAttrib1s == NULL && sf_glad_glVertexAttrib1sARB != NULL) sf_glad_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)sf_glad_glVertexAttrib1sARB;
    if (sf_glad_glVertexAttrib1s == NULL && sf_glad_glVertexAttrib1sNV != NULL) sf_glad_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)sf_glad_glVertexAttrib1sNV;
    if (sf_glad_glVertexAttrib1sARB == NULL && sf_glad_glVertexAttrib1s != NULL) sf_glad_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)sf_glad_glVertexAttrib1s;
    if (sf_glad_glVertexAttrib1sARB == NULL && sf_glad_glVertexAttrib1sNV != NULL) sf_glad_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)sf_glad_glVertexAttrib1sNV;
    if (sf_glad_glVertexAttrib1sNV == NULL && sf_glad_glVertexAttrib1s != NULL) sf_glad_glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)sf_glad_glVertexAttrib1s;
    if (sf_glad_glVertexAttrib1sNV == NULL && sf_glad_glVertexAttrib1sARB != NULL) sf_glad_glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)sf_glad_glVertexAttrib1sARB;
    if (sf_glad_glVertexAttrib1sv == NULL && sf_glad_glVertexAttrib1svARB != NULL) sf_glad_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)sf_glad_glVertexAttrib1svARB;
    if (sf_glad_glVertexAttrib1sv == NULL && sf_glad_glVertexAttrib1svNV != NULL) sf_glad_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)sf_glad_glVertexAttrib1svNV;
    if (sf_glad_glVertexAttrib1svARB == NULL && sf_glad_glVertexAttrib1sv != NULL) sf_glad_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)sf_glad_glVertexAttrib1sv;
    if (sf_glad_glVertexAttrib1svARB == NULL && sf_glad_glVertexAttrib1svNV != NULL) sf_glad_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)sf_glad_glVertexAttrib1svNV;
    if (sf_glad_glVertexAttrib1svNV == NULL && sf_glad_glVertexAttrib1sv != NULL) sf_glad_glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)sf_glad_glVertexAttrib1sv;
    if (sf_glad_glVertexAttrib1svNV == NULL && sf_glad_glVertexAttrib1svARB != NULL) sf_glad_glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)sf_glad_glVertexAttrib1svARB;
    if (sf_glad_glVertexAttrib2d == NULL && sf_glad_glVertexAttrib2dARB != NULL) sf_glad_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)sf_glad_glVertexAttrib2dARB;
    if (sf_glad_glVertexAttrib2d == NULL && sf_glad_glVertexAttrib2dNV != NULL) sf_glad_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)sf_glad_glVertexAttrib2dNV;
    if (sf_glad_glVertexAttrib2dARB == NULL && sf_glad_glVertexAttrib2d != NULL) sf_glad_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)sf_glad_glVertexAttrib2d;
    if (sf_glad_glVertexAttrib2dARB == NULL && sf_glad_glVertexAttrib2dNV != NULL) sf_glad_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)sf_glad_glVertexAttrib2dNV;
    if (sf_glad_glVertexAttrib2dNV == NULL && sf_glad_glVertexAttrib2d != NULL) sf_glad_glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)sf_glad_glVertexAttrib2d;
    if (sf_glad_glVertexAttrib2dNV == NULL && sf_glad_glVertexAttrib2dARB != NULL) sf_glad_glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)sf_glad_glVertexAttrib2dARB;
    if (sf_glad_glVertexAttrib2dv == NULL && sf_glad_glVertexAttrib2dvARB != NULL) sf_glad_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)sf_glad_glVertexAttrib2dvARB;
    if (sf_glad_glVertexAttrib2dv == NULL && sf_glad_glVertexAttrib2dvNV != NULL) sf_glad_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)sf_glad_glVertexAttrib2dvNV;
    if (sf_glad_glVertexAttrib2dvARB == NULL && sf_glad_glVertexAttrib2dv != NULL) sf_glad_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)sf_glad_glVertexAttrib2dv;
    if (sf_glad_glVertexAttrib2dvARB == NULL && sf_glad_glVertexAttrib2dvNV != NULL) sf_glad_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)sf_glad_glVertexAttrib2dvNV;
    if (sf_glad_glVertexAttrib2dvNV == NULL && sf_glad_glVertexAttrib2dv != NULL) sf_glad_glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)sf_glad_glVertexAttrib2dv;
    if (sf_glad_glVertexAttrib2dvNV == NULL && sf_glad_glVertexAttrib2dvARB != NULL) sf_glad_glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)sf_glad_glVertexAttrib2dvARB;
    if (sf_glad_glVertexAttrib2f == NULL && sf_glad_glVertexAttrib2fARB != NULL) sf_glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)sf_glad_glVertexAttrib2fARB;
    if (sf_glad_glVertexAttrib2f == NULL && sf_glad_glVertexAttrib2fNV != NULL) sf_glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)sf_glad_glVertexAttrib2fNV;
    if (sf_glad_glVertexAttrib2fARB == NULL && sf_glad_glVertexAttrib2f != NULL) sf_glad_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)sf_glad_glVertexAttrib2f;
    if (sf_glad_glVertexAttrib2fARB == NULL && sf_glad_glVertexAttrib2fNV != NULL) sf_glad_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)sf_glad_glVertexAttrib2fNV;
    if (sf_glad_glVertexAttrib2fNV == NULL && sf_glad_glVertexAttrib2f != NULL) sf_glad_glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)sf_glad_glVertexAttrib2f;
    if (sf_glad_glVertexAttrib2fNV == NULL && sf_glad_glVertexAttrib2fARB != NULL) sf_glad_glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)sf_glad_glVertexAttrib2fARB;
    if (sf_glad_glVertexAttrib2fv == NULL && sf_glad_glVertexAttrib2fvARB != NULL) sf_glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)sf_glad_glVertexAttrib2fvARB;
    if (sf_glad_glVertexAttrib2fv == NULL && sf_glad_glVertexAttrib2fvNV != NULL) sf_glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)sf_glad_glVertexAttrib2fvNV;
    if (sf_glad_glVertexAttrib2fvARB == NULL && sf_glad_glVertexAttrib2fv != NULL) sf_glad_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)sf_glad_glVertexAttrib2fv;
    if (sf_glad_glVertexAttrib2fvARB == NULL && sf_glad_glVertexAttrib2fvNV != NULL) sf_glad_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)sf_glad_glVertexAttrib2fvNV;
    if (sf_glad_glVertexAttrib2fvNV == NULL && sf_glad_glVertexAttrib2fv != NULL) sf_glad_glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)sf_glad_glVertexAttrib2fv;
    if (sf_glad_glVertexAttrib2fvNV == NULL && sf_glad_glVertexAttrib2fvARB != NULL) sf_glad_glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)sf_glad_glVertexAttrib2fvARB;
    if (sf_glad_glVertexAttrib2s == NULL && sf_glad_glVertexAttrib2sARB != NULL) sf_glad_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)sf_glad_glVertexAttrib2sARB;
    if (sf_glad_glVertexAttrib2s == NULL && sf_glad_glVertexAttrib2sNV != NULL) sf_glad_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)sf_glad_glVertexAttrib2sNV;
    if (sf_glad_glVertexAttrib2sARB == NULL && sf_glad_glVertexAttrib2s != NULL) sf_glad_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)sf_glad_glVertexAttrib2s;
    if (sf_glad_glVertexAttrib2sARB == NULL && sf_glad_glVertexAttrib2sNV != NULL) sf_glad_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)sf_glad_glVertexAttrib2sNV;
    if (sf_glad_glVertexAttrib2sNV == NULL && sf_glad_glVertexAttrib2s != NULL) sf_glad_glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)sf_glad_glVertexAttrib2s;
    if (sf_glad_glVertexAttrib2sNV == NULL && sf_glad_glVertexAttrib2sARB != NULL) sf_glad_glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)sf_glad_glVertexAttrib2sARB;
    if (sf_glad_glVertexAttrib2sv == NULL && sf_glad_glVertexAttrib2svARB != NULL) sf_glad_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)sf_glad_glVertexAttrib2svARB;
    if (sf_glad_glVertexAttrib2sv == NULL && sf_glad_glVertexAttrib2svNV != NULL) sf_glad_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)sf_glad_glVertexAttrib2svNV;
    if (sf_glad_glVertexAttrib2svARB == NULL && sf_glad_glVertexAttrib2sv != NULL) sf_glad_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)sf_glad_glVertexAttrib2sv;
    if (sf_glad_glVertexAttrib2svARB == NULL && sf_glad_glVertexAttrib2svNV != NULL) sf_glad_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)sf_glad_glVertexAttrib2svNV;
    if (sf_glad_glVertexAttrib2svNV == NULL && sf_glad_glVertexAttrib2sv != NULL) sf_glad_glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)sf_glad_glVertexAttrib2sv;
    if (sf_glad_glVertexAttrib2svNV == NULL && sf_glad_glVertexAttrib2svARB != NULL) sf_glad_glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)sf_glad_glVertexAttrib2svARB;
    if (sf_glad_glVertexAttrib3d == NULL && sf_glad_glVertexAttrib3dARB != NULL) sf_glad_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)sf_glad_glVertexAttrib3dARB;
    if (sf_glad_glVertexAttrib3d == NULL && sf_glad_glVertexAttrib3dNV != NULL) sf_glad_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)sf_glad_glVertexAttrib3dNV;
    if (sf_glad_glVertexAttrib3dARB == NULL && sf_glad_glVertexAttrib3d != NULL) sf_glad_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)sf_glad_glVertexAttrib3d;
    if (sf_glad_glVertexAttrib3dARB == NULL && sf_glad_glVertexAttrib3dNV != NULL) sf_glad_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)sf_glad_glVertexAttrib3dNV;
    if (sf_glad_glVertexAttrib3dNV == NULL && sf_glad_glVertexAttrib3d != NULL) sf_glad_glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)sf_glad_glVertexAttrib3d;
    if (sf_glad_glVertexAttrib3dNV == NULL && sf_glad_glVertexAttrib3dARB != NULL) sf_glad_glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)sf_glad_glVertexAttrib3dARB;
    if (sf_glad_glVertexAttrib3dv == NULL && sf_glad_glVertexAttrib3dvARB != NULL) sf_glad_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)sf_glad_glVertexAttrib3dvARB;
    if (sf_glad_glVertexAttrib3dv == NULL && sf_glad_glVertexAttrib3dvNV != NULL) sf_glad_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)sf_glad_glVertexAttrib3dvNV;
    if (sf_glad_glVertexAttrib3dvARB == NULL && sf_glad_glVertexAttrib3dv != NULL) sf_glad_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)sf_glad_glVertexAttrib3dv;
    if (sf_glad_glVertexAttrib3dvARB == NULL && sf_glad_glVertexAttrib3dvNV != NULL) sf_glad_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)sf_glad_glVertexAttrib3dvNV;
    if (sf_glad_glVertexAttrib3dvNV == NULL && sf_glad_glVertexAttrib3dv != NULL) sf_glad_glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)sf_glad_glVertexAttrib3dv;
    if (sf_glad_glVertexAttrib3dvNV == NULL && sf_glad_glVertexAttrib3dvARB != NULL) sf_glad_glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)sf_glad_glVertexAttrib3dvARB;
    if (sf_glad_glVertexAttrib3f == NULL && sf_glad_glVertexAttrib3fARB != NULL) sf_glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)sf_glad_glVertexAttrib3fARB;
    if (sf_glad_glVertexAttrib3f == NULL && sf_glad_glVertexAttrib3fNV != NULL) sf_glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)sf_glad_glVertexAttrib3fNV;
    if (sf_glad_glVertexAttrib3fARB == NULL && sf_glad_glVertexAttrib3f != NULL) sf_glad_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)sf_glad_glVertexAttrib3f;
    if (sf_glad_glVertexAttrib3fARB == NULL && sf_glad_glVertexAttrib3fNV != NULL) sf_glad_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)sf_glad_glVertexAttrib3fNV;
    if (sf_glad_glVertexAttrib3fNV == NULL && sf_glad_glVertexAttrib3f != NULL) sf_glad_glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)sf_glad_glVertexAttrib3f;
    if (sf_glad_glVertexAttrib3fNV == NULL && sf_glad_glVertexAttrib3fARB != NULL) sf_glad_glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)sf_glad_glVertexAttrib3fARB;
    if (sf_glad_glVertexAttrib3fv == NULL && sf_glad_glVertexAttrib3fvARB != NULL) sf_glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)sf_glad_glVertexAttrib3fvARB;
    if (sf_glad_glVertexAttrib3fv == NULL && sf_glad_glVertexAttrib3fvNV != NULL) sf_glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)sf_glad_glVertexAttrib3fvNV;
    if (sf_glad_glVertexAttrib3fvARB == NULL && sf_glad_glVertexAttrib3fv != NULL) sf_glad_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)sf_glad_glVertexAttrib3fv;
    if (sf_glad_glVertexAttrib3fvARB == NULL && sf_glad_glVertexAttrib3fvNV != NULL) sf_glad_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)sf_glad_glVertexAttrib3fvNV;
    if (sf_glad_glVertexAttrib3fvNV == NULL && sf_glad_glVertexAttrib3fv != NULL) sf_glad_glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)sf_glad_glVertexAttrib3fv;
    if (sf_glad_glVertexAttrib3fvNV == NULL && sf_glad_glVertexAttrib3fvARB != NULL) sf_glad_glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)sf_glad_glVertexAttrib3fvARB;
    if (sf_glad_glVertexAttrib3s == NULL && sf_glad_glVertexAttrib3sARB != NULL) sf_glad_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)sf_glad_glVertexAttrib3sARB;
    if (sf_glad_glVertexAttrib3s == NULL && sf_glad_glVertexAttrib3sNV != NULL) sf_glad_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)sf_glad_glVertexAttrib3sNV;
    if (sf_glad_glVertexAttrib3sARB == NULL && sf_glad_glVertexAttrib3s != NULL) sf_glad_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)sf_glad_glVertexAttrib3s;
    if (sf_glad_glVertexAttrib3sARB == NULL && sf_glad_glVertexAttrib3sNV != NULL) sf_glad_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)sf_glad_glVertexAttrib3sNV;
    if (sf_glad_glVertexAttrib3sNV == NULL && sf_glad_glVertexAttrib3s != NULL) sf_glad_glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)sf_glad_glVertexAttrib3s;
    if (sf_glad_glVertexAttrib3sNV == NULL && sf_glad_glVertexAttrib3sARB != NULL) sf_glad_glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)sf_glad_glVertexAttrib3sARB;
    if (sf_glad_glVertexAttrib3sv == NULL && sf_glad_glVertexAttrib3svARB != NULL) sf_glad_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)sf_glad_glVertexAttrib3svARB;
    if (sf_glad_glVertexAttrib3sv == NULL && sf_glad_glVertexAttrib3svNV != NULL) sf_glad_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)sf_glad_glVertexAttrib3svNV;
    if (sf_glad_glVertexAttrib3svARB == NULL && sf_glad_glVertexAttrib3sv != NULL) sf_glad_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)sf_glad_glVertexAttrib3sv;
    if (sf_glad_glVertexAttrib3svARB == NULL && sf_glad_glVertexAttrib3svNV != NULL) sf_glad_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)sf_glad_glVertexAttrib3svNV;
    if (sf_glad_glVertexAttrib3svNV == NULL && sf_glad_glVertexAttrib3sv != NULL) sf_glad_glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)sf_glad_glVertexAttrib3sv;
    if (sf_glad_glVertexAttrib3svNV == NULL && sf_glad_glVertexAttrib3svARB != NULL) sf_glad_glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)sf_glad_glVertexAttrib3svARB;
    if (sf_glad_glVertexAttrib4bv == NULL && sf_glad_glVertexAttrib4bvARB != NULL) sf_glad_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)sf_glad_glVertexAttrib4bvARB;
    if (sf_glad_glVertexAttrib4bvARB == NULL && sf_glad_glVertexAttrib4bv != NULL) sf_glad_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC)sf_glad_glVertexAttrib4bv;
    if (sf_glad_glVertexAttrib4d == NULL && sf_glad_glVertexAttrib4dARB != NULL) sf_glad_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)sf_glad_glVertexAttrib4dARB;
    if (sf_glad_glVertexAttrib4d == NULL && sf_glad_glVertexAttrib4dNV != NULL) sf_glad_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)sf_glad_glVertexAttrib4dNV;
    if (sf_glad_glVertexAttrib4dARB == NULL && sf_glad_glVertexAttrib4d != NULL) sf_glad_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)sf_glad_glVertexAttrib4d;
    if (sf_glad_glVertexAttrib4dARB == NULL && sf_glad_glVertexAttrib4dNV != NULL) sf_glad_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)sf_glad_glVertexAttrib4dNV;
    if (sf_glad_glVertexAttrib4dNV == NULL && sf_glad_glVertexAttrib4d != NULL) sf_glad_glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)sf_glad_glVertexAttrib4d;
    if (sf_glad_glVertexAttrib4dNV == NULL && sf_glad_glVertexAttrib4dARB != NULL) sf_glad_glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)sf_glad_glVertexAttrib4dARB;
    if (sf_glad_glVertexAttrib4dv == NULL && sf_glad_glVertexAttrib4dvARB != NULL) sf_glad_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)sf_glad_glVertexAttrib4dvARB;
    if (sf_glad_glVertexAttrib4dv == NULL && sf_glad_glVertexAttrib4dvNV != NULL) sf_glad_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)sf_glad_glVertexAttrib4dvNV;
    if (sf_glad_glVertexAttrib4dvARB == NULL && sf_glad_glVertexAttrib4dv != NULL) sf_glad_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)sf_glad_glVertexAttrib4dv;
    if (sf_glad_glVertexAttrib4dvARB == NULL && sf_glad_glVertexAttrib4dvNV != NULL) sf_glad_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)sf_glad_glVertexAttrib4dvNV;
    if (sf_glad_glVertexAttrib4dvNV == NULL && sf_glad_glVertexAttrib4dv != NULL) sf_glad_glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)sf_glad_glVertexAttrib4dv;
    if (sf_glad_glVertexAttrib4dvNV == NULL && sf_glad_glVertexAttrib4dvARB != NULL) sf_glad_glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)sf_glad_glVertexAttrib4dvARB;
    if (sf_glad_glVertexAttrib4f == NULL && sf_glad_glVertexAttrib4fARB != NULL) sf_glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)sf_glad_glVertexAttrib4fARB;
    if (sf_glad_glVertexAttrib4f == NULL && sf_glad_glVertexAttrib4fNV != NULL) sf_glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)sf_glad_glVertexAttrib4fNV;
    if (sf_glad_glVertexAttrib4fARB == NULL && sf_glad_glVertexAttrib4f != NULL) sf_glad_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)sf_glad_glVertexAttrib4f;
    if (sf_glad_glVertexAttrib4fARB == NULL && sf_glad_glVertexAttrib4fNV != NULL) sf_glad_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)sf_glad_glVertexAttrib4fNV;
    if (sf_glad_glVertexAttrib4fNV == NULL && sf_glad_glVertexAttrib4f != NULL) sf_glad_glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)sf_glad_glVertexAttrib4f;
    if (sf_glad_glVertexAttrib4fNV == NULL && sf_glad_glVertexAttrib4fARB != NULL) sf_glad_glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)sf_glad_glVertexAttrib4fARB;
    if (sf_glad_glVertexAttrib4fv == NULL && sf_glad_glVertexAttrib4fvARB != NULL) sf_glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)sf_glad_glVertexAttrib4fvARB;
    if (sf_glad_glVertexAttrib4fv == NULL && sf_glad_glVertexAttrib4fvNV != NULL) sf_glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)sf_glad_glVertexAttrib4fvNV;
    if (sf_glad_glVertexAttrib4fvARB == NULL && sf_glad_glVertexAttrib4fv != NULL) sf_glad_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)sf_glad_glVertexAttrib4fv;
    if (sf_glad_glVertexAttrib4fvARB == NULL && sf_glad_glVertexAttrib4fvNV != NULL) sf_glad_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)sf_glad_glVertexAttrib4fvNV;
    if (sf_glad_glVertexAttrib4fvNV == NULL && sf_glad_glVertexAttrib4fv != NULL) sf_glad_glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)sf_glad_glVertexAttrib4fv;
    if (sf_glad_glVertexAttrib4fvNV == NULL && sf_glad_glVertexAttrib4fvARB != NULL) sf_glad_glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)sf_glad_glVertexAttrib4fvARB;
    if (sf_glad_glVertexAttrib4iv == NULL && sf_glad_glVertexAttrib4ivARB != NULL) sf_glad_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)sf_glad_glVertexAttrib4ivARB;
    if (sf_glad_glVertexAttrib4ivARB == NULL && sf_glad_glVertexAttrib4iv != NULL) sf_glad_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC)sf_glad_glVertexAttrib4iv;
    if (sf_glad_glVertexAttrib4Nbv == NULL && sf_glad_glVertexAttrib4NbvARB != NULL) sf_glad_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)sf_glad_glVertexAttrib4NbvARB;
    if (sf_glad_glVertexAttrib4NbvARB == NULL && sf_glad_glVertexAttrib4Nbv != NULL) sf_glad_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC)sf_glad_glVertexAttrib4Nbv;
    if (sf_glad_glVertexAttrib4Niv == NULL && sf_glad_glVertexAttrib4NivARB != NULL) sf_glad_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)sf_glad_glVertexAttrib4NivARB;
    if (sf_glad_glVertexAttrib4NivARB == NULL && sf_glad_glVertexAttrib4Niv != NULL) sf_glad_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC)sf_glad_glVertexAttrib4Niv;
    if (sf_glad_glVertexAttrib4Nsv == NULL && sf_glad_glVertexAttrib4NsvARB != NULL) sf_glad_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)sf_glad_glVertexAttrib4NsvARB;
    if (sf_glad_glVertexAttrib4NsvARB == NULL && sf_glad_glVertexAttrib4Nsv != NULL) sf_glad_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC)sf_glad_glVertexAttrib4Nsv;
    if (sf_glad_glVertexAttrib4Nub == NULL && sf_glad_glVertexAttrib4NubARB != NULL) sf_glad_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)sf_glad_glVertexAttrib4NubARB;
    if (sf_glad_glVertexAttrib4Nub == NULL && sf_glad_glVertexAttrib4ubNV != NULL) sf_glad_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)sf_glad_glVertexAttrib4ubNV;
    if (sf_glad_glVertexAttrib4NubARB == NULL && sf_glad_glVertexAttrib4Nub != NULL) sf_glad_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)sf_glad_glVertexAttrib4Nub;
    if (sf_glad_glVertexAttrib4NubARB == NULL && sf_glad_glVertexAttrib4ubNV != NULL) sf_glad_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)sf_glad_glVertexAttrib4ubNV;
    if (sf_glad_glVertexAttrib4Nubv == NULL && sf_glad_glVertexAttrib4NubvARB != NULL) sf_glad_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)sf_glad_glVertexAttrib4NubvARB;
    if (sf_glad_glVertexAttrib4Nubv == NULL && sf_glad_glVertexAttrib4ubvNV != NULL) sf_glad_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)sf_glad_glVertexAttrib4ubvNV;
    if (sf_glad_glVertexAttrib4NubvARB == NULL && sf_glad_glVertexAttrib4Nubv != NULL) sf_glad_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)sf_glad_glVertexAttrib4Nubv;
    if (sf_glad_glVertexAttrib4NubvARB == NULL && sf_glad_glVertexAttrib4ubvNV != NULL) sf_glad_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)sf_glad_glVertexAttrib4ubvNV;
    if (sf_glad_glVertexAttrib4Nuiv == NULL && sf_glad_glVertexAttrib4NuivARB != NULL) sf_glad_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)sf_glad_glVertexAttrib4NuivARB;
    if (sf_glad_glVertexAttrib4NuivARB == NULL && sf_glad_glVertexAttrib4Nuiv != NULL) sf_glad_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC)sf_glad_glVertexAttrib4Nuiv;
    if (sf_glad_glVertexAttrib4Nusv == NULL && sf_glad_glVertexAttrib4NusvARB != NULL) sf_glad_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)sf_glad_glVertexAttrib4NusvARB;
    if (sf_glad_glVertexAttrib4NusvARB == NULL && sf_glad_glVertexAttrib4Nusv != NULL) sf_glad_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC)sf_glad_glVertexAttrib4Nusv;
    if (sf_glad_glVertexAttrib4s == NULL && sf_glad_glVertexAttrib4sARB != NULL) sf_glad_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)sf_glad_glVertexAttrib4sARB;
    if (sf_glad_glVertexAttrib4s == NULL && sf_glad_glVertexAttrib4sNV != NULL) sf_glad_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)sf_glad_glVertexAttrib4sNV;
    if (sf_glad_glVertexAttrib4sARB == NULL && sf_glad_glVertexAttrib4s != NULL) sf_glad_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)sf_glad_glVertexAttrib4s;
    if (sf_glad_glVertexAttrib4sARB == NULL && sf_glad_glVertexAttrib4sNV != NULL) sf_glad_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)sf_glad_glVertexAttrib4sNV;
    if (sf_glad_glVertexAttrib4sNV == NULL && sf_glad_glVertexAttrib4s != NULL) sf_glad_glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)sf_glad_glVertexAttrib4s;
    if (sf_glad_glVertexAttrib4sNV == NULL && sf_glad_glVertexAttrib4sARB != NULL) sf_glad_glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)sf_glad_glVertexAttrib4sARB;
    if (sf_glad_glVertexAttrib4sv == NULL && sf_glad_glVertexAttrib4svARB != NULL) sf_glad_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)sf_glad_glVertexAttrib4svARB;
    if (sf_glad_glVertexAttrib4sv == NULL && sf_glad_glVertexAttrib4svNV != NULL) sf_glad_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)sf_glad_glVertexAttrib4svNV;
    if (sf_glad_glVertexAttrib4svARB == NULL && sf_glad_glVertexAttrib4sv != NULL) sf_glad_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)sf_glad_glVertexAttrib4sv;
    if (sf_glad_glVertexAttrib4svARB == NULL && sf_glad_glVertexAttrib4svNV != NULL) sf_glad_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)sf_glad_glVertexAttrib4svNV;
    if (sf_glad_glVertexAttrib4svNV == NULL && sf_glad_glVertexAttrib4sv != NULL) sf_glad_glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)sf_glad_glVertexAttrib4sv;
    if (sf_glad_glVertexAttrib4svNV == NULL && sf_glad_glVertexAttrib4svARB != NULL) sf_glad_glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)sf_glad_glVertexAttrib4svARB;
    if (sf_glad_glVertexAttrib4ubNV == NULL && sf_glad_glVertexAttrib4Nub != NULL) sf_glad_glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)sf_glad_glVertexAttrib4Nub;
    if (sf_glad_glVertexAttrib4ubNV == NULL && sf_glad_glVertexAttrib4NubARB != NULL) sf_glad_glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)sf_glad_glVertexAttrib4NubARB;
    if (sf_glad_glVertexAttrib4ubv == NULL && sf_glad_glVertexAttrib4ubvARB != NULL) sf_glad_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)sf_glad_glVertexAttrib4ubvARB;
    if (sf_glad_glVertexAttrib4ubvARB == NULL && sf_glad_glVertexAttrib4ubv != NULL) sf_glad_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC)sf_glad_glVertexAttrib4ubv;
    if (sf_glad_glVertexAttrib4ubvNV == NULL && sf_glad_glVertexAttrib4Nubv != NULL) sf_glad_glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)sf_glad_glVertexAttrib4Nubv;
    if (sf_glad_glVertexAttrib4ubvNV == NULL && sf_glad_glVertexAttrib4NubvARB != NULL) sf_glad_glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)sf_glad_glVertexAttrib4NubvARB;
    if (sf_glad_glVertexAttrib4uiv == NULL && sf_glad_glVertexAttrib4uivARB != NULL) sf_glad_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)sf_glad_glVertexAttrib4uivARB;
    if (sf_glad_glVertexAttrib4uivARB == NULL && sf_glad_glVertexAttrib4uiv != NULL) sf_glad_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC)sf_glad_glVertexAttrib4uiv;
    if (sf_glad_glVertexAttrib4usv == NULL && sf_glad_glVertexAttrib4usvARB != NULL) sf_glad_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)sf_glad_glVertexAttrib4usvARB;
    if (sf_glad_glVertexAttrib4usvARB == NULL && sf_glad_glVertexAttrib4usv != NULL) sf_glad_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC)sf_glad_glVertexAttrib4usv;
    if (sf_glad_glVertexAttribDivisor == NULL && sf_glad_glVertexAttribDivisorARB != NULL) sf_glad_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)sf_glad_glVertexAttribDivisorARB;
    if (sf_glad_glVertexAttribDivisorARB == NULL && sf_glad_glVertexAttribDivisor != NULL) sf_glad_glVertexAttribDivisorARB = (PFNGLVERTEXATTRIBDIVISORARBPROC)sf_glad_glVertexAttribDivisor;
    if (sf_glad_glVertexAttribI1i == NULL && sf_glad_glVertexAttribI1iEXT != NULL) sf_glad_glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)sf_glad_glVertexAttribI1iEXT;
    if (sf_glad_glVertexAttribI1iEXT == NULL && sf_glad_glVertexAttribI1i != NULL) sf_glad_glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC)sf_glad_glVertexAttribI1i;
    if (sf_glad_glVertexAttribI1iv == NULL && sf_glad_glVertexAttribI1ivEXT != NULL) sf_glad_glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)sf_glad_glVertexAttribI1ivEXT;
    if (sf_glad_glVertexAttribI1ivEXT == NULL && sf_glad_glVertexAttribI1iv != NULL) sf_glad_glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC)sf_glad_glVertexAttribI1iv;
    if (sf_glad_glVertexAttribI1ui == NULL && sf_glad_glVertexAttribI1uiEXT != NULL) sf_glad_glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)sf_glad_glVertexAttribI1uiEXT;
    if (sf_glad_glVertexAttribI1uiEXT == NULL && sf_glad_glVertexAttribI1ui != NULL) sf_glad_glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC)sf_glad_glVertexAttribI1ui;
    if (sf_glad_glVertexAttribI1uiv == NULL && sf_glad_glVertexAttribI1uivEXT != NULL) sf_glad_glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)sf_glad_glVertexAttribI1uivEXT;
    if (sf_glad_glVertexAttribI1uivEXT == NULL && sf_glad_glVertexAttribI1uiv != NULL) sf_glad_glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC)sf_glad_glVertexAttribI1uiv;
    if (sf_glad_glVertexAttribI2i == NULL && sf_glad_glVertexAttribI2iEXT != NULL) sf_glad_glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)sf_glad_glVertexAttribI2iEXT;
    if (sf_glad_glVertexAttribI2iEXT == NULL && sf_glad_glVertexAttribI2i != NULL) sf_glad_glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC)sf_glad_glVertexAttribI2i;
    if (sf_glad_glVertexAttribI2iv == NULL && sf_glad_glVertexAttribI2ivEXT != NULL) sf_glad_glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)sf_glad_glVertexAttribI2ivEXT;
    if (sf_glad_glVertexAttribI2ivEXT == NULL && sf_glad_glVertexAttribI2iv != NULL) sf_glad_glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC)sf_glad_glVertexAttribI2iv;
    if (sf_glad_glVertexAttribI2ui == NULL && sf_glad_glVertexAttribI2uiEXT != NULL) sf_glad_glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)sf_glad_glVertexAttribI2uiEXT;
    if (sf_glad_glVertexAttribI2uiEXT == NULL && sf_glad_glVertexAttribI2ui != NULL) sf_glad_glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC)sf_glad_glVertexAttribI2ui;
    if (sf_glad_glVertexAttribI2uiv == NULL && sf_glad_glVertexAttribI2uivEXT != NULL) sf_glad_glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)sf_glad_glVertexAttribI2uivEXT;
    if (sf_glad_glVertexAttribI2uivEXT == NULL && sf_glad_glVertexAttribI2uiv != NULL) sf_glad_glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC)sf_glad_glVertexAttribI2uiv;
    if (sf_glad_glVertexAttribI3i == NULL && sf_glad_glVertexAttribI3iEXT != NULL) sf_glad_glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)sf_glad_glVertexAttribI3iEXT;
    if (sf_glad_glVertexAttribI3iEXT == NULL && sf_glad_glVertexAttribI3i != NULL) sf_glad_glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC)sf_glad_glVertexAttribI3i;
    if (sf_glad_glVertexAttribI3iv == NULL && sf_glad_glVertexAttribI3ivEXT != NULL) sf_glad_glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)sf_glad_glVertexAttribI3ivEXT;
    if (sf_glad_glVertexAttribI3ivEXT == NULL && sf_glad_glVertexAttribI3iv != NULL) sf_glad_glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC)sf_glad_glVertexAttribI3iv;
    if (sf_glad_glVertexAttribI3ui == NULL && sf_glad_glVertexAttribI3uiEXT != NULL) sf_glad_glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)sf_glad_glVertexAttribI3uiEXT;
    if (sf_glad_glVertexAttribI3uiEXT == NULL && sf_glad_glVertexAttribI3ui != NULL) sf_glad_glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC)sf_glad_glVertexAttribI3ui;
    if (sf_glad_glVertexAttribI3uiv == NULL && sf_glad_glVertexAttribI3uivEXT != NULL) sf_glad_glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)sf_glad_glVertexAttribI3uivEXT;
    if (sf_glad_glVertexAttribI3uivEXT == NULL && sf_glad_glVertexAttribI3uiv != NULL) sf_glad_glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC)sf_glad_glVertexAttribI3uiv;
    if (sf_glad_glVertexAttribI4bv == NULL && sf_glad_glVertexAttribI4bvEXT != NULL) sf_glad_glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)sf_glad_glVertexAttribI4bvEXT;
    if (sf_glad_glVertexAttribI4bvEXT == NULL && sf_glad_glVertexAttribI4bv != NULL) sf_glad_glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC)sf_glad_glVertexAttribI4bv;
    if (sf_glad_glVertexAttribI4i == NULL && sf_glad_glVertexAttribI4iEXT != NULL) sf_glad_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)sf_glad_glVertexAttribI4iEXT;
    if (sf_glad_glVertexAttribI4iEXT == NULL && sf_glad_glVertexAttribI4i != NULL) sf_glad_glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC)sf_glad_glVertexAttribI4i;
    if (sf_glad_glVertexAttribI4iv == NULL && sf_glad_glVertexAttribI4ivEXT != NULL) sf_glad_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)sf_glad_glVertexAttribI4ivEXT;
    if (sf_glad_glVertexAttribI4ivEXT == NULL && sf_glad_glVertexAttribI4iv != NULL) sf_glad_glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC)sf_glad_glVertexAttribI4iv;
    if (sf_glad_glVertexAttribI4sv == NULL && sf_glad_glVertexAttribI4svEXT != NULL) sf_glad_glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)sf_glad_glVertexAttribI4svEXT;
    if (sf_glad_glVertexAttribI4svEXT == NULL && sf_glad_glVertexAttribI4sv != NULL) sf_glad_glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC)sf_glad_glVertexAttribI4sv;
    if (sf_glad_glVertexAttribI4ubv == NULL && sf_glad_glVertexAttribI4ubvEXT != NULL) sf_glad_glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)sf_glad_glVertexAttribI4ubvEXT;
    if (sf_glad_glVertexAttribI4ubvEXT == NULL && sf_glad_glVertexAttribI4ubv != NULL) sf_glad_glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC)sf_glad_glVertexAttribI4ubv;
    if (sf_glad_glVertexAttribI4ui == NULL && sf_glad_glVertexAttribI4uiEXT != NULL) sf_glad_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)sf_glad_glVertexAttribI4uiEXT;
    if (sf_glad_glVertexAttribI4uiEXT == NULL && sf_glad_glVertexAttribI4ui != NULL) sf_glad_glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC)sf_glad_glVertexAttribI4ui;
    if (sf_glad_glVertexAttribI4uiv == NULL && sf_glad_glVertexAttribI4uivEXT != NULL) sf_glad_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)sf_glad_glVertexAttribI4uivEXT;
    if (sf_glad_glVertexAttribI4uivEXT == NULL && sf_glad_glVertexAttribI4uiv != NULL) sf_glad_glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC)sf_glad_glVertexAttribI4uiv;
    if (sf_glad_glVertexAttribI4usv == NULL && sf_glad_glVertexAttribI4usvEXT != NULL) sf_glad_glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)sf_glad_glVertexAttribI4usvEXT;
    if (sf_glad_glVertexAttribI4usvEXT == NULL && sf_glad_glVertexAttribI4usv != NULL) sf_glad_glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC)sf_glad_glVertexAttribI4usv;
    if (sf_glad_glVertexAttribIPointer == NULL && sf_glad_glVertexAttribIPointerEXT != NULL) sf_glad_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)sf_glad_glVertexAttribIPointerEXT;
    if (sf_glad_glVertexAttribIPointerEXT == NULL && sf_glad_glVertexAttribIPointer != NULL) sf_glad_glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC)sf_glad_glVertexAttribIPointer;
    if (sf_glad_glVertexAttribL1d == NULL && sf_glad_glVertexAttribL1dEXT != NULL) sf_glad_glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC)sf_glad_glVertexAttribL1dEXT;
    if (sf_glad_glVertexAttribL1dEXT == NULL && sf_glad_glVertexAttribL1d != NULL) sf_glad_glVertexAttribL1dEXT = (PFNGLVERTEXATTRIBL1DEXTPROC)sf_glad_glVertexAttribL1d;
    if (sf_glad_glVertexAttribL1dv == NULL && sf_glad_glVertexAttribL1dvEXT != NULL) sf_glad_glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC)sf_glad_glVertexAttribL1dvEXT;
    if (sf_glad_glVertexAttribL1dvEXT == NULL && sf_glad_glVertexAttribL1dv != NULL) sf_glad_glVertexAttribL1dvEXT = (PFNGLVERTEXATTRIBL1DVEXTPROC)sf_glad_glVertexAttribL1dv;
    if (sf_glad_glVertexAttribL2d == NULL && sf_glad_glVertexAttribL2dEXT != NULL) sf_glad_glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC)sf_glad_glVertexAttribL2dEXT;
    if (sf_glad_glVertexAttribL2dEXT == NULL && sf_glad_glVertexAttribL2d != NULL) sf_glad_glVertexAttribL2dEXT = (PFNGLVERTEXATTRIBL2DEXTPROC)sf_glad_glVertexAttribL2d;
    if (sf_glad_glVertexAttribL2dv == NULL && sf_glad_glVertexAttribL2dvEXT != NULL) sf_glad_glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC)sf_glad_glVertexAttribL2dvEXT;
    if (sf_glad_glVertexAttribL2dvEXT == NULL && sf_glad_glVertexAttribL2dv != NULL) sf_glad_glVertexAttribL2dvEXT = (PFNGLVERTEXATTRIBL2DVEXTPROC)sf_glad_glVertexAttribL2dv;
    if (sf_glad_glVertexAttribL3d == NULL && sf_glad_glVertexAttribL3dEXT != NULL) sf_glad_glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC)sf_glad_glVertexAttribL3dEXT;
    if (sf_glad_glVertexAttribL3dEXT == NULL && sf_glad_glVertexAttribL3d != NULL) sf_glad_glVertexAttribL3dEXT = (PFNGLVERTEXATTRIBL3DEXTPROC)sf_glad_glVertexAttribL3d;
    if (sf_glad_glVertexAttribL3dv == NULL && sf_glad_glVertexAttribL3dvEXT != NULL) sf_glad_glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC)sf_glad_glVertexAttribL3dvEXT;
    if (sf_glad_glVertexAttribL3dvEXT == NULL && sf_glad_glVertexAttribL3dv != NULL) sf_glad_glVertexAttribL3dvEXT = (PFNGLVERTEXATTRIBL3DVEXTPROC)sf_glad_glVertexAttribL3dv;
    if (sf_glad_glVertexAttribL4d == NULL && sf_glad_glVertexAttribL4dEXT != NULL) sf_glad_glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC)sf_glad_glVertexAttribL4dEXT;
    if (sf_glad_glVertexAttribL4dEXT == NULL && sf_glad_glVertexAttribL4d != NULL) sf_glad_glVertexAttribL4dEXT = (PFNGLVERTEXATTRIBL4DEXTPROC)sf_glad_glVertexAttribL4d;
    if (sf_glad_glVertexAttribL4dv == NULL && sf_glad_glVertexAttribL4dvEXT != NULL) sf_glad_glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC)sf_glad_glVertexAttribL4dvEXT;
    if (sf_glad_glVertexAttribL4dvEXT == NULL && sf_glad_glVertexAttribL4dv != NULL) sf_glad_glVertexAttribL4dvEXT = (PFNGLVERTEXATTRIBL4DVEXTPROC)sf_glad_glVertexAttribL4dv;
    if (sf_glad_glVertexAttribLPointer == NULL && sf_glad_glVertexAttribLPointerEXT != NULL) sf_glad_glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC)sf_glad_glVertexAttribLPointerEXT;
    if (sf_glad_glVertexAttribLPointerEXT == NULL && sf_glad_glVertexAttribLPointer != NULL) sf_glad_glVertexAttribLPointerEXT = (PFNGLVERTEXATTRIBLPOINTEREXTPROC)sf_glad_glVertexAttribLPointer;
    if (sf_glad_glVertexAttribPointer == NULL && sf_glad_glVertexAttribPointerARB != NULL) sf_glad_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)sf_glad_glVertexAttribPointerARB;
    if (sf_glad_glVertexAttribPointerARB == NULL && sf_glad_glVertexAttribPointer != NULL) sf_glad_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC)sf_glad_glVertexAttribPointer;
}

#if defined(GL_ES_VERSION_3_0) || defined(GL_VERSION_3_0)
#define SF_GLAD_GL_IS_SOME_NEW_VERSION 1
#else
#define SF_GLAD_GL_IS_SOME_NEW_VERSION 0
#endif

int sf_glad_gl_get_extensions( int version, const char **out_exts, unsigned int *out_num_exts_i, char ***out_exts_i) {
#if SF_GLAD_GL_IS_SOME_NEW_VERSION
    if(GLAD_VERSION_MAJOR(version) < 3) {
#else
    SF_GLAD_UNUSED(version);
    SF_GLAD_UNUSED(out_num_exts_i);
    SF_GLAD_UNUSED(out_exts_i);
#endif
        if (sf_glad_glGetString == NULL) {
            return 0;
        }
        *out_exts = (const char *)sf_glad_glGetString(GL_EXTENSIONS);
#if SF_GLAD_GL_IS_SOME_NEW_VERSION
    } else {
        unsigned int index = 0;
        unsigned int num_exts_i = 0;
        char **exts_i = NULL;
        if (sf_glad_glGetStringi == NULL || sf_glad_glGetIntegerv == NULL) {
            return 0;
        }
        sf_glad_glGetIntegerv(GL_NUM_EXTENSIONS, (int*) &num_exts_i);
        if (num_exts_i > 0) {
            exts_i = (char **) malloc(num_exts_i * (sizeof *exts_i));
        }
        if (exts_i == NULL) {
            return 0;
        }
        for(index = 0; index < num_exts_i; index++) {
            const char *gl_str_tmp = (const char*) sf_glad_glGetStringi(GL_EXTENSIONS, index);
            size_t len = strlen(gl_str_tmp) + 1;

            char *local_str = (char*) malloc(len * sizeof(char));
            if(local_str != NULL) {
                memcpy(local_str, gl_str_tmp, len * sizeof(char));
            }

            exts_i[index] = local_str;
        }

        *out_num_exts_i = num_exts_i;
        *out_exts_i = exts_i;
    }
#endif
    return 1;
}
static void sf_glad_gl_free_extensions(char **exts_i, unsigned int num_exts_i) {
    if (exts_i != NULL) {
        unsigned int index;
        for(index = 0; index < num_exts_i; index++) {
            free((void *) (exts_i[index]));
        }
        free((void *)exts_i);
        exts_i = NULL;
    }
}
static int sf_glad_gl_has_extension(int version, const char *exts, unsigned int num_exts_i, char **exts_i, const char *ext) {
    if(GLAD_VERSION_MAJOR(version) < 3 || !SF_GLAD_GL_IS_SOME_NEW_VERSION) {
        const char *extensions;
        const char *loc;
        const char *terminator;
        extensions = exts;
        if(extensions == NULL || ext == NULL) {
            return 0;
        }
        while(1) {
            loc = strstr(extensions, ext);
            if(loc == NULL) {
                return 0;
            }
            terminator = loc + strlen(ext);
            if((loc == extensions || *(loc - 1) == ' ') &&
                (*terminator == ' ' || *terminator == '\0')) {
                return 1;
            }
            extensions = terminator;
        }
    } else {
        unsigned int index;
        for(index = 0; index < num_exts_i; index++) {
            const char *e = exts_i[index];
            if(strcmp(e, ext) == 0) {
                return 1;
            }
        }
    }
    return 0;
}

static GLADapiproc sf_glad_gl_get_proc_from_userptr(void *userptr, const char* name) {
    return (GLAD_GNUC_EXTENSION (GLADapiproc (*)(const char *name)) userptr)(name);
}

static int sf_glad_gl_find_extensions_gl( int version) {
    const char *exts = NULL;
    unsigned int num_exts_i = 0;
    char **exts_i = NULL;
    if (!sf_glad_gl_get_extensions(version, &exts, &num_exts_i, &exts_i)) return 0;

    SF_GLAD_GL_AMD_draw_buffers_blend = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_AMD_draw_buffers_blend");
    SF_GLAD_GL_APPLE_flush_buffer_range = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_APPLE_flush_buffer_range");
    SF_GLAD_GL_APPLE_vertex_array_object = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_APPLE_vertex_array_object");
    SF_GLAD_GL_ARB_ES2_compatibility = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_ES2_compatibility");
    SF_GLAD_GL_ARB_blend_func_extended = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_blend_func_extended");
    SF_GLAD_GL_ARB_color_buffer_float = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_color_buffer_float");
    SF_GLAD_GL_ARB_copy_buffer = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_copy_buffer");
    SF_GLAD_GL_ARB_draw_buffers = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_draw_buffers");
    SF_GLAD_GL_ARB_draw_buffers_blend = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_draw_buffers_blend");
    SF_GLAD_GL_ARB_draw_elements_base_vertex = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_draw_elements_base_vertex");
    SF_GLAD_GL_ARB_draw_indirect = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_draw_indirect");
    SF_GLAD_GL_ARB_draw_instanced = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_draw_instanced");
    SF_GLAD_GL_ARB_framebuffer_object = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_framebuffer_object");
    SF_GLAD_GL_ARB_geometry_shader4 = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_geometry_shader4");
    SF_GLAD_GL_ARB_get_program_binary = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_get_program_binary");
    SF_GLAD_GL_ARB_gpu_shader_fp64 = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_gpu_shader_fp64");
    SF_GLAD_GL_ARB_imaging = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_imaging");
    SF_GLAD_GL_ARB_instanced_arrays = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_instanced_arrays");
    SF_GLAD_GL_ARB_map_buffer_range = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_map_buffer_range");
    SF_GLAD_GL_ARB_multisample = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_multisample");
    SF_GLAD_GL_ARB_multitexture = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_multitexture");
    SF_GLAD_GL_ARB_occlusion_query = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_occlusion_query");
    SF_GLAD_GL_ARB_point_parameters = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_point_parameters");
    SF_GLAD_GL_ARB_provoking_vertex = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_provoking_vertex");
    SF_GLAD_GL_ARB_sample_shading = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_sample_shading");
    SF_GLAD_GL_ARB_sampler_objects = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_sampler_objects");
    SF_GLAD_GL_ARB_separate_shader_objects = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_separate_shader_objects");
    SF_GLAD_GL_ARB_shader_objects = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_shader_objects");
    SF_GLAD_GL_ARB_shader_subroutine = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_shader_subroutine");
    SF_GLAD_GL_ARB_sync = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_sync");
    SF_GLAD_GL_ARB_tessellation_shader = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_tessellation_shader");
    SF_GLAD_GL_ARB_texture_buffer_object = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_texture_buffer_object");
    SF_GLAD_GL_ARB_texture_compression = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_texture_compression");
    SF_GLAD_GL_ARB_texture_multisample = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_texture_multisample");
    SF_GLAD_GL_ARB_timer_query = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_timer_query");
    SF_GLAD_GL_ARB_transform_feedback2 = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_transform_feedback2");
    SF_GLAD_GL_ARB_transform_feedback3 = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_transform_feedback3");
    SF_GLAD_GL_ARB_uniform_buffer_object = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_uniform_buffer_object");
    SF_GLAD_GL_ARB_vertex_array_object = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_vertex_array_object");
    SF_GLAD_GL_ARB_vertex_attrib_64bit = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_vertex_attrib_64bit");
    SF_GLAD_GL_ARB_vertex_buffer_object = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_vertex_buffer_object");
    SF_GLAD_GL_ARB_vertex_program = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_vertex_program");
    SF_GLAD_GL_ARB_vertex_shader = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_vertex_shader");
    SF_GLAD_GL_ARB_vertex_type_2_10_10_10_rev = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_vertex_type_2_10_10_10_rev");
    SF_GLAD_GL_ARB_viewport_array = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_viewport_array");
    SF_GLAD_GL_ATI_draw_buffers = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ATI_draw_buffers");
    SF_GLAD_GL_ATI_separate_stencil = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ATI_separate_stencil");
    SF_GLAD_GL_EXT_blend_color = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_blend_color");
    SF_GLAD_GL_EXT_blend_equation_separate = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_blend_equation_separate");
    SF_GLAD_GL_EXT_blend_func_separate = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_blend_func_separate");
    SF_GLAD_GL_EXT_blend_minmax = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_blend_minmax");
    SF_GLAD_GL_EXT_copy_texture = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_copy_texture");
    SF_GLAD_GL_EXT_direct_state_access = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_direct_state_access");
    SF_GLAD_GL_EXT_draw_buffers2 = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_draw_buffers2");
    SF_GLAD_GL_EXT_draw_instanced = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_draw_instanced");
    SF_GLAD_GL_EXT_draw_range_elements = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_draw_range_elements");
    SF_GLAD_GL_EXT_framebuffer_blit = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_framebuffer_blit");
    SF_GLAD_GL_EXT_framebuffer_multisample = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_framebuffer_multisample");
    SF_GLAD_GL_EXT_framebuffer_object = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_framebuffer_object");
    SF_GLAD_GL_EXT_geometry_shader4 = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_geometry_shader4");
    SF_GLAD_GL_EXT_gpu_shader4 = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_gpu_shader4");
    SF_GLAD_GL_EXT_multi_draw_arrays = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_multi_draw_arrays");
    SF_GLAD_GL_EXT_point_parameters = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_point_parameters");
    SF_GLAD_GL_EXT_provoking_vertex = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_provoking_vertex");
    SF_GLAD_GL_EXT_subtexture = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_subtexture");
    SF_GLAD_GL_EXT_texture3D = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture3D");
    SF_GLAD_GL_EXT_texture_array = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_array");
    SF_GLAD_GL_EXT_texture_buffer_object = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_buffer_object");
    SF_GLAD_GL_EXT_texture_integer = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_integer");
    SF_GLAD_GL_EXT_texture_object = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_object");
    SF_GLAD_GL_EXT_timer_query = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_timer_query");
    SF_GLAD_GL_EXT_transform_feedback = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_transform_feedback");
    SF_GLAD_GL_EXT_vertex_array = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_vertex_array");
    SF_GLAD_GL_EXT_vertex_attrib_64bit = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_vertex_attrib_64bit");
    SF_GLAD_GL_INGR_blend_func_separate = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_INGR_blend_func_separate");
    SF_GLAD_GL_NVX_conditional_render = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NVX_conditional_render");
    SF_GLAD_GL_NV_conditional_render = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_conditional_render");
    SF_GLAD_GL_NV_explicit_multisample = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_explicit_multisample");
    SF_GLAD_GL_NV_geometry_program4 = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_geometry_program4");
    SF_GLAD_GL_NV_point_sprite = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_point_sprite");
    SF_GLAD_GL_NV_transform_feedback = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_transform_feedback");
    SF_GLAD_GL_NV_transform_feedback2 = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_transform_feedback2");
    SF_GLAD_GL_NV_vertex_program = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_vertex_program");
    SF_GLAD_GL_NV_vertex_program4 = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_vertex_program4");
    SF_GLAD_GL_OES_single_precision = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_single_precision");
    SF_GLAD_GL_SGIS_point_parameters = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_SGIS_point_parameters");

    sf_glad_gl_free_extensions(exts_i, num_exts_i);

    return 1;
}

static int sf_glad_gl_find_core_gl(void) {
    int i;
    const char* version;
    const char* prefixes[] = {
        "OpenGL ES-CM ",
        "OpenGL ES-CL ",
        "OpenGL ES ",
        "OpenGL SC ",
        NULL
    };
    int major = 0;
    int minor = 0;
    version = (const char*) sf_glad_glGetString(GL_VERSION);
    if (!version) return 0;
    for (i = 0;  prefixes[i];  i++) {
        const size_t length = strlen(prefixes[i]);
        if (strncmp(version, prefixes[i], length) == 0) {
            version += length;
            break;
        }
    }

    GLAD_IMPL_UTIL_SSCANF(version, "%d.%d", &major, &minor);

    SF_GLAD_GL_VERSION_1_0 = (major == 1 && minor >= 0) || major > 1;
    SF_GLAD_GL_VERSION_1_1 = (major == 1 && minor >= 1) || major > 1;
    SF_GLAD_GL_VERSION_1_2 = (major == 1 && minor >= 2) || major > 1;
    SF_GLAD_GL_VERSION_1_3 = (major == 1 && minor >= 3) || major > 1;
    SF_GLAD_GL_VERSION_1_4 = (major == 1 && minor >= 4) || major > 1;
    SF_GLAD_GL_VERSION_1_5 = (major == 1 && minor >= 5) || major > 1;
    SF_GLAD_GL_VERSION_2_0 = (major == 2 && minor >= 0) || major > 2;
    SF_GLAD_GL_VERSION_2_1 = (major == 2 && minor >= 1) || major > 2;
    SF_GLAD_GL_VERSION_3_0 = (major == 3 && minor >= 0) || major > 3;
    SF_GLAD_GL_VERSION_3_1 = (major == 3 && minor >= 1) || major > 3;
    SF_GLAD_GL_VERSION_3_2 = (major == 3 && minor >= 2) || major > 3;
    SF_GLAD_GL_VERSION_3_3 = (major == 3 && minor >= 3) || major > 3;
    SF_GLAD_GL_VERSION_4_0 = (major == 4 && minor >= 0) || major > 4;
    SF_GLAD_GL_VERSION_4_1 = (major == 4 && minor >= 1) || major > 4;

    return GLAD_MAKE_VERSION(major, minor);
}

int gladLoadGLUserPtr( GLADuserptrloadfunc load, void *userptr) {
    int version;

    sf_glad_glGetString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    if(sf_glad_glGetString == NULL) return 0;
    if(sf_glad_glGetString(GL_VERSION) == NULL) return 0;
    version = sf_glad_gl_find_core_gl();

    sf_glad_gl_load_GL_VERSION_1_0(load, userptr);
    sf_glad_gl_load_GL_VERSION_1_1(load, userptr);
    sf_glad_gl_load_GL_VERSION_1_2(load, userptr);
    sf_glad_gl_load_GL_VERSION_1_3(load, userptr);
    sf_glad_gl_load_GL_VERSION_1_4(load, userptr);
    sf_glad_gl_load_GL_VERSION_1_5(load, userptr);
    sf_glad_gl_load_GL_VERSION_2_0(load, userptr);
    sf_glad_gl_load_GL_VERSION_2_1(load, userptr);
    sf_glad_gl_load_GL_VERSION_3_0(load, userptr);
    sf_glad_gl_load_GL_VERSION_3_1(load, userptr);
    sf_glad_gl_load_GL_VERSION_3_2(load, userptr);
    sf_glad_gl_load_GL_VERSION_3_3(load, userptr);
    sf_glad_gl_load_GL_VERSION_4_0(load, userptr);
    sf_glad_gl_load_GL_VERSION_4_1(load, userptr);

    if (!sf_glad_gl_find_extensions_gl(version)) return 0;
    sf_glad_gl_load_GL_AMD_draw_buffers_blend(load, userptr);
    sf_glad_gl_load_GL_APPLE_flush_buffer_range(load, userptr);
    sf_glad_gl_load_GL_APPLE_vertex_array_object(load, userptr);
    sf_glad_gl_load_GL_ARB_ES2_compatibility(load, userptr);
    sf_glad_gl_load_GL_ARB_blend_func_extended(load, userptr);
    sf_glad_gl_load_GL_ARB_color_buffer_float(load, userptr);
    sf_glad_gl_load_GL_ARB_copy_buffer(load, userptr);
    sf_glad_gl_load_GL_ARB_draw_buffers(load, userptr);
    sf_glad_gl_load_GL_ARB_draw_buffers_blend(load, userptr);
    sf_glad_gl_load_GL_ARB_draw_elements_base_vertex(load, userptr);
    sf_glad_gl_load_GL_ARB_draw_indirect(load, userptr);
    sf_glad_gl_load_GL_ARB_draw_instanced(load, userptr);
    sf_glad_gl_load_GL_ARB_framebuffer_object(load, userptr);
    sf_glad_gl_load_GL_ARB_geometry_shader4(load, userptr);
    sf_glad_gl_load_GL_ARB_get_program_binary(load, userptr);
    sf_glad_gl_load_GL_ARB_gpu_shader_fp64(load, userptr);
    sf_glad_gl_load_GL_ARB_imaging(load, userptr);
    sf_glad_gl_load_GL_ARB_instanced_arrays(load, userptr);
    sf_glad_gl_load_GL_ARB_map_buffer_range(load, userptr);
    sf_glad_gl_load_GL_ARB_multisample(load, userptr);
    sf_glad_gl_load_GL_ARB_multitexture(load, userptr);
    sf_glad_gl_load_GL_ARB_occlusion_query(load, userptr);
    sf_glad_gl_load_GL_ARB_point_parameters(load, userptr);
    sf_glad_gl_load_GL_ARB_provoking_vertex(load, userptr);
    sf_glad_gl_load_GL_ARB_sample_shading(load, userptr);
    sf_glad_gl_load_GL_ARB_sampler_objects(load, userptr);
    sf_glad_gl_load_GL_ARB_separate_shader_objects(load, userptr);
    sf_glad_gl_load_GL_ARB_shader_objects(load, userptr);
    sf_glad_gl_load_GL_ARB_shader_subroutine(load, userptr);
    sf_glad_gl_load_GL_ARB_sync(load, userptr);
    sf_glad_gl_load_GL_ARB_tessellation_shader(load, userptr);
    sf_glad_gl_load_GL_ARB_texture_buffer_object(load, userptr);
    sf_glad_gl_load_GL_ARB_texture_compression(load, userptr);
    sf_glad_gl_load_GL_ARB_texture_multisample(load, userptr);
    sf_glad_gl_load_GL_ARB_timer_query(load, userptr);
    sf_glad_gl_load_GL_ARB_transform_feedback2(load, userptr);
    sf_glad_gl_load_GL_ARB_transform_feedback3(load, userptr);
    sf_glad_gl_load_GL_ARB_uniform_buffer_object(load, userptr);
    sf_glad_gl_load_GL_ARB_vertex_array_object(load, userptr);
    sf_glad_gl_load_GL_ARB_vertex_attrib_64bit(load, userptr);
    sf_glad_gl_load_GL_ARB_vertex_buffer_object(load, userptr);
    sf_glad_gl_load_GL_ARB_vertex_program(load, userptr);
    sf_glad_gl_load_GL_ARB_vertex_shader(load, userptr);
    sf_glad_gl_load_GL_ARB_vertex_type_2_10_10_10_rev(load, userptr);
    sf_glad_gl_load_GL_ARB_viewport_array(load, userptr);
    sf_glad_gl_load_GL_ATI_draw_buffers(load, userptr);
    sf_glad_gl_load_GL_ATI_separate_stencil(load, userptr);
    sf_glad_gl_load_GL_EXT_blend_color(load, userptr);
    sf_glad_gl_load_GL_EXT_blend_equation_separate(load, userptr);
    sf_glad_gl_load_GL_EXT_blend_func_separate(load, userptr);
    sf_glad_gl_load_GL_EXT_blend_minmax(load, userptr);
    sf_glad_gl_load_GL_EXT_copy_texture(load, userptr);
    sf_glad_gl_load_GL_EXT_direct_state_access(load, userptr);
    sf_glad_gl_load_GL_EXT_draw_buffers2(load, userptr);
    sf_glad_gl_load_GL_EXT_draw_instanced(load, userptr);
    sf_glad_gl_load_GL_EXT_draw_range_elements(load, userptr);
    sf_glad_gl_load_GL_EXT_framebuffer_blit(load, userptr);
    sf_glad_gl_load_GL_EXT_framebuffer_multisample(load, userptr);
    sf_glad_gl_load_GL_EXT_framebuffer_object(load, userptr);
    sf_glad_gl_load_GL_EXT_geometry_shader4(load, userptr);
    sf_glad_gl_load_GL_EXT_gpu_shader4(load, userptr);
    sf_glad_gl_load_GL_EXT_multi_draw_arrays(load, userptr);
    sf_glad_gl_load_GL_EXT_point_parameters(load, userptr);
    sf_glad_gl_load_GL_EXT_provoking_vertex(load, userptr);
    sf_glad_gl_load_GL_EXT_subtexture(load, userptr);
    sf_glad_gl_load_GL_EXT_texture3D(load, userptr);
    sf_glad_gl_load_GL_EXT_texture_array(load, userptr);
    sf_glad_gl_load_GL_EXT_texture_buffer_object(load, userptr);
    sf_glad_gl_load_GL_EXT_texture_integer(load, userptr);
    sf_glad_gl_load_GL_EXT_texture_object(load, userptr);
    sf_glad_gl_load_GL_EXT_timer_query(load, userptr);
    sf_glad_gl_load_GL_EXT_transform_feedback(load, userptr);
    sf_glad_gl_load_GL_EXT_vertex_array(load, userptr);
    sf_glad_gl_load_GL_EXT_vertex_attrib_64bit(load, userptr);
    sf_glad_gl_load_GL_INGR_blend_func_separate(load, userptr);
    sf_glad_gl_load_GL_NVX_conditional_render(load, userptr);
    sf_glad_gl_load_GL_NV_conditional_render(load, userptr);
    sf_glad_gl_load_GL_NV_explicit_multisample(load, userptr);
    sf_glad_gl_load_GL_NV_geometry_program4(load, userptr);
    sf_glad_gl_load_GL_NV_point_sprite(load, userptr);
    sf_glad_gl_load_GL_NV_transform_feedback(load, userptr);
    sf_glad_gl_load_GL_NV_transform_feedback2(load, userptr);
    sf_glad_gl_load_GL_NV_vertex_program(load, userptr);
    sf_glad_gl_load_GL_NV_vertex_program4(load, userptr);
    sf_glad_gl_load_GL_OES_single_precision(load, userptr);
    sf_glad_gl_load_GL_SGIS_point_parameters(load, userptr);


    sf_glad_gl_resolve_aliases();

    return version;
}


int gladLoadGL( GLADloadfunc load) {
    return gladLoadGLUserPtr( sf_glad_gl_get_proc_from_userptr, GLAD_GNUC_EXTENSION (void*) load);
}

static int sf_glad_gl_find_extensions_gles2( int version) {
    const char *exts = NULL;
    unsigned int num_exts_i = 0;
    char **exts_i = NULL;
    if (!sf_glad_gl_get_extensions(version, &exts, &num_exts_i, &exts_i)) return 0;

    SF_GLAD_GL_EXT_blend_minmax = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_blend_minmax");
    SF_GLAD_GL_EXT_draw_instanced = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_draw_instanced");
    SF_GLAD_GL_EXT_multi_draw_arrays = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_multi_draw_arrays");
    SF_GLAD_GL_NV_conditional_render = sf_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_conditional_render");

    sf_glad_gl_free_extensions(exts_i, num_exts_i);

    return 1;
}

static int sf_glad_gl_find_core_gles2(void) {
    int i;
    const char* version;
    const char* prefixes[] = {
        "OpenGL ES-CM ",
        "OpenGL ES-CL ",
        "OpenGL ES ",
        "OpenGL SC ",
        NULL
    };
    int major = 0;
    int minor = 0;
    version = (const char*) sf_glad_glGetString(GL_VERSION);
    if (!version) return 0;
    for (i = 0;  prefixes[i];  i++) {
        const size_t length = strlen(prefixes[i]);
        if (strncmp(version, prefixes[i], length) == 0) {
            version += length;
            break;
        }
    }

    GLAD_IMPL_UTIL_SSCANF(version, "%d.%d", &major, &minor);

    SF_GLAD_GL_ES_VERSION_2_0 = (major == 2 && minor >= 0) || major > 2;

    return GLAD_MAKE_VERSION(major, minor);
}

int gladLoadGLES2UserPtr( GLADuserptrloadfunc load, void *userptr) {
    int version;

    sf_glad_glGetString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    if(sf_glad_glGetString == NULL) return 0;
    if(sf_glad_glGetString(GL_VERSION) == NULL) return 0;
    version = sf_glad_gl_find_core_gles2();

    sf_glad_gl_load_GL_ES_VERSION_2_0(load, userptr);

    if (!sf_glad_gl_find_extensions_gles2(version)) return 0;
    sf_glad_gl_load_GL_EXT_blend_minmax(load, userptr);
    sf_glad_gl_load_GL_EXT_draw_instanced(load, userptr);
    sf_glad_gl_load_GL_EXT_multi_draw_arrays(load, userptr);
    sf_glad_gl_load_GL_NV_conditional_render(load, userptr);


    sf_glad_gl_resolve_aliases();

    return version;
}


int gladLoadGLES2( GLADloadfunc load) {
    return gladLoadGLES2UserPtr( sf_glad_gl_get_proc_from_userptr, GLAD_GNUC_EXTENSION (void*) load);
}





#ifdef GLAD_GL

#ifndef GLAD_LOADER_LIBRARY_C_
#define GLAD_LOADER_LIBRARY_C_

#include <stddef.h>
#include <stdlib.h>

#if GLAD_PLATFORM_WIN32
#include <windows.h>
#else
#include <dlfcn.h>
#endif


static void* glad_get_dlopen_handle(const char *lib_names[], int length) {
    void *handle = NULL;
    int i;

    for (i = 0; i < length; ++i) {
#if GLAD_PLATFORM_WIN32
  #if GLAD_PLATFORM_UWP
        size_t buffer_size = (strlen(lib_names[i]) + 1) * sizeof(WCHAR);
        LPWSTR buffer = (LPWSTR) malloc(buffer_size);
        if (buffer != NULL) {
            int ret = MultiByteToWideChar(CP_ACP, 0, lib_names[i], -1, buffer, buffer_size);
            if (ret != 0) {
                handle = (void*) LoadPackagedLibrary(buffer, 0);
            }
            free((void*) buffer);
        }
  #else
        handle = (void*) LoadLibraryA(lib_names[i]);
  #endif
#else
        handle = dlopen(lib_names[i], RTLD_LAZY | RTLD_LOCAL);
#endif
        if (handle != NULL) {
            return handle;
        }
    }

    return NULL;
}

static void glad_close_dlopen_handle(void* handle) {
    if (handle != NULL) {
#if GLAD_PLATFORM_WIN32
        FreeLibrary((HMODULE) handle);
#else
        dlclose(handle);
#endif
    }
}

static GLADapiproc glad_dlsym_handle(void* handle, const char *name) {
    if (handle == NULL) {
        return NULL;
    }

#if GLAD_PLATFORM_WIN32
    return (GLADapiproc) GetProcAddress((HMODULE) handle, name);
#else
    return GLAD_GNUC_EXTENSION (GLADapiproc) dlsym(handle, name);
#endif
}

#endif /* GLAD_LOADER_LIBRARY_C_ */

typedef void* (GLAD_API_PTR *GLADglprocaddrfunc)(const char*);
struct _glad_gl_userptr {
    void *handle;
    GLADglprocaddrfunc gl_get_proc_address_ptr;
};

static GLADapiproc glad_gl_get_proc(void *vuserptr, const char *name) {
    struct _glad_gl_userptr userptr = *(struct _glad_gl_userptr*) vuserptr;
    GLADapiproc result = NULL;

    if(userptr.gl_get_proc_address_ptr != NULL) {
        result = GLAD_GNUC_EXTENSION (GLADapiproc) userptr.gl_get_proc_address_ptr(name);
    }
    if(result == NULL) {
        result = glad_dlsym_handle(userptr.handle, name);
    }

    return result;
}

static void* _glad_GL_loader_handle = NULL;

static void* glad_gl_dlopen_handle(void) {
#if GLAD_PLATFORM_APPLE
    static const char *NAMES[] = {
        "../Frameworks/OpenGL.framework/OpenGL",
        "/Library/Frameworks/OpenGL.framework/OpenGL",
        "/System/Library/Frameworks/OpenGL.framework/OpenGL",
        "/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL"
    };
#elif GLAD_PLATFORM_WIN32
    static const char *NAMES[] = {"opengl32.dll"};
#else
    static const char *NAMES[] = {
  #if defined(__CYGWIN__)
        "libGL-1.so",
  #endif
        "libGL.so.1",
        "libGL.so"
    };
#endif

    if (_glad_GL_loader_handle == NULL) {
        _glad_GL_loader_handle = glad_get_dlopen_handle(NAMES, sizeof(NAMES) / sizeof(NAMES[0]));
    }

    return _glad_GL_loader_handle;
}

static struct _glad_gl_userptr glad_gl_build_userptr(void *handle) {
    struct _glad_gl_userptr userptr;

    userptr.handle = handle;
#if GLAD_PLATFORM_APPLE || defined(__HAIKU__)
    userptr.gl_get_proc_address_ptr = NULL;
#elif GLAD_PLATFORM_WIN32
    userptr.gl_get_proc_address_ptr =
        (GLADglprocaddrfunc) glad_dlsym_handle(handle, "wglGetProcAddress");
#else
    userptr.gl_get_proc_address_ptr =
        (GLADglprocaddrfunc) glad_dlsym_handle(handle, "glXGetProcAddressARB");
#endif

    return userptr;
}

int gladLoaderLoadGL(void) {
    int version = 0;
    void *handle;
    int did_load = 0;
    struct _glad_gl_userptr userptr;

    did_load = _glad_GL_loader_handle == NULL;
    handle = glad_gl_dlopen_handle();
    if (handle) {
        userptr = glad_gl_build_userptr(handle);

        version = gladLoadGLUserPtr(glad_gl_get_proc, &userptr);

        if (did_load) {
            gladLoaderUnloadGL();
        }
    }

    return version;
}



void gladLoaderUnloadGL(void) {
    if (_glad_GL_loader_handle != NULL) {
        glad_close_dlopen_handle(_glad_GL_loader_handle);
        _glad_GL_loader_handle = NULL;
    }
}

#endif /* GLAD_GL */
#ifdef GLAD_GLES2

#ifndef GLAD_LOADER_LIBRARY_C_
#define GLAD_LOADER_LIBRARY_C_

#include <stddef.h>
#include <stdlib.h>

#if GLAD_PLATFORM_WIN32
#include <windows.h>
#else
#include <dlfcn.h>
#endif


static void* glad_get_dlopen_handle(const char *lib_names[], int length) {
    void *handle = NULL;
    int i;

    for (i = 0; i < length; ++i) {
#if GLAD_PLATFORM_WIN32
  #if GLAD_PLATFORM_UWP
        size_t buffer_size = (strlen(lib_names[i]) + 1) * sizeof(WCHAR);
        LPWSTR buffer = (LPWSTR) malloc(buffer_size);
        if (buffer != NULL) {
            int ret = MultiByteToWideChar(CP_ACP, 0, lib_names[i], -1, buffer, buffer_size);
            if (ret != 0) {
                handle = (void*) LoadPackagedLibrary(buffer, 0);
            }
            free((void*) buffer);
        }
  #else
        handle = (void*) LoadLibraryA(lib_names[i]);
  #endif
#else
        handle = dlopen(lib_names[i], RTLD_LAZY | RTLD_LOCAL);
#endif
        if (handle != NULL) {
            return handle;
        }
    }

    return NULL;
}

static void glad_close_dlopen_handle(void* handle) {
    if (handle != NULL) {
#if GLAD_PLATFORM_WIN32
        FreeLibrary((HMODULE) handle);
#else
        dlclose(handle);
#endif
    }
}

static GLADapiproc glad_dlsym_handle(void* handle, const char *name) {
    if (handle == NULL) {
        return NULL;
    }

#if GLAD_PLATFORM_WIN32
    return (GLADapiproc) GetProcAddress((HMODULE) handle, name);
#else
    return GLAD_GNUC_EXTENSION (GLADapiproc) dlsym(handle, name);
#endif
}

#endif /* GLAD_LOADER_LIBRARY_C_ */

#if GLAD_PLATFORM_EMSCRIPTEN
#ifndef GLAD_EGL_H_
  typedef void (*__eglMustCastToProperFunctionPointerType)(void);
  typedef __eglMustCastToProperFunctionPointerType (GLAD_API_PTR *PFNEGLGETPROCADDRESSPROC)(const char *name);
#endif
  extern __eglMustCastToProperFunctionPointerType emscripten_GetProcAddress(const char *name);
#else
  #include <glad/egl.h>
#endif


struct _glad_gles2_userptr {
    void *handle;
    PFNEGLGETPROCADDRESSPROC get_proc_address_ptr;
};


static GLADapiproc glad_gles2_get_proc(void *vuserptr, const char* name) {
    struct _glad_gles2_userptr userptr = *(struct _glad_gles2_userptr*) vuserptr;
    GLADapiproc result = NULL;

#if GLAD_PLATFORM_EMSCRIPTEN
    GLAD_UNUSED(glad_dlsym_handle);
#else
    result = glad_dlsym_handle(userptr.handle, name);
#endif
    if (result == NULL) {
        result = userptr.get_proc_address_ptr(name);
    }

    return result;
}

static void* _glad_GL_loader_handle = NULL;

static void* glad_gles2_dlopen_handle(void) {
#if GLAD_PLATFORM_EMSCRIPTEN
#elif GLAD_PLATFORM_APPLE
    static const char *NAMES[] = {"libGLESv2.dylib"};
#elif GLAD_PLATFORM_WIN32
    static const char *NAMES[] = {"GLESv2.dll", "libGLESv2.dll"};
#else
    static const char *NAMES[] = {"libGLESv2.so.2", "libGLESv2.so"};
#endif

#if GLAD_PLATFORM_EMSCRIPTEN
    GLAD_UNUSED(glad_get_dlopen_handle);
    return NULL;
#else
    if (_glad_GL_loader_handle == NULL) {
        _glad_GL_loader_handle = glad_get_dlopen_handle(NAMES, sizeof(NAMES) / sizeof(NAMES[0]));
    }

    return _glad_GL_loader_handle;
#endif
}

static struct _glad_gles2_userptr glad_gles2_build_userptr(void *handle) {
    struct _glad_gles2_userptr userptr;
#if GLAD_PLATFORM_EMSCRIPTEN
    GLAD_UNUSED(handle);
    userptr.get_proc_address_ptr = emscripten_GetProcAddress;
#else
    userptr.handle = handle;
    userptr.get_proc_address_ptr = eglGetProcAddress;
#endif
    return userptr;
}

int gladLoaderLoadGLES2(void) {
    int version = 0;
    void *handle = NULL;
    int did_load = 0;
    struct _glad_gles2_userptr userptr;

#if GLAD_PLATFORM_EMSCRIPTEN
    GLAD_UNUSED(handle);
    GLAD_UNUSED(did_load);
    GLAD_UNUSED(glad_gles2_dlopen_handle);
    GLAD_UNUSED(glad_gles2_build_userptr);
    userptr.get_proc_address_ptr = emscripten_GetProcAddress;
    version = gladLoadGLES2UserPtr(glad_gles2_get_proc, &userptr);
#else
    if (eglGetProcAddress == NULL) {
        return 0;
    }

    did_load = _glad_GL_loader_handle == NULL;
    handle = glad_gles2_dlopen_handle();
    if (handle != NULL) {
        userptr = glad_gles2_build_userptr(handle);

        version = gladLoadGLES2UserPtr(glad_gles2_get_proc, &userptr);

        if (!version && did_load) {
            gladLoaderUnloadGLES2();
        }
    }
#endif

    return version;
}



void gladLoaderUnloadGLES2(void) {
    if (_glad_GL_loader_handle != NULL) {
        glad_close_dlopen_handle(_glad_GL_loader_handle);
        _glad_GL_loader_handle = NULL;
    }
}

#endif /* GLAD_GLES2 */

#ifdef __cplusplus
}
#endif

#endif /* SF_GLAD_GL_IMPLEMENTATION */
